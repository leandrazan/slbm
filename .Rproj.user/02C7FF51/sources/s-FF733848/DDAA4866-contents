---
title: "Fit IDF model based on sliding BM"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{IDFsBM}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

```{r setup}
library(IDFsl)
library(tidyverse)
```

This vignette explains how to use the functions provided in the `fitSBM` package
for fitting IDF (Intensity-Duration-Frequency) models to data based on sliding 
block maxima. 


### Preparing data 
First, we load a precipitation data set of hourly measurements from Essen as 
provided by the DWD.
We load it by running `data("precEssen")` as it is an example data set in this package.

```{r}
data("precEssen", package = "IDFsl")

head(precEssen)
```


The first column , `X`, is just a counter of observations, and we do not need it. 
The functions for computing sliding block maxima of the intensity duration process
expect a tibble or data frame as input, that has *only* columns named 
`datetime` containing the date and time of the measurement, as well as `prec` 
containing the observed precipitation amount. 
Therfore we prepare the dataset as follows

```{r}
precEssen <- precEssen %>% select(c(RR, MESS_DATUM)) %>% 
  rename("datetime" = "MESS_DATUM", "prec" = "RR")
```

Now we can compute block maxima of the intensity duration process for several
values of the duration $d$, from one hour (resolution of the data) up to 3 days. 


```{r}
dur <-  c(1,2,4,8,24,48, 72)
agbm <- get_agg_bm(data = precEssen, ds = dur)
agbm
```

The output of `get_agg_bm()` is a tibble containing data of disjoint and 
sliding block maxima. The column `duration` contains the chosen durations $d$, 
the column `djbm` contains dataframes with 
blockmaxima of the ID process of the respective duration and the year/season in which 
the maximum was observed. The column `slbm` is similar; here, the year in 
which the block maximum was observed is the year in which the first observation 
of the block was made. 

For faster cross-validation, we also need the output of `conc_bm()`, which computes
sliding block maxima for the time series that arises when removing observation from 
some years. See the function documentation of `conc_bm()` for further details. 
The input is the tibble containing the ID processes, as genereated by `fun_aggregate2df()`.
Since we want to perform cross-validation with test sets of size 3 (containing 
disjoint block maxima from three consecutive years), we specify `nlo = 3`. 
```{r}
agdf <- fun_aggregate2df(precEssen, ds = dur )
concbm <- compute_conc_bm_id(agdf, nlo = 3) # takes a while.
concbm
```

### Estimate parameters and compute Quantile Scores 

Now we have everything to estimate parameters of the d-GEV distribution along with 
its quantiles and evaluate the estimation based on cross-validation. 

```{r}
cv_res <- fit_dgev_cv_qs(agg_bm = agbm, conc_bm = concbm, ds = dur, quants = c(0.5, 0.8, 0.9, 0.95, 0.99, 0.995), 
               mult_sc = TRUE)

cv_res
```
Now we can compute the mean Quantile Scores of the cross-validated Quantiles Scores. 

```{r}
meanQS <-  cv_res %>% dplyr::select( - c( mut, sigma0, shape, eta, conv, Testdata )) %>%
         dplyr::group_by(ds, ps, estimator) %>%
         dplyr::summarise(MQS = mean(quant_score), .groups = "drop")
meanQS
```
Further, we compute the Quantile Skill index and make a heatmap.

```{r}
QSI <- meanQS %>% pivot_wider( names_from = estimator, values_from = MQS) %>% 
  mutate( QSI = purrr::map2_dbl( .x = disjoint, .y = sliding, ~ compute_qsi(.y, .x)))
QSI
```
```{r, fig.width=10cm}
QSI %>% 
  ggplot() +
    geom_tile(aes(fill = QSI,
                  x= as.factor(ds),
                  y = as.factor(ps)), color = "black",
              show.legend = TRUE)+
  scale_fill_gradient2()+
   labs( x = "duration [h]", y = "Probability", fill = "QSI")+
  theme_bw()+
    theme(text = element_text(size= 18))

```

If you only want to have the parameter estimates as obtained from the full dataset 
without cross-validation, and you want to fit the model with a multi-scale parameter, 
run 

```{r}
gev.d.fit.sl(agbm, mult_sc = TRUE)
```
Per default, all additional parameters (duration offset, intensity offset, multi-scale
parameter) are not fitted, but can be when the corresponding argument in the fit 
function is set to `TRUE`. 


### Restriction to a Season 

When you want to consider observations that are made during a specific season, 
you can proceed as follows. 
First, filter the data that you want to keep, e.g. only observations made during 
summer months (June, July, August). 

```{r}
precSummer <- precEssen %>% filter(lubridate::month(datetime) %in% 6:8)
head(precSummer)
```
The length of the summer season is 92 days, which affects the blocksize for computing 
block maxima (e.g., for duration $d = 1$, it is now $ 24 \cdot 92 = 2208$).
We can pass the new season length to the functions that are affected by that, via
the argument `seasonlength`. 
The rest works just as for the default case (with seasonlength 365 days) above: 

```{r}
agdf <- fun_aggregate2df(data = precEssen, ds = dur, seasonlength = 92)
agbm <- get_agg_bm(data = precEssen, ds = dur, seasonlength = 92) 
concbm <- compute_conc_bm_id(agdf, seasonlength = 92)
cv_res <- fit_dgev_cv_qs(agg_bm = agbm, conc_bm = concbm, ds = dur, 
                         quants = c(0.5, 0.8, 0.9, 0.95, 0.99, 0.995), 
               mult_sc = TRUE)

meanQS <-  cv_res %>% dplyr::select( - c( mut, sigma0, shape, eta, conv, Testdata )) %>%
         dplyr::group_by(ds, ps, estimator) %>%
         dplyr::summarise(MQS = mean(quant_score), .groups = "drop")
meanQS

QSI <- meanQS %>% pivot_wider( names_from = estimator, values_from = MQS) %>% 
  mutate( QSI = purrr::map2_dbl( .x = disjoint, .y = sliding, ~ compute_qsi(.y, .x)))
QSI
```

```{r, fig.width=10cm}
QSI %>% 
  ggplot() +
    geom_tile(aes(fill = QSI,
                  x= as.factor(ds),
                  y = as.factor(ps)), color = "black",
              show.legend = TRUE)+
  scale_fill_gradient2()+
   labs( x = "duration [h]", y = "Probability", fill = "QSI")+
  theme_bw()+
    theme(text = element_text(size= 18))
```


