#'
#' @examples
#' x <- runif(200)
#' blockmax(x, 20, "disjoint")
#' blockmax(x, 20, "sliding")
blockmax <- function(data, r, method=c("disjoint", "sliding")) {
method <- match.arg(method)
if( !is.vector(data, mode="numeric") )
stop("data must be a numeric vector")
n <- length(data)
if ( !(assertthat::is.count(r)) || r > n )
stop("r must be a whole number between 1 and length(data)")
result <- switch(method,
"disjoint" = apply(X = matrix(c(data, rep(NA, ifelse( ((floor(n/r) +1)*r -n)  == r , 0,
(floor(n/r) +1)*r -n) ) ), nrow=r),
MARGIN = 2,
FUN=max , na.rm = TRUE),
"sliding" = zoo::rollmax(data,r))
# result <- switch(method,
#                  "disjoint" = apply(X = matrix(data[1:(floor(n/r)*r)], nrow=r),
#                                     MARGIN = 2,
#                                     FUN=max , na.rm = TRUE),
#                  "sliding" = zoo::rollmax(data,r))
return(result)
}
bm_concat_years(df, 2, 4, blcksz = 30)
df
bm_concat_years(df, 2, 4, blcksz = 30)
df %>% filter( Year  == 2)
df %>% filter( Year == 2)
dplyr::filter( df, Year == 2)
dplyr::filter( df, Year == 4)
#'
#' @param dailydata dataframe with hourly/daily ... observations in column named 'obs',
#' and the year in which the observation was made in column named 'Year'
#' @param nlo number of years that make up the test set
#' @param blcksz blocksize for computing sliding block maxima
#'
#' @return
#' @export
#'
#' @examples
compute_conc_bm <- function(dailydata, nlo = 3, blcksz){
years_obs <- 1:ceiling(nrow(dailydata)/blcksz)
ny <- length(years_obs)
start_year <- tibble::tibble(sty = rep(years_obs, each = nlo), index = rep(2:(nlo+1), ny))
start_year <- start_year %>% mutate(year_f = sty + index)
start_year <- start_year %>% mutate(year_f = ifelse(year_f <= max(years_obs), year_f, year_f - ny))
start_year <- start_year %>% select(-index)
df_conc_slbms <-  start_year %>%
mutate( newslbm = map2(.x = sty, .y = year_f  ,
.f = function(.x, .y){
tryCatch(bm_concat_years(dailydata = dailydata, year1 = .x, year2 = .y,
blcksz = blcksz),
error = function(e) NA)
}) )
return(df_conc_slbms)
}
compute_conc_bm(df, nlo = 3, blcksz = 30)
#'
#' @param dailydata dataframe with hourly/daily ... observations in column named 'obs',
#' and the year in which the observation was made in column named 'Year'
#' @param nlo number of years that make up the test set
#' @param blcksz blocksize for computing sliding block maxima
#'
#' @return
#' @export
#'
#' @examples
compute_conc_bm <- function(dailydata, nlo = 3, blcksz){
years_obs <- 1:ceiling(nrow(dailydata)/blcksz)
ny <- length(years_obs)
start_year <- tibble::tibble(sty = rep(years_obs, each = nlo), index = rep(2:(nlo+1), ny))
start_year <- start_year %>% dplyr::mutate(year_f = sty + index)
start_year <- start_year %>% dplyr::mutate(year_f = ifelse(year_f <= max(years_obs), year_f, year_f - ny))
start_year <- start_year %>% dplyr::select(-index)
df_conc_slbms <-  start_year %>%
mutate( newslbm = purrr::map2(.x = sty, .y = year_f  ,
.f = function(.x, .y){
tryCatch(bm_concat_years(dailydata = dailydata, year1 = .x, year2 = .y,
blcksz = blcksz),
error = function(e) NA)
}) )
return(df_conc_slbms)
}
compute_conc_bm(df, nlo = 3, blcksz = 30)
#' @examples
#'
#' @param dailydata dataframe with hourly/daily ... observations in column named 'obs',
#' and the year in which the observation was made in column named 'Year'
#' @param nlo number of years that make up the test set
#' @param blcksz blocksize for computing sliding block maxima
#'
#' @return
#' @export
#'
#' @examples
compute_conc_bm <- function(dailydata, nlo = 3, blcksz){
years_obs <- 1:ceiling(nrow(dailydata)/blcksz)
ny <- length(years_obs)
start_year <- tibble::tibble(sty = rep(years_obs, each = nlo), index = rep(2:(nlo+1), ny))
start_year <- start_year %>% dplyr::mutate(year_f = sty + index)
start_year <- start_year %>% dplyr::mutate(year_f = ifelse(year_f <= max(years_obs), year_f, year_f - ny))
start_year <- start_year %>% dplyr::select(-index)
df_conc_slbms <-  start_year %>%
dplyr::mutate( newslbm = purrr::map2(.x = sty, .y = year_f  ,
.f = function(.x, .y){
tryCatch(bm_concat_years(dailydata = dailydata, year1 = .x, year2 = .y,
blcksz = blcksz),
error = function(e) NA)
}) )
return(df_conc_slbms)
}
compute_conc_bm(df, nlo = 3, blcksz = 30)
df <- data.frame(obs = evd::rgpd(30*5), Year = rep(1:5, each = 30))
compute_conc_bm(df, nlo = 3, blcksz = 30)
fit_cv_iter <- function(data, djbm, leave_out, blcksz){
data.train <- data %>% filter(! (Year %in% leave_out))
# data.test <-  data %>% filter( Year %in% leave_out)
bm.dj.train <- (djbm %>% filter(!(Year %in% leave_out)))$obs
bm.dj.test <- (djbm %>% filter(Year %in% leave_out))$obs
bm.sl.train <- blockmax(data.train$obs, r = blcksz, "sliding")
fit.dj <- evd::fgev(bm.dj.train)
fit.sl <- evd::fgev(bm.sl.train)
est.par <- data.frame(t(fit.dj$estimate)) %>% bind_rows(data.frame(t(fit.sl$estimate)) )%>%
bind_cols(estimator = c("disjoint", "sliding"))
est.par <- est.par %>% tidyr::expand_grid(ps = 1-1/c(2,5,10, 20, 50, 100, 200 ))
est.par <- est.par %>%
dplyr::mutate( est.quants = purrr::pmap_dbl( list(loc, scale, shape, ps) ,
.f = function( .loc, .scale, .shape, .ps){
evd::qgev(.ps, loc = .loc, scale = .scale, shape = .shape)
}
))
zns  <- bm.dj.test
est.par$djdat <- rep(list(zns), nrow(est.par))
table_quants <- est.par %>%
dplyr::mutate( quant_score = purrr::pmap_dbl( .l = list( .ps = ps , .q = est.quants),
.f = function(.ps, .q){
compute_qs(obs = zns, quant.est = .q,
p = .ps)
})) %>%
dplyr::arrange(ps)
table_quants
}
fit_cv_iter(df, data.frame( obs = blockmax(df$obs, r = 30, "disjoint")), leave_out = c(3,5), blcksz = 30)
fit_cv_iter(df, data.frame( obs = blockmax(df$obs, r = 30, "disjoint"), Year = 1:5), leave_out = c(3,5), blcksz = 30)
data.frame( obs = blockmax(df$obs, r = 30, "disjoint"), Year = 1:5)
fit_cv_iter(df, data.frame( obs = blockmax(df$obs, r = 30, "disjoint"), Year = 1:5), leave_out = c(3,5), blcksz = 30)
fit_cv_iter <- function(data, djbm, leave_out, blcksz){
data.train <- data %>% dplyr::filter(! (Year %in% leave_out))
# data.test <-  data %>% filter( Year %in% leave_out)
bm.dj.train <- (djbm %>% dplyr::filter(!(Year %in% leave_out)))$obs
bm.dj.test <- (djbm %>% dplyr::filter(Year %in% leave_out))$obs
bm.sl.train <- blockmax(data.train$obs, r = blcksz, "sliding")
fit.dj <- evd::fgev(bm.dj.train)
fit.sl <- evd::fgev(bm.sl.train)
est.par <- data.frame(t(fit.dj$estimate)) %>%
dplyr::bind_rows(data.frame(t(fit.sl$estimate)) )%>%
dplyr::bind_cols(estimator = c("disjoint", "sliding"))
est.par <- est.par %>% tidyr::expand_grid(ps = 1-1/c(2,5,10, 20, 50, 100, 200 ))
est.par <- est.par %>%
dplyr::mutate( est.quants = purrr::pmap_dbl( list(loc, scale, shape, ps) ,
.f = function( .loc, .scale, .shape, .ps){
evd::qgev(.ps, loc = .loc, scale = .scale, shape = .shape)
}
))
zns  <- bm.dj.test
est.par$djdat <- rep(list(zns), nrow(est.par))
table_quants <- est.par %>%
dplyr::mutate( quant_score = purrr::pmap_dbl( .l = list( .ps = ps , .q = est.quants),
.f = function(.ps, .q){
compute_qs(obs = zns, quant.est = .q,
p = .ps)
})) %>%
dplyr::arrange(ps)
table_quants
}
fit_cv_iter(df, data.frame( obs = blockmax(df$obs, r = 30, "disjoint"), Year = 1:5), leave_out = c(3,5), blcksz = 30)
df <- data.frame(Year = rep(1:50, each = 30), obs = rgpd(30*50))
df <- data.frame(Year = rep(1:50, each = 30), obs = evd::rgpd(30*50))
fit_cv_iter(df, data.frame( obs = blockmax(df$obs, r = 30, "disjoint"), Year = 1:50), leave_out = c(3,5), blcksz = 30)
cv_fit_eff <- function(djbm, slbm, conc_bm, leave_out , quants = 1-1/c(2,5,10, 20, 50, 100, 200 ),
fixpar = NULL ){
bm_test <- djbm %>% filter(Year %in% leave_out)
dj_train <- djbm  %>% filter(!(Year %in% leave_out))
minmaxn <- do.call( function(.x){data.frame(Min = min(.x), Max = max(.x),
Nobs = length(.x))} , list(djbm$Year))
sl_lo <- data.frame(year1 = leave_out, year2 = leave_out -1)
sl_lo <- sl_lo %>% mutate(year2 = ifelse(year2 >= minmaxn$Min, year2, year2 + minmaxn$Nobs))
sl_train1 <- slbm  %>%  filter(!(Year %in% unlist(sl_lo)))
conc_bm <- conc_bm %>% filter(sty %in% sl_lo$year2)  ## filter for possible new starting years
# neither the new starting year nor the following year can be in the new sliding block
conc_bm <- conc_bm %>%
filter(!(sty %in% leave_out) ) %>%
filter(!(year_f %in% leave_out))
conc_bm <- conc_bm %>% mutate(Diff = year_f - sty) %>%
mutate(Diff = ifelse(Diff >= 0, Diff, Diff + minmaxn$Nobs)) %>%
group_by(sty) %>% filter(Diff == min(Diff)) %>% ungroup() %>% select(-Diff)
conc_bm <- conc_bm %>% unnest(cols = newslbm) %>%
select(-c( year_f))   %>% ungroup()
conc_bm <- rename(conc_bm, "Year" = sty, "sldata" = newslbm)
newsamp_sl <- bind_rows(conc_bm, sl_train1)
fit.dj <- evd::fgev(dj_train$obs)
fit.sl <- evd::fgev(newsamp_sl$sldata)
est.par <- data.frame(t(fit.dj$estimate)) %>% bind_rows(data.frame(t(fit.sl$estimate)) )%>%
bind_cols(estimator = c("disjoint", "sliding"))
if(!is.null(fixpar)){
djparam <- fit.dj$estimate
if( identical(fixpar , "loc")){
fit.sl.fixloc <- evd::fgev(newsamp_sl$sldata, loc = djparam[1])
fit.sl.fixloc <- data.frame( loc = djparam[1], t(fit.sl.fixloc$estimate))
fix.par <- data.frame(fit.sl.fixloc) %>%
bind_cols(estimator =  "sl.locfix")
}
if( identical(fixpar, "scale")){
fit.sl.fixscale<- evd::fgev(newsamp_sl$sldata, scale = djparam[2])
fit.sl.fixscale <- data.frame( scale = djparam[2], t(fit.sl.fixscale$estimate))
fix.par <- data.frame(fit.sl.fixscale) %>%
bind_cols(estimator = "sl.scalefix")
}
if( identical(fixpar, c("loc", "scale") )){
fit.sl.fixscale <- evd::fgev(newsamp_sl$sldata, scale = djparam[2])
fit.sl.fixloc <- evd::fgev(newsamp_sl$sldata, loc = djparam[1])
fit.sl.fixloc <- data.frame( loc = djparam[1], t(fit.sl.fixloc$estimate))
fit.sl.fixscale <- data.frame( scale = djparam[2], t(fit.sl.fixscale$estimate))
fix.par <- data.frame(fit.sl.fixscale) %>%
bind_rows(data.frame(fit.sl.fixloc) )%>%
bind_cols(estimator = c("sl.scalefix", "sl.locfix"))
}
est.par <- est.par %>% bind_rows(fix.par)
}
est.par <- est.par %>% tidyr::expand_grid(ps = 1-1/c(2,5,10, 20, 50, 100, 200 ))
est.par <- est.par %>%
dplyr::mutate( est.quants = purrr::pmap_dbl( list(loc, scale, shape, ps) ,
.f = function( .loc, .scale, .shape, .ps){
evd::qgev(.ps, loc = .loc, scale = .scale, shape = .shape)
}
))
zns  <- bm_test
est.par$djdat <- rep(list(zns), nrow(est.par))
table_quants <- est.par %>%
dplyr::mutate( quant_score = purrr::pmap_dbl( .l = list( .ps = ps , .q = est.quants),
.f = function(.ps, .q){
compute_qs(obs = zns, quant.est = .q,
p = .ps)
})) %>%
dplyr::arrange(ps)
table_quants
}
fit_cv_iter(df, data.frame( obs = blockmax(df$obs, r = 30, "disjoint"), Year = 1:50),
leave_out = 3, blcksz = 30)
fit_cv_iter(df, data.frame( obs = blockmax(df$obs, r = 30, "disjoint"), Year = 1:50),
leave_out = c(4, 35, 42),  blcksz = 30)
cv_fit_eff(data.frame( obs = blockmax(df$obs, r = 30, "disjoint"),  Year = 1:50),
data.frame( obs = blockmax(df$obs, r = 30, "sliding"), Year = 1:50),
conc_bm = compute_conc_bm(df, nlo = 3, blcksz = 30), leave_out = c(4, 35, 42)
)
cv_fit_eff <- function(djbm, slbm, conc_bm, leave_out ,
quants = 1-1/c(2,5,10, 20, 50, 100, 200 ),
fixpar = NULL ){
bm_test <- djbm %>% dplyr::filter(Year %in% leave_out)
dj_train <- djbm  %>% dplyr::filter(!(Year %in% leave_out))
minmaxn <- do.call( function(.x){data.frame(Min = min(.x), Max = max(.x),
Nobs = length(.x))} , list(djbm$Year))
sl_lo <- data.frame(year1 = leave_out, year2 = leave_out -1)
sl_lo <- sl_lo %>% dplyr::mutate(year2 = ifelse(year2 >= minmaxn$Min, year2, year2 + minmaxn$Nobs))
sl_train1 <- slbm  %>%  dplyr::filter(!(Year %in% unlist(sl_lo)))
conc_bm <- conc_bm %>% dplyr::filter(sty %in% sl_lo$year2)  ## filter for possible new starting years
# neither the new starting year nor the following year can be in the new sliding block
conc_bm <- conc_bm %>%
dplyr::filter(!(sty %in% leave_out) ) %>%
dplyr::filter(!(year_f %in% leave_out))
conc_bm <- conc_bm %>% dplyr::mutate(Diff = year_f - sty) %>%
dplyr::mutate(Diff = ifelse(Diff >= 0, Diff, Diff + minmaxn$Nobs)) %>%
dplyr::group_by(sty) %>%
dplyr::filter(Diff == min(Diff)) %>%
dplyr::ungroup() %>%
dplyr::select(-Diff)
conc_bm <- conc_bm %>% tidyr::unnest(cols = newslbm) %>%
dplyr::select(-c( year_f))   %>% dplyr::ungroup()
conc_bm <- dplyr::rename(conc_bm, "Year" = sty, "sldata" = newslbm)
newsamp_sl <- dplyr::bind_rows(conc_bm, sl_train1)
fit.dj <- evd::fgev(dj_train$obs)
fit.sl <- evd::fgev(newsamp_sl$sldata)
est.par <- data.frame(t(fit.dj$estimate)) %>%
dplyr::bind_rows(data.frame(t(fit.sl$estimate)) )%>%
dplyr::bind_cols(estimator = c("disjoint", "sliding"))
if(!is.null(fixpar)){
djparam <- fit.dj$estimate
if( identical(fixpar , "loc")){
fit.sl.fixloc <- evd::fgev(newsamp_sl$sldata, loc = djparam[1])
fit.sl.fixloc <- data.frame( loc = djparam[1], t(fit.sl.fixloc$estimate))
fix.par <- data.frame(fit.sl.fixloc) %>%
dplyr::bind_cols(estimator =  "sl.locfix")
}
if( identical(fixpar, "scale")){
fit.sl.fixscale<- evd::fgev(newsamp_sl$sldata, scale = djparam[2])
fit.sl.fixscale <- data.frame( scale = djparam[2], t(fit.sl.fixscale$estimate))
fix.par <- data.frame(fit.sl.fixscale) %>%
dplyr::bind_cols(estimator = "sl.scalefix")
}
if( identical(fixpar, c("loc", "scale") )){
fit.sl.fixscale <- evd::fgev(newsamp_sl$sldata, scale = djparam[2])
fit.sl.fixloc <- evd::fgev(newsamp_sl$sldata, loc = djparam[1])
fit.sl.fixloc <- data.frame( loc = djparam[1], t(fit.sl.fixloc$estimate))
fit.sl.fixscale <- data.frame( scale = djparam[2], t(fit.sl.fixscale$estimate))
fix.par <- data.frame(fit.sl.fixscale) %>%
dplyr::bind_rows(data.frame(fit.sl.fixloc) )%>%
dplyr::bind_cols(estimator = c("sl.scalefix", "sl.locfix"))
}
est.par <- est.par %>% dplyr::bind_rows(fix.par)
}
est.par <- est.par %>% tidyr::expand_grid(ps = 1-1/c(2,5,10, 20, 50, 100, 200 ))
est.par <- est.par %>%
dplyr::mutate( est.quants = purrr::pmap_dbl( list(loc, scale, shape, ps) ,
.f = function( .loc, .scale, .shape, .ps){
evd::qgev(.ps, loc = .loc, scale = .scale, shape = .shape)
}
))
zns  <- bm_test
est.par$djdat <- rep(list(zns), nrow(est.par))
table_quants <- est.par %>%
dplyr::mutate( quant_score = purrr::pmap_dbl( .l = list( .ps = ps , .q = est.quants),
.f = function(.ps, .q){
compute_qs(obs = zns, quant.est = .q,
p = .ps)
})) %>%
dplyr::arrange(ps)
table_quants
}
cv_fit_eff(data.frame( obs = blockmax(df$obs, r = 30, "disjoint"),  Year = 1:50),
data.frame( obs = blockmax(df$obs, r = 30, "sliding"), Year = 1:50),
conc_bm = compute_conc_bm(df, nlo = 3, blcksz = 30), leave_out = c(4, 35, 42)
)
cv_fit_eff(data.frame( obs = blockmax(df$obs, r = 30, "disjoint"),  Year = 1:50),
data.frame( obs = blockmax(df$obs, r = 30, "sliding"), Year = rep(1:50, each = 30)[1: ( 1500-30+1)],
conc_bm = compute_conc_bm(df, nlo = 3, blcksz = 30), leave_out = c(4, 35, 42)
)
)
cv_fit_eff(data.frame( obs = blockmax(df$obs, r = 30, "disjoint"),  Year = 1:50),
data.frame( obs = blockmax(df$obs, r = 30, "sliding"), Year = rep(1:50, each = 30)[1: ( 1500-30+1)]),
conc_bm = compute_conc_bm(df, nlo = 3, blcksz = 30), leave_out = c(4, 35, 42)
)
blockmax(df$obs, r = 30, "disjoint")
cv_fit_eff(data.frame( obs = blockmax(df$obs, r = 30, "disjoint"),  Year = 1:50),
data.frame( obs = blockmax(df$obs, r = 30, "sliding"), Year = rep(1:50, each = 30)[1: ( 1500-30+1)],
conc_bm = compute_conc_bm(df, nlo = 3, blcksz = 30), leave_out = c(4, 35, 42)
)
cv_fit_eff(data.frame( obs = blockmax(df$obs, r = 30, "disjoint"),  Year = 1:50),
data.frame( obs = blockmax(df$obs, r = 30, "sliding"), Year = rep(1:50, each = 30)[1: ( 1500-30+1)],
conc_bm = compute_conc_bm(df, nlo = 3, blcksz = 30), leave_out = c(4, 35, 42)
)
cv_fit_eff(data.frame( obs = blockmax(df$obs, r = 30, "disjoint"),  Year = 1:50),
data.frame( obs = blockmax(df$obs, r = 30, "sliding"), Year = rep(1:50, each = 30)[1: ( 1500-30+1)]),
conc_bm = compute_conc_bm(df, nlo = 3, blcksz = 30), leave_out = c(4, 35, 42)
)
dfdj <- data.frame( obs = blockmax(df$obs, r = 30, "disjoint"),  Year = 1:50)
dfsl <-  data.frame( obs = blockmax(df$obs, r = 30, "sliding"), Year = rep(1:50, each = 30)[1: ( 1500-30+1)])
dfsl
dfsl %>% tail()
concbm <- compute_conc_bm(df, nlo = 3, blcksz = 30)
concbm
leave_out <- c(4, 35, 42)
djbm <- dfdj
bm_test <- djbm %>% dplyr::filter(Year %in% leave_out)
dj_train <- djbm  %>% dplyr::filter(!(Year %in% leave_out))
minmaxn <- do.call( function(.x){data.frame(Min = min(.x), Max = max(.x),
Nobs = length(.x))} , list(djbm$Year))
sl_lo <- data.frame(year1 = leave_out, year2 = leave_out -1)
sl_lo <- sl_lo %>% dplyr::mutate(year2 = ifelse(year2 >= minmaxn$Min, year2, year2 + minmaxn$Nobs))
sl_train1 <- slbm  %>%  dplyr::filter(!(Year %in% unlist(sl_lo)))
slbm <- dfsl
sl_train1 <- slbm  %>%  dplyr::filter(!(Year %in% unlist(sl_lo)))
conc_bm <- conc_bm %>% dplyr::filter(sty %in% sl_lo$year2)  ## filter for possible new starting years
conc_bm <- concbm
conc_bm <- conc_bm %>% dplyr::filter(sty %in% sl_lo$year2)  ## filter for possible new starting years
# neither the new starting year nor the following year can be in the new sliding block
conc_bm <- conc_bm %>%
dplyr::filter(!(sty %in% leave_out) ) %>%
dplyr::filter(!(year_f %in% leave_out))
conc_bm <- conc_bm %>% dplyr::mutate(Diff = year_f - sty) %>%
dplyr::mutate(Diff = ifelse(Diff >= 0, Diff, Diff + minmaxn$Nobs)) %>%
dplyr::group_by(sty) %>%
dplyr::filter(Diff == min(Diff)) %>%
dplyr::ungroup() %>%
dplyr::select(-Diff)
conc_bm <- conc_bm %>% tidyr::unnest(cols = newslbm) %>%
dplyr::select(-c( year_f))   %>% dplyr::ungroup()
conc_bm <- dplyr::rename(conc_bm, "Year" = sty, "sldata" = newslbm)
newsamp_sl <- dplyr::bind_rows(conc_bm, sl_train1)
fit.dj <- evd::fgev(dj_train$obs)
fit.sl <- evd::fgev(newsamp_sl$sldata)
evd::fgev(dj_train$obs)
newsamp_sl$sldata
newsamp_sl
sl_train1
conc_bm
tail(conc_bm)
newsamp_sl
tail(sld)
tail(newsamp_sl)
tail(sl_train1)
conc_bm
cv_fit_eff(data.frame( obs = blockmax(df$obs, r = 30, "disjoint"),  Year = 1:50),
data.frame( sldata = blockmax(df$obs, r = 30, "sliding"), Year = rep(1:50, each = 30)[1: ( 1500-30+1)],
conc_bm = compute_conc_bm(df, nlo = 3, blcksz = 30), leave_out = c(4, 35, 42)
)
cv_fit_eff(data.frame( obs = blockmax(df$obs, r = 30, "disjoint"),  Year = 1:50),
data.frame( sldata = blockmax(df$obs, r = 30, "sliding"), Year = rep(1:50, each = 30)[1: ( 1500-30+1)]),
conc_bm = compute_conc_bm(df, nlo = 3, blcksz = 30), leave_out = c(4, 35, 42)
)
cv_fit_eff(data.frame( obs = blockmax(df$obs, r = 30, "disjoint"),  Year = 1:50),
data.frame( sldata = blockmax(df$obs, r = 30, "sliding"), Year = rep(1:50, each = 30)[1: ( 1500-30+1)]),
conc_bm = compute_conc_bm(df, nlo = 3, blcksz = 30), leave_out = c(4, 35, 42)
)
fit_cv_iter(df, data.frame( obs = blockmax(df$obs, r = 30, "disjoint"), Year = 1:50),
leave_out = c(4, 35, 42),  blcksz = 30)
eff<- cv_fit_eff(data.frame( obs = blockmax(df$obs, r = 30, "disjoint"),  Year = 1:50),
data.frame( sldata = blockmax(df$obs, r = 30, "sliding"), Year = rep(1:50, each = 30)[1: ( 1500-30+1)]),
conc_bm = compute_conc_bm(df, nlo = 3, blcksz = 30), leave_out = c(4, 35, 42)
)
neff <- fit_cv_iter(df, data.frame( obs = blockmax(df$obs, r = 30, "disjoint"), Year = 1:50),
leave_out = c(4, 35, 42),  blcksz = 30)
eff
eff[1, ]
eff[1, ]$djdat
neff[1, ]
neff[1, ]$djdat
compute_qs(neff[1, ]$djdat[[1]], neff[1, ]$quant_score, p = 0.5)
eff[1, ]
compute_qs(neff[1, ]$djdat[[1]], neff[1, ]$est.quants, p = 0.5)
cv_fit_eff <- function(djbm, slbm, conc_bm, leave_out ,
quants = 1-1/c(2,5,10, 20, 50, 100, 200 ),
fixpar = NULL ){
bm_test <- djbm %>% dplyr::filter(Year %in% leave_out)
dj_train <- djbm  %>% dplyr::filter(!(Year %in% leave_out))
minmaxn <- do.call( function(.x){data.frame(Min = min(.x), Max = max(.x),
Nobs = length(.x))} , list(djbm$Year))
sl_lo <- data.frame(year1 = leave_out, year2 = leave_out -1)
sl_lo <- sl_lo %>% dplyr::mutate(year2 = ifelse(year2 >= minmaxn$Min, year2, year2 + minmaxn$Nobs))
sl_train1 <- slbm  %>%  dplyr::filter(!(Year %in% unlist(sl_lo)))
conc_bm <- conc_bm %>% dplyr::filter(sty %in% sl_lo$year2)  ## filter for possible new starting years
# neither the new starting year nor the following year can be in the new sliding block
conc_bm <- conc_bm %>%
dplyr::filter(!(sty %in% leave_out) ) %>%
dplyr::filter(!(year_f %in% leave_out))
conc_bm <- conc_bm %>% dplyr::mutate(Diff = year_f - sty) %>%
dplyr::mutate(Diff = ifelse(Diff >= 0, Diff, Diff + minmaxn$Nobs)) %>%
dplyr::group_by(sty) %>%
dplyr::filter(Diff == min(Diff)) %>%
dplyr::ungroup() %>%
dplyr::select(-Diff)
conc_bm <- conc_bm %>% tidyr::unnest(cols = newslbm) %>%
dplyr::select(-c( year_f))   %>% dplyr::ungroup()
conc_bm <- dplyr::rename(conc_bm, "Year" = sty, "sldata" = newslbm)
newsamp_sl <- dplyr::bind_rows(conc_bm, sl_train1)
fit.dj <- evd::fgev(dj_train$obs)
fit.sl <- evd::fgev(newsamp_sl$sldata)
est.par <- data.frame(t(fit.dj$estimate)) %>%
dplyr::bind_rows(data.frame(t(fit.sl$estimate)) )%>%
dplyr::bind_cols(estimator = c("disjoint", "sliding"))
if(!is.null(fixpar)){
djparam <- fit.dj$estimate
if( identical(fixpar , "loc")){
fit.sl.fixloc <- evd::fgev(newsamp_sl$sldata, loc = djparam[1])
fit.sl.fixloc <- data.frame( loc = djparam[1], t(fit.sl.fixloc$estimate))
fix.par <- data.frame(fit.sl.fixloc) %>%
dplyr::bind_cols(estimator =  "sl.locfix")
}
if( identical(fixpar, "scale")){
fit.sl.fixscale<- evd::fgev(newsamp_sl$sldata, scale = djparam[2])
fit.sl.fixscale <- data.frame( scale = djparam[2], t(fit.sl.fixscale$estimate))
fix.par <- data.frame(fit.sl.fixscale) %>%
dplyr::bind_cols(estimator = "sl.scalefix")
}
if( identical(fixpar, c("loc", "scale") )){
fit.sl.fixscale <- evd::fgev(newsamp_sl$sldata, scale = djparam[2])
fit.sl.fixloc <- evd::fgev(newsamp_sl$sldata, loc = djparam[1])
fit.sl.fixloc <- data.frame( loc = djparam[1], t(fit.sl.fixloc$estimate))
fit.sl.fixscale <- data.frame( scale = djparam[2], t(fit.sl.fixscale$estimate))
fix.par <- data.frame(fit.sl.fixscale) %>%
dplyr::bind_rows(data.frame(fit.sl.fixloc) )%>%
dplyr::bind_cols(estimator = c("sl.scalefix", "sl.locfix"))
}
est.par <- est.par %>% dplyr::bind_rows(fix.par)
}
est.par <- est.par %>% tidyr::expand_grid(ps = 1-1/c(2,5,10, 20, 50, 100, 200 ))
est.par <- est.par %>%
dplyr::mutate( est.quants = purrr::pmap_dbl( list(loc, scale, shape, ps) ,
.f = function( .loc, .scale, .shape, .ps){
evd::qgev(.ps, loc = .loc, scale = .scale, shape = .shape)
}
))
zns  <- bm_test
est.par$djdat <- rep(list(zns), nrow(est.par))
table_quants <- est.par %>%
dplyr::mutate( quant_score = purrr::pmap_dbl( .l = list( .ps = ps , .q = est.quants),
.f = function(.ps, .q){
compute_qs(obs = zns$obs, quant.est = .q,
p = .ps)
})) %>%
dplyr::arrange(ps)
table_quants
}
eff<- cv_fit_eff(data.frame( obs = blockmax(df$obs, r = 30, "disjoint"),  Year = 1:50),
data.frame( sldata = blockmax(df$obs, r = 30, "sliding"), Year = rep(1:50, each = 30)[1: ( 1500-30+1)]),
conc_bm = compute_conc_bm(df, nlo = 3, blcksz = 30), leave_out = c(4, 35, 42)
)
eff
neff <- fit_cv_iter(df, data.frame( obs = blockmax(df$obs, r = 30, "disjoint"), Year = 1:50),
leave_out = c(4, 35, 42),  blcksz = 30)
neff
