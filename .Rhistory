maxit  = 2000)
load_all()
estim1 <- fit_spgev_sl(data = bms, loc.sp.form = ~ lon  + ele ,  scale.sp.form = ~ 1,
loc.temp.form = ~ GMST, scale.temp.form = NULL,
spat.cov = spatial_cvrt, use_gr = FALSE,
method = "Nelder-Mead", st_val_meth = "LeastSq", print_start_vals = TRUE,
maxit  = 2000)
data
(data %>% tidyr::unnest(cols = uniq_data))
(data %>% tidyr::unnest(cols = uniq_data)) %>%
dplyr::select(Station, slbm) %>%
tidyr::pivot_longer(names_to = "Station", values_to = "slbm")
(data %>% tidyr::unnest(cols = uniq_data)) %>%
dplyr::select(Station, slbm) %>%
tidyr::pivot_longer(cols = 1:2, names_to = "Station", values_to = "slbm")
(data %>% tidyr::unnest(cols = uniq_data)) %>%
dplyr::select(Station, sldata %>% tidyr::unnest(cols = uniq_data)) %>%
dplyr::select(Station, slbm) %>%
tidyr::pivot_wider(names_from = "Station", values_from = "slbm")bm) %>%
tidyr::pivot_wider(cols = 1:2, names_to = "Station", values_to = "slbm")
data %>% tidyr::unnest(cols = uniq_data) %>%
dplyr::select(Station, slbm) %>%
tidyr::pivot_wider(names_from = "Station", values_from = "slbm")bm) %>%
tidyr::pivot_wider(cols = 1:2, names_to = "Station", values_to = "slbm")
data %>% tidyr::unnest(cols = uniq_data) %>%
dplyr::select(Station, slbm) %>%
tidyr::pivot_wider(names_from = "Station", values_from = "slbm")
data %>% tidyr::unnest(cols = uniq_data) %>%
dplyr::select(Station, slbm)
dataunnest <- (data %>% tidyr::unnest(cols = uniq_data))
datastart <- dataunnest %>%
dplyr::select(Station, slbm) %>%
tidyr::pivot_wider(names_from = Station, values_from = slbm)
dplyr::select(Station, slbm)dataunnest %>%
dplyr::select(Station, slbm)
dataunnest %>%
dplyr::select(Station, slbm)
datastart <- dataunnest %>%
dplyr::select(Station, slbm) %>% unique() %>%
tidyr::pivot_wider(names_from = Station, values_from = slbm)
dataunnest
dataunnest %>%
dplyr::select(Station, slbm, temp_cvrt) %>% unique() %>%
tidyr::pivot_wider(names_from = Station, values_from = slbm)
dataunnest %>%
dplyr::select(Station, slbm, temp_cvrt) %>% unique() %>%
tidyr::pivot_wider(names_from = Station, values_from = slbm)
dataunnest %>%
dplyr::select(Station, slbm)
dataunnest %>%
dplyr::select(Station, slbm) %>% unique()
dataunnest %>%
dplyr::select(Station, slbm) %>% unique() %>% tidyr::pivot_wider(names_from = Station, values_from = slbm)
dataunnest %>%
dplyr::select(Station, slbm) %>% unique()
dataunnest %>%
dplyr::select(Station, slbm) %>% unique() %>% tibble::rowid_to_column()
dataunnest %>%
dplyr::select(Station, slbm) %>% unique() %>% tibble::rowid_to_column %>%
tidyr::pivot_wider(names_from = Station, values_from = slbm)
dataunnest %>%
dplyr::select(Station, slbm) %>% unique() %>% tibble::rowid_to_column() %>%
tidyr::pivot_wider(names_from = Station, values_from = slbm)
data
load_all()
estim1 <- fit_spgev_sl(data = bms, loc.sp.form = ~ lon  + ele ,  scale.sp.form = ~ 1,
loc.temp.form = ~ GMST, scale.temp.form = NULL,
spat.cov = spatial_cvrt, use_gr = FALSE,
method = "Nelder-Mead", st_val_meth = "LeastSq",
datastart = apply(xx, 2, blockmax, r = blcksz, "disjoint"),
print_start_vals = TRUE,
maxit  = 2000)
estim1
load_all()
estim1 <- fit_spgev_sl(data = bms, loc.sp.form = ~ lon  + ele ,  scale.sp.form = ~ 1,
loc.temp.form = ~ GMST, scale.temp.form = NULL,
spat.cov = spatial_cvrt, use_gr = FALSE,
method = "Nelder-Mead", st_val_meth = "LeastSq", print_start_vals = TRUE,
maxit  = 2000)
estim1 <- fit_spgev_sl(data = bms, loc.sp.form = ~ lon  + ele ,  scale.sp.form = ~ 1,
loc.temp.form = ~ GMST, scale.temp.form = NULL,
spat.cov = spatial_cvrt, use_gr = FALSE,
method = "Nelder-Mead", st_val_meth = "LeastSq",
datastart = apply(xx, 2, blockmax, r = blcksz, "disjoint"),
print_start_vals = TRUE,
maxit  = 2000)
load_all()
estim1 <- fit_spgev_sl(data = bms, loc.sp.form = ~ lon  + ele ,  scale.sp.form = ~ 1,
loc.temp.form = ~ GMST, scale.temp.form = NULL,
spat.cov = spatial_cvrt, use_gr = FALSE,
method = "Nelder-Mead", st_val_meth = "LeastSq",
datastart = apply(xx, 2, blockmax, r = blcksz, "disjoint"),
print_start_vals = TRUE,
maxit  = 2000)
load_all()
estim1 <- fit_spgev_sl(data = bms, loc.sp.form = ~ lon  + ele ,  scale.sp.form = ~ 1,
loc.temp.form = ~ GMST, scale.temp.form = NULL,
spat.cov = spatial_cvrt, use_gr = FALSE,
method = "Nelder-Mead", st_val_meth = "LeastSq",
datastart = apply(xx, 2, blockmax, r = blcksz, "disjoint"),
print_start_vals = TRUE,
maxit  = 2000)
load_all()
estim1 <- fit_spgev_sl(data = bms, loc.sp.form = ~ lon  + ele ,  scale.sp.form = ~ 1,
loc.temp.form = ~ GMST, scale.temp.form = NULL,
spat.cov = spatial_cvrt, use_gr = FALSE,
method = "Nelder-Mead", st_val_meth = "LeastSq",
datastart = apply(xx, 2, blockmax, r = blcksz, "disjoint"),
print_start_vals = TRUE,
maxit  = 2000)
estim1
estim1 <- fit_spgev_sl(data = bms, loc.sp.form = ~ lon  + ele ,  scale.sp.form = ~ 1,
loc.temp.form = ~ GMST, scale.temp.form = NULL,
spat.cov = spatial_cvrt, use_gr = FALSE,
method = "Nelder-Mead", st_val_meth = "spatialGev",
datastart = apply(xx, 2, blockmax, r = blcksz, "disjoint"),
print_start_vals = TRUE,
maxit  = 2000)
estim1
estim1 <- fit_spgev_sl(data = bms, loc.sp.form = ~ lon  + ele ,  scale.sp.form = ~ 1,
loc.temp.form = ~ GMST, scale.temp.form = NULL,
spat.cov = spatial_cvrt, use_gr = FALSE,
method = "Nelder-Mead", st_val_meth = "fgevMean",
datastart = apply(xx, 2, blockmax, r = blcksz, "disjoint"),
print_start_vals = TRUE,
maxit  = 2000)
estim1 <- fit_spgev_sl(data = bms, loc.sp.form = ~ lon  + ele ,  scale.sp.form = ~ 1,
loc.temp.form = ~ GMST, scale.temp.form = NULL,
spat.cov = spatial_cvrt, use_gr = FALSE,
method = "Nelder-Mead", st_val_meth = "spatialGev",
datastart = apply(xx, 2, blockmax, r = blcksz, "disjoint"),
temp.cov  = tempmat,
print_start_vals = TRUE,
maxit  = 2000)
a
a <- list(a, b = 1:2)
a
a[[ - "b"]]
a[["b"]]
a[[- 2]]
load_all()
estim1 <- fit_spgev_sl(data = bms, loc.sp.form = ~ lon  + ele ,  scale.sp.form = ~ 1,
loc.temp.form = ~ GMST, scale.temp.form = NULL,
spat.cov = spatial_cvrt, use_gr = FALSE,
method = "Nelder-Mead", st_val_meth = "spatialGev",
datastart = apply(xx, 2, blockmax, r = blcksz, "disjoint"),
temp.cov  = tempmat,
print_start_vals = TRUE,
maxit  = 2000)
load_all()
estim1 <- fit_spgev_sl(data = bms, loc.sp.form = ~ lon  + ele ,  scale.sp.form = ~ 1,
loc.temp.form = ~ GMST, scale.temp.form = NULL,
spat.cov = spatial_cvrt, use_gr = FALSE,
method = "Nelder-Mead", st_val_meth = "spatialGev",
datastart = apply(xx, 2, blockmax, r = blcksz, "disjoint"),
temp.cov  = tempmat,
print_start_vals = TRUE,
maxit  = 2000)
estim1
set.seed(3)
ny <- 70
dstat <- 20
x <- y <- seq(0, dstat, length = dstat)
spatial_cvrt <- data.frame(lat  = x, lon = y, ele = runif(dstat))
### smoothed GMST anomaly covariate
temp_cvrt <- BMRLest::Covariate
temp_cvrt
coords <- cbind(spatial_cvrt$lat, spatial_cvrt$lon)
colnames(coords ) <- c("lat", "lon")
blcksz <- 90
pardat <- MDAdata(ny*blcksz, locations = coords, margins = list(distr = "Pareto", shape = 0.1),
ms = list(kovmod = "whitmat", nugget = 0, range = 3, smooth = 0.44))
xx <- gev_struc(pardat, n.years = ny, covariates = list(spatial = spatial_cvrt,
temporal = temp_cvrt),
spatial.pars = list(loc = list( lon = 0.4, lat = 0, alt = -0.05, lon2= 0, lat2 = 0, alt2= 0),
scale = list()),
temp.pars = list(loc = list( GMST  = 0.5, time = 0),
scale = list()),
determ.pars = list(loc = 25, scale = 1.5))
tcvrt <- temp_cvrt[ (115 - ny ):115 , ]$smoothed_GMST
cvrt_sl <- c(rep(tcvrt[1], blcksz/2), rep(tcvrt[2:(ny)], each = blcksz))
cvrt_sl <- c(cvrt_sl, rep(tcvrt[ny +1], ny*blcksz - length(cvrt_sl) ))
yy <- data.frame(xx) %>% pivot_longer( 1:all_of(dstat), names_to = "Station", values_to = "Obs")
yyuniq <- get_uniq_bm(yy, blcksz = blcksz)
bms <- get_uniq_bm(yy, blcksz, cvrt_sl[1: (nrow(xx) - blcksz +1) ])
tempmat <- matrix(tcvrt[1:ny])
colnames(tempmat) <- "GMST"
djest <- SpatialExtremes::fitspatgev(data = apply(xx, 2, blockmax, r = blcksz, "disjoint"),
covariables = as.matrix(spatial_cvrt),
loc.form = ~ lon + ele, scale.form = ~ 1, shape.form = ~ 1,
temp.cov = tempmat, temp.form.loc = ~ GMST
)
djest$fitted.values
system.time({
estim1 <- fit_spgev_sl(data = bms, loc.sp.form = ~ lon  + ele ,  scale.sp.form = ~ 1,
loc.temp.form = ~ GMST, scale.temp.form = NULL,
spat.cov = spatial_cvrt, use_gr = FALSE,
method = "Nelder-Mead", st_val_meth = "spatialGev",
datastart = apply(xx, 2, blockmax, r = blcksz, "disjoint"),
temp.cov  = tempmat,
print_start_vals = TRUE,
maxit  = 2000)
})
system.time({
estim2 <- fit_spgev_sl(data = bms, loc.sp.form = ~ lon  + ele ,  scale.sp.form = ~ 1,
loc.temp.form = ~ GMST, scale.temp.form = NULL,
spat.cov = spatial_cvrt, use_gr = FALSE,
method = "Nelder-Mead", st_val_meth = "LeastSq",
datastart = apply(xx, 2, blockmax, r = blcksz, "disjoint"),
temp.cov  = tempmat,
print_start_vals = TRUE,
maxit  = 2000)
})
estim1$mle
estim2$mle
djest$fitted.values
estim2 <- fit_spgev_sl(data = bms, loc.sp.form = ~ lon + lat + ele ,  scale.sp.form = ~ 1,
loc.temp.form = ~ GMST, scale.temp.form = NULL,
spat.cov = spatial_cvrt, use_gr = FALSE,
method = "Nelder-Mead", st_val_meth = "LeastSq",
datastart = apply(xx, 2, blockmax, r = blcksz, "disjoint"),
temp.cov  = tempmat,
print_start_vals = TRUE,
maxit  = 2000)
estim2 <- fit_spgev_sl(data = bms, loc.sp.form = ~ lon + lat + ele ,  scale.sp.form = ~ 1,
loc.temp.form = ~ GMST, scale.temp.form = NULL,
spat.cov = spatial_cvrt, use_gr = FALSE,
method = "Nelder-Mead", st_val_meth = "spatialGev",
datastart = apply(xx, 2, blockmax, r = blcksz, "disjoint"),
temp.cov  = tempmat,
print_start_vals = TRUE,
maxit  = 2000)
estim2$mle
estim2 <- fit_spgev_sl(data = bms, loc.sp.form = ~ lon + lat + ele ,  scale.sp.form = ~ lon,
loc.temp.form = ~ GMST, scale.temp.form = NULL,
spat.cov = spatial_cvrt, use_gr = FALSE,
method = "Nelder-Mead", st_val_meth = "spatialGev",
datastart = apply(xx, 2, blockmax, r = blcksz, "disjoint"),
temp.cov  = tempmat,
print_start_vals = TRUE,
maxit  = 2000)
estim2 <- fit_spgev_sl(data = bms, loc.sp.form = ~ lon + lat + ele ,  scale.sp.form = ~ lon,
loc.temp.form = ~ GMST, scale.temp.form = NULL,
spat.cov = spatial_cvrt, use_gr = FALSE,
method = "Nelder-Mead", st_val_meth = "LeastSq",
datastart = apply(xx, 2, blockmax, r = blcksz, "disjoint"),
temp.cov  = tempmat,
print_start_vals = TRUE,
maxit  = 2000)
get_start_vals(bmdj,  loc.sp.form = ~ lon + ele ,  scale.sp.form = ~ 1,
loc.temp.form = ~ GMST, scale.temp.form = NULL,
temp.cov = data.frame( GMST = tcvrt[1:ny]),
spat.cov = spatial_cvrt, type = "A", method = "fgev")
get_start_vals(bmdj,  loc.sp.form = ~ lon + ele ,  scale.sp.form = ~ 1,
loc.temp.form = ~ GMST, scale.temp.form = NULL,
temp.cov = data.frame( GMST = tcvrt[1:ny]),
spat.cov = spatial_cvrt, type = "A", method = "fgevMean")
get_start_vals(bmdj,  loc.sp.form = ~ lon + ele ,  scale.sp.form = ~ 1,
loc.temp.form = ~ GMST, scale.temp.form = NULL,
temp.cov = data.frame( GMST = tcvrt[1:ny]),
spat.cov = spatial_cvrt, type = "A", method = "spatialGev")
get_start_vals(bmdj,  loc.sp.form = ~ lon + ele ,  scale.sp.form = ~ 1,
loc.temp.form = ~ GMST, scale.temp.form = NULL,
temp.cov = data.frame( GMST = tcvrt[1:ny]), print_start_vals = FALSE;
spat.cov = spatial_cvrt, type = "A", method = "spatialGev")
get_start_vals(bmdj,  loc.sp.form = ~ lon + ele ,  scale.sp.form = ~ 1,
loc.temp.form = ~ GMST, scale.temp.form = NULL,
temp.cov = data.frame( GMST = tcvrt[1:ny]), print_start_vals = FALSE,
spat.cov = spatial_cvrt, type = "A", method = "spatialGev")
get_start_vals(bmdj,  loc.sp.form = ~ lon + ele ,  scale.sp.form = ~ lon,
loc.temp.form = ~ GMST, scale.temp.form = NULL,
temp.cov = data.frame( GMST = tcvrt[1:ny]), print_start_vals = FALSE,
spat.cov = spatial_cvrt, type = "A", method = "spatialGev")
get_start_vals(bmdj,  loc.sp.form = ~ lon + ele + lat ,  scale.sp.form = ~ lon,
loc.temp.form = ~ GMST, scale.temp.form = NULL,
temp.cov = data.frame( GMST = tcvrt[1:ny]), print_start_vals = FALSE,
spat.cov = spatial_cvrt, type = "A", method = "spatialGev")
get_start_vals(bmdj,  loc.sp.form = ~ lon + ele + lat ,  scale.sp.form = ~ lon,
loc.temp.form = ~ GMST, scale.temp.form = NULL,
temp.cov = data.frame( GMST = tcvrt[1:ny]), print_start_vals = FALSE,
spat.cov = spatial_cvrt, type = "A", method = "LeastSq")
get_start_vals(bmdj,  loc.sp.form = ~ lon + ele + lat ,  scale.sp.form = ~ lon,
loc.temp.form = ~ GMST, scale.temp.form = NULL,
temp.cov = data.frame( GMST = tcvrt[1:ny]), print_start_vals = FALSE,
spat.cov = spatial_cvrt,  method = "LeastSq")
spatial_cvrt
load_all()
get_start_vals(bmdj,  loc.sp.form = ~ lon + ele + lat ,  scale.sp.form = ~ lon,
loc.temp.form = ~ GMST, scale.temp.form = NULL,
temp.cov = data.frame( GMST = tcvrt[1:ny]), print_start_vals = FALSE,
spat.cov = spatial_cvrt,  method = "LeastSq")
YY <- apply(data, 2,  function(.x) evd::fgev(.x, std.err = F)$estimate)
.datfr <- data.frame(t(YY)) %>% dplyr::bind_cols(spat.cov)
.datfr
lm.mu <- reformulate(deparse(loc.sp.form[[2]]), "loc")
lm.sigma <- reformulate(deparse(scale.sp.form[[2]]), "log(scale)")
lm.mu
lm.sigma
st_mus <- lm(lm.mu, data = .datfr )$coefficients
names(st_mus) <- paste0("loc", 0:(length(st_mus)-1))
st_mus
lm.mu
.datfr
lm(lco)
lm(loc ~ lon + lat + ele, data = .datfr)
load_all()
load_all()
set.seed(3)
ny <- 70
dstat <- 20
x <- seq(0, dstat, length = dstat)
y <- runif(dstat)
spatial_cvrt <- data.frame(lat  = x, lon = y, ele = runif(dstat))
### smoothed GMST anomaly covariate
temp_cvrt <- BMRLest::Covariate
temp_cvrt
coords <- cbind(spatial_cvrt$lat, spatial_cvrt$lon)
colnames(coords ) <- c("lat", "lon")
blcksz <- 90
pardat <- MDAdata(ny*blcksz, locations = coords, margins = list(distr = "Pareto", shape = 0.1),
ms = list(kovmod = "whitmat", nugget = 0, range = 3, smooth = 0.44))
xx <- gev_struc(pardat, n.years = ny, covariates = list(spatial = spatial_cvrt,
temporal = temp_cvrt),
spatial.pars = list(loc = list( lon = 0.4, lat = 0, alt = -0.05, lon2= 0, lat2 = 0, alt2= 0),
scale = list()),
temp.pars = list(loc = list( GMST  = 0.5, time = 0),
scale = list()),
determ.pars = list(loc = 25, scale = 1.5))
tcvrt <- temp_cvrt[ (115 - ny ):115 , ]$smoothed_GMST
cvrt_sl <- c(rep(tcvrt[1], blcksz/2), rep(tcvrt[2:(ny)], each = blcksz))
cvrt_sl <- c(cvrt_sl, rep(tcvrt[ny +1], ny*blcksz - length(cvrt_sl) ))
yy <- data.frame(xx) %>% pivot_longer( 1:all_of(dstat), names_to = "Station", values_to = "Obs")
bms <- get_uniq_bm(yy, blcksz, cvrt_sl[1: (nrow(xx) - blcksz +1) ])
params <- c("loc0" = 27, "loc1"=  0.7, "loc2"=  -0.04, "tempLoc" = 0.5,
"scale0" = 0.4  , "shape"= 0.05 )
tempmat <- matrix(tcvrt[1:ny])
colnames(tempmat) <- "GMST"
startvals <- list(  locCoeff1  = 27, locCoeff2  =  0.7,   locCoeff3 = -0.04,
scaleCoeff1 = 1,   shapeCoeff1 = 0.05, tempCoeffLoc1 = 0.5)
djest <- SpatialExtremes::fitspatgev(data = apply(xx, 2, blockmax, r = blcksz, "disjoint"),
covariables = as.matrix(spatial_cvrt),
loc.form = ~ lon + ele, scale.form = ~ 1, shape.form = ~ 1,
temp.cov = tempmat, temp.form.loc = ~ GMST
)
djest$fitted.values
system.time({
estim1 <- fit_spgev_sl(data = bms, loc.sp.form = ~ lon  + ele ,  scale.sp.form = ~ 1,
loc.temp.form = ~ GMST, scale.temp.form = NULL,
spat.cov = spatial_cvrt, use_gr = FALSE,
method = "Nelder-Mead", st_val_meth = "spatialGev",
datastart = apply(xx, 2, blockmax, r = blcksz, "disjoint"),
temp.cov  = tempmat,
print_start_vals = TRUE,
maxit  = 2000)
})
system.time({
estim2 <- fit_spgev_sl(data = bms, loc.sp.form = ~ lon + lat + ele ,  scale.sp.form = ~ lon,
loc.temp.form = ~ GMST, scale.temp.form = NULL,
spat.cov = spatial_cvrt, use_gr = FALSE,
method = "Nelder-Mead", st_val_meth = "LeastSq",
datastart = apply(xx, 2, blockmax, r = blcksz, "disjoint"),
temp.cov  = tempmat,
print_start_vals = TRUE,
maxit  = 2000)
})
estim1$mle
estim2$mle
djest$fitted.values
tempmatsl <- matrix(tcvrt)
colnames(tempmatsl) <- "GMST"
system.time({
slest <- SpatialExtremes::fitspatgev(data = apply(xx, 2, blockmax, r = blcksz, "sliding"),
covariables = as.matrix(spatial_cvrt),
loc.form = ~ lon + ele, scale.form = ~ 1, shape.form = ~ 1,
temp.cov = tempmatsl, temp.form.loc = ~ GMST
)
})
apply(xx, 2, blockmax, r = blcksz, "sliding") %>% nrow()
nrow(tempmatsl)
tempmatsl <- matrix(cvrt_sl)
colnames(tempmatsl) <- "GMST"
nrow(tempmatsl)
tempmatsl <- matrix(cvrt_sl[1:6211])
colnames(tempmatsl) <- "GMST"
system.time({
slest <- SpatialExtremes::fitspatgev(data = apply(xx, 2, blockmax, r = blcksz, "sliding"),
covariables = as.matrix(spatial_cvrt),
loc.form = ~ lon + ele, scale.form = ~ 1, shape.form = ~ 1,
temp.cov = tempmatsl, temp.form.loc = ~ GMST
)
})
system.time({
estim2 <- fit_spgev( apply(xx, 2, blockmax, r = blcksz, "sliding"),
loc.sp.form = ~ lon + ele, scale.sp.form = ~ 1,
loc.temp.form = ~ GMST,
method = "Nelder-Mead",
spat.cov = spatial_cvrt, temp.cov = data.frame(GMST = cvrt_sl[1: (nrow(xx) - blcksz +1)]))
})
rm(list = ls())
set.seed(3)
ny <- 70
dstat <- 20
x <- seq(0, dstat, length = dstat)
y <- runif(dstat)
spatial_cvrt <- data.frame(lat  = x, lon = y, ele = runif(dstat))
### smoothed GMST anomaly covariate
temp_cvrt <- BMRLest::Covariate
temp_cvrt
coords <- cbind(spatial_cvrt$lat, spatial_cvrt$lon)
colnames(coords ) <- c("lat", "lon")
blcksz <- 90
pardat <- MDAdata(ny*blcksz, locations = coords, margins = list(distr = "Pareto", shape = 0.1),
ms = list(kovmod = "whitmat", nugget = 0, range = 3, smooth = 0.44))
xx <- gev_struc(pardat, n.years = ny, covariates = list(spatial = spatial_cvrt,
temporal = temp_cvrt),
spatial.pars = list(loc = list( lon = 0.4, lat = 0, alt = -0.05, lon2= 0, lat2 = 0, alt2= 0),
scale = list()),
temp.pars = list(loc = list( GMST  = 0.5, time = 0),
scale = list()),
determ.pars = list(loc = 25, scale = 1.5))
qpareto <- function(x, shape){
if( any(x < 0) | any(x >1)){stop("x must be between 0 and 1 ")}
return((1-x)^(-shape))
}
# MDAdata(10, locations = coords, margins = list(distr = "Pareto", shape = 0.1),
#         ms = list(kovmod = "whitmat", nugget = 0, range = 2, smooth = 0.5))
MDAdata <- function(n, locations, margins= list(distr = "Pareto", shape = 0.2),
ms = list(kovmod = "whitmat", nugget = 0, range = 3, smooth = 1)){
# generate max stable process with unit frechet margins
frechdata <- switch(ms$kovmod,
"whitmat" = rmaxstab(n = n, coord = locations, cov.mod = ms$kovmod,
range = ms$range, smooth = ms$smooth, nugget = ms$nugget),
"powexp" = rmaxstab(n = n, coord = locations, cov.mod = ms$kovmod, nugget = ms$nugget,
range = ms$range, smooth = ms$smooth),
"gauss" = rmaxstab(n = n, coord = locations, cov.mod = ms$kovmod, cov11 = ms$cov11,
cov12 = ms$cov12,cov22 = ms$cov22)
)
# select inverse distribution function to desired marginal distribution
qdistr_func <- switch(margins$distr, "Pareto" = qpareto,
"gpd" = qgpd,
"norm" = qnorm)
mdadata <- qdistr_func(exp(-1/frechdata), shape = margins$shape)
return(mdadata)
}
gev_struc <- function(mdadat, n.years,  covariates = list(spatial, temporal),
spatial.pars = list(loc = list( lon = 2, lat = 2, alt = 2, lon2= 0, lat2 = 0, alt2= 0),
scale = list(lon = 2, lat = 2, alt = 2)),
temp.pars = list(loc = list( GMST  = 0.01, time = 0),
scale = list(GMST = 0.01, time = 0)),
determ.pars = list(loc = 20, scale = 1)){
n.obs <- dim(mdadat)[1]
d.obs <- dim(mdadat)[2]
# define temporal covariate matrix
ntempcvrt <- dim(covariates$temporal)[1]
cvrt1 <- covariates$temporal[((ntempcvrt - n.years+1): ntempcvrt),  ]
cvrt_new <- data.frame(smoothed_GMST = rep(cvrt1$smoothed_GMST, each = ceiling(n.obs/n.years))[1:n.obs])
# only implemented for changing location parameter at the moment
loc.spat.pars <- spatial.pars$loc
loc.temp.pars <- temp.pars$loc
coords <- covariates$spatial
sp.loc <-  loc.spat.pars$lon * coords$lon + loc.spat.pars$lat* coords$lat +  loc.spat.pars$alt * coords$ele +
loc.spat.pars$lon2*coords$lon^2  + loc.spat.pars$lat2* coords$lat^2 +
loc.spat.pars$alt2 * coords$ele^2
print(sp.loc)
temp.loc <- loc.temp.pars$GMST * cvrt_new$smoothed_GMST + loc.temp.pars$time* (1:n.obs)/n.obs
# print(temp.loc)
# print(c(dim(mdadat), dim(matrix(rep(sp.loc, n.obs), nrow = n.obs ,
#                                 byrow = TRUE )), dim( matrix(rep(temp.loc, d.obs), nrow = n.obs, byrow = F)) ))
mdadat <- determ.pars$scale*mdadat + determ.pars$loc+ matrix(rep(sp.loc, n.obs), nrow = n.obs , byrow = TRUE ) +
matrix(rep(temp.loc, d.obs), nrow = n.obs, byrow = F)
return(mdadat)
#  }
}
xx
pardat <- MDAdata(ny*blcksz, locations = coords, margins = list(distr = "Pareto", shape = 0.1),
ms = list(kovmod = "whitmat", nugget = 0, range = 3, smooth = 0.44))
xx <- gev_struc(pardat, n.years = ny, covariates = list(spatial = spatial_cvrt,
temporal = temp_cvrt),
spatial.pars = list(loc = list( lon = 0.4, lat = 0, alt = -0.05, lon2= 0, lat2 = 0, alt2= 0),
scale = list()),
temp.pars = list(loc = list( GMST  = 0.5, time = 0),
scale = list()),
determ.pars = list(loc = 25, scale = 1.5))
xx
tcvrt <- temp_cvrt[ (115 - ny ):115 , ]$smoothed_GMST
cvrt_sl <- c(rep(tcvrt[1], blcksz/2), rep(tcvrt[2:(ny)], each = blcksz))
cvrt_sl <- c(cvrt_sl, rep(tcvrt[ny +1], ny*blcksz - length(cvrt_sl) ))
yy <- data.frame(xx) %>% pivot_longer( 1:all_of(dstat), names_to = "Station", values_to = "Obs")
yyuniq <- get_uniq_bm(yy, blcksz = blcksz)
yyuniq %>% unnest(cols = uniq_data)
bms <- get_uniq_bm(yy, blcksz, cvrt_sl[1: (nrow(xx) - blcksz +1) ])
tempmat <- matrix(tcvrt[1:ny])
colnames(tempmat) <- "GMST"
djest <- SpatialExtremes::fitspatgev(data = apply(xx, 2, blockmax, r = blcksz, "disjoint"),
covariables = as.matrix(spatial_cvrt),
loc.form = ~ lon + ele, scale.form = ~ 1, shape.form = ~ 1,
temp.cov = tempmat, temp.form.loc = ~ GMST
)
djest$fitted.values
system.time({
estim1 <- fit_spgev_sl(data = bms, loc.sp.form = ~ lon  + ele ,  scale.sp.form = ~ 1,
loc.temp.form = ~ GMST, scale.temp.form = NULL,
spat.cov = spatial_cvrt, use_gr = FALSE,
method = "Nelder-Mead", st_val_meth = "spatialGev",
datastart = apply(xx, 2, blockmax, r = blcksz, "disjoint"),
temp.cov  = tempmat,
print_start_vals = TRUE,
maxit  = 2000)
})
estim1
djest$ihessian
?SpatialExtremes::fitspatgev
