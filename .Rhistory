tstar_pars_V2 <- bootpars %>% dplyr::mutate( star =
purrr::pmap(list(mu, sigma, shape, alpha, CovestV),
function(mu, sigma, shape, alpha, CovestV) {
dplyr::tibble((mu - parsK["mu"])/sqrt(CovestV[1,1]),
(sigma - parsK["sigma"])/sqrt(CovestV[2,2]),
(shape - parsK["shape"])/sqrt(CovestV[3,3]),
(alpha - parsK["alpha"])/sqrt(CovestV[4,4]))
})
)
# compute quantiles of the bootstrapped studentized parameter estimates
tstar_pars_quants_V2 <- tstar_pars_V2 %>% dplyr::select(star) %>% tidyr::unnest(cols = star) %>%
dplyr::summarise_at(1:4,  ~ quantile(.x, p = c(0.975, 0.025), na.rm = TRUE)) %>%
dplyr::mutate(quant = c("q0975", "q0025"))
lower_bounds <- (parsK - sqrt(par_vars_V2) * tstar_pars_quants_V2[1 ,1:4]) %>%
tidyr::pivot_longer(cols = 1:4,
names_to = "parameter", values_to = "lower")
upper_bounds <- (parsK - sqrt(par_vars_V2) * tstar_pars_quants_V2[2 ,1:4]) %>%
tidyr::pivot_longer(cols = 1:4,
names_to = "parameter", values_to = "upper")
parsK <- tidyr::pivot_longer(parsK, cols = 1:4, names_to = "parameter", values_to = "par_est")
res_pars_V2 <- parsK %>% dplyr::left_join(lower_bounds, by = "parameter") %>%
dplyr::left_join(upper_bounds, by = "parameter")
par_vars_V <- diag(estvar_Kblock$V)
parsK <- estim_Kblock$mle
bootpars <-  bootres$resV %>%  dplyr::select(mu, sigma, shape, alpha, CovestV) %>% unique()
tstar_pars_V <- bootpars %>% dplyr::mutate( star =
purrr::pmap(list(mu, sigma, shape, alpha, CovestV),
function(mu, sigma, shape, alpha, CovestV) {
dplyr::tibble((mu - parsK["mu"])/sqrt(CovestV[1,1]),
(sigma - parsK["sigma"])/sqrt(CovestV[2,2]),
(shape - parsK["shape"])/sqrt(CovestV[3,3]),
(alpha - parsK["alpha"])/sqrt(CovestV[4,4]))
})
)
# compute quantiles of the bootstrapped studentized parameter estimates
tstar_pars_quants_V <- tstar_pars_V %>% dplyr::select(star) %>% tidyr::unnest(cols = star) %>%
dplyr::summarise_at(1:4,  ~ quantile(.x, p = c(0.975, 0.025), na.rm = TRUE)) %>%
dplyr::mutate(quant = c("q0975", "q0025"))
lower_bounds <- (parsK - sqrt(par_vars_V) * tstar_pars_quants_V[1 ,1:4]) %>%
tidyr::pivot_longer(cols = 1:4,
names_to = "parameter", values_to = "lower")
upper_bounds <- (parsK - sqrt(par_vars_V) * tstar_pars_quants_V[2 ,1:4]) %>%
tidyr::pivot_longer(cols = 1:4,
names_to = "parameter", values_to = "upper")
res_pars_V <- parsK %>% dplyr::left_join(lower_bounds, by = "parameter") %>%
dplyr::left_join(upper_bounds, by = "parameter")
parsK
# compute variance of RL estimation on Kblock sample
par_vars_V2 <- diag(estvar_Kblock$V2)
parsK <- estim_Kblock$mle
bootpars <-  bootres$resV2 %>%  dplyr::select(mu, sigma, shape, alpha, CovestV) %>% unique()
tstar_pars_V2 <- bootpars %>% dplyr::mutate( star =
purrr::pmap(list(mu, sigma, shape, alpha, CovestV),
function(mu, sigma, shape, alpha, CovestV) {
dplyr::tibble((mu - parsK["mu"])/sqrt(CovestV[1,1]),
(sigma - parsK["sigma"])/sqrt(CovestV[2,2]),
(shape - parsK["shape"])/sqrt(CovestV[3,3]),
(alpha - parsK["alpha"])/sqrt(CovestV[4,4]))
})
)
# compute quantiles of the bootstrapped studentized parameter estimates
tstar_pars_quants_V2 <- tstar_pars_V2 %>% dplyr::select(star) %>% tidyr::unnest(cols = star) %>%
dplyr::summarise_at(1:4,  ~ quantile(.x, p = c(0.975, 0.025), na.rm = TRUE)) %>%
dplyr::mutate(quant = c("q0975", "q0025"))
lower_bounds <- (parsK - sqrt(par_vars_V2) * tstar_pars_quants_V2[1 ,1:4]) %>%
tidyr::pivot_longer(cols = 1:4,
names_to = "parameter", values_to = "lower")
upper_bounds <- (parsK - sqrt(par_vars_V2) * tstar_pars_quants_V2[2 ,1:4]) %>%
tidyr::pivot_longer(cols = 1:4,
names_to = "parameter", values_to = "upper")
parsK <- tidyr::pivot_longer(parsK, cols = 1:4, names_to = "parameter", values_to = "par_est")
res_pars_V2 <- parsK %>% dplyr::left_join(lower_bounds, by = "parameter") %>%
dplyr::left_join(upper_bounds, by = "parameter")
par_vars_V <- diag(estvar_Kblock$V)
bootpars <-  bootres$resV %>%  dplyr::select(mu, sigma, shape, alpha, CovestV) %>% unique()
tstar_pars_V <- bootpars %>% dplyr::mutate( star =
purrr::pmap(list(mu, sigma, shape, alpha, CovestV),
function(mu, sigma, shape, alpha, CovestV) {
dplyr::tibble((mu - parsK["mu"])/sqrt(CovestV[1,1]),
(sigma - parsK["sigma"])/sqrt(CovestV[2,2]),
(shape - parsK["shape"])/sqrt(CovestV[3,3]),
(alpha - parsK["alpha"])/sqrt(CovestV[4,4]))
})
)
# compute quantiles of the bootstrapped studentized parameter estimates
tstar_pars_quants_V <- tstar_pars_V %>% dplyr::select(star) %>% tidyr::unnest(cols = star) %>%
dplyr::summarise_at(1:4,  ~ quantile(.x, p = c(0.975, 0.025), na.rm = TRUE)) %>%
dplyr::mutate(quant = c("q0975", "q0025"))
par_vars_V <- diag(estvar_Kblock$V)
parsK <- estim_Kblock$mle
bootpars <-  bootres$resV %>%  dplyr::select(mu, sigma, shape, alpha, CovestV) %>% unique()
tstar_pars_V <- bootpars %>% dplyr::mutate( star =
purrr::pmap(list(mu, sigma, shape, alpha, CovestV),
function(mu, sigma, shape, alpha, CovestV) {
dplyr::tibble((mu - parsK["mu"])/sqrt(CovestV[1,1]),
(sigma - parsK["sigma"])/sqrt(CovestV[2,2]),
(shape - parsK["shape"])/sqrt(CovestV[3,3]),
(alpha - parsK["alpha"])/sqrt(CovestV[4,4]))
})
)
# compute quantiles of the bootstrapped studentized parameter estimates
tstar_pars_quants_V <- tstar_pars_V %>% dplyr::select(star) %>% tidyr::unnest(cols = star) %>%
dplyr::summarise_at(1:4,  ~ quantile(.x, p = c(0.975, 0.025), na.rm = TRUE)) %>%
dplyr::mutate(quant = c("q0975", "q0025"))
lower_bounds <- (parsK - sqrt(par_vars_V) * tstar_pars_quants_V[1 ,1:4]) %>%
tidyr::pivot_longer(cols = 1:4,
names_to = "parameter", values_to = "lower")
upper_bounds <- (parsK - sqrt(par_vars_V) * tstar_pars_quants_V[2 ,1:4]) %>%
tidyr::pivot_longer(cols = 1:4,
names_to = "parameter", values_to = "upper")
res_pars_V <- parsK %>% dplyr::left_join(lower_bounds, by = "parameter") %>%
dplyr::left_join(upper_bounds, by = "parameter")
par_vars_V <- diag(estvar_Kblock$V)
parsK <- estim_Kblock$mle
bootpars <-  bootres$resV %>%  dplyr::select(mu, sigma, shape, alpha, CovestV) %>% unique()
tstar_pars_V <- bootpars %>% dplyr::mutate( star =
purrr::pmap(list(mu, sigma, shape, alpha, CovestV),
function(mu, sigma, shape, alpha, CovestV) {
dplyr::tibble((mu - parsK["mu"])/sqrt(CovestV[1,1]),
(sigma - parsK["sigma"])/sqrt(CovestV[2,2]),
(shape - parsK["shape"])/sqrt(CovestV[3,3]),
(alpha - parsK["alpha"])/sqrt(CovestV[4,4]))
})
)
# compute quantiles of the bootstrapped studentized parameter estimates
tstar_pars_quants_V <- tstar_pars_V %>% dplyr::select(star) %>% tidyr::unnest(cols = star) %>%
dplyr::summarise_at(1:4,  ~ quantile(.x, p = c(0.975, 0.025), na.rm = TRUE)) %>%
dplyr::mutate(quant = c("q0975", "q0025"))
lower_bounds <- (parsK - sqrt(par_vars_V) * tstar_pars_quants_V[1 ,1:4]) %>%
tidyr::pivot_longer(cols = 1:4,
names_to = "parameter", values_to = "lower")
upper_bounds <- (parsK - sqrt(par_vars_V) * tstar_pars_quants_V[2 ,1:4]) %>%
tidyr::pivot_longer(cols = 1:4,
names_to = "parameter", values_to = "upper")
parsK <- tidyr::pivot_longer(parsK, cols = 1:4, names_to = "parameter", values_to = "par_est")
res_pars_V <- parsK %>% dplyr::left_join(lower_bounds, by = "parameter") %>%
dplyr::left_join(upper_bounds, by = "parameter")
res_pars_V
res_pars_V2
res_pars <- res_pars_V %>% dplyr::mutate(varmeth = "V") %>%
dplyr::bind_rows(res_pars_V2 %>% dplyr::mutate(varmeth = "V2"))
res_pars
devtools::load_all()
ci_student_boot_sl(yy, blcksz = 90, temp.cov = rep(1:ny/ny, each = blcksz),
B = 10, type = "shift", ref_gmst = c(0.5, 0.95), estimate_RL = "both", varmeth = "both")
parest <- dplyr::tibble()
est_sl_df <- data.frame(t(est_sl$mle))
k
# number of blocks of size K*blcksz that are observed
.nKblocks <- ceiling(ndata/(k*blcksz))
# for each observation: which Kblock does it belong to, and is it in the last
# block of site blcksz within that larger Kblock
indexblock <- data.frame(blockind = c(rep(1:(.nKblocks-1), each = k*blcksz),
rep(.nKblocks, ndata - k*blcksz*(.nKblocks-1))),
obsind = 1:ndata)
# compute the unique sliding BM within each of the
# nKblocks of size Kblock, their frequency and their Kblockindex
# (index of the bigger block of size K the sliding BM belongs to)
sluniq_wb <- slbm::get_uniq_bm_boot(df.yy, blcksz = blcksz, indexblock = indexblock,
temp_cvrt = temp.cov, looplastblock = looplastblock,
returnfullsamp = TRUE)
full_slbm_Kblock <- sluniq_wb %>% dplyr::select(-uniq_data)
sluniq_wb <- sluniq_wb %>% dplyr::select(-full_data)
#  compute ML estimator
estim_Kblock <- tryCatch(slbm::fit_gev_univ(tidyr::unnest(sluniq_wb, cols = uniq_data),
type = type, hessian = TRUE), error = errfct(type))
# bootstrap RLs and compute their parametric variance estimation
bootres <- slbm::boot_sl(
sluniq = sluniq_wb,
slorig = full_slbm_Kblock,
blcksz = blcksz,
nKblocks = .nKblocks,
B = B,
type = type,
ref_gmst = ref_gmst,
Tyrl = Tyrl,
start_vals = estim_Kblock$mle,
scale.link = make.link("identity"),
reltol = 1e-09, estimate_RL = estimate_RL, varmeth = varmeth)
# estimate Variance of Kblock estimator
slorig_Kblock <- purrr::map_dfr(full_slbm_Kblock$full_data, ~ .x)
estvar_Kblock <- slbm::est_var_univ_shift(orig_slbm = slorig_Kblock$slbm,
est_par = estim_Kblock, blcksz = blcksz,
temp.cov = slorig_Kblock$temp_cvrt,
temp.cov.dj =  slorig_Kblock$temp_cvrt,
varmeth = varmeth)
# RL estimated on kblock sample
rlhat_Kblock <- slbm::compute_rl(theta = estim_Kblock$mle,
Tyrl = Tyrl, type = type, ref_gmst = ref_gmst)
bootres <- purrr::map(bootres, ~ dplyr::rename(.x, "rlboot" = "rl"))
bootres <- purrr::map(bootres, ~ .x %>% dplyr::left_join(rlhat_Kblock, by = c("refGMST", "Year")))
# compute variance of RL estimation on Kblock sample
varrl_V2 <- purrr::map_dfr(Tyrl, ~ {
dplyr::tibble(var_hat =
slbm::estimate_var_rl(theta = estim_Kblock$mle, Tyrl = .x, type = type,
ref_gmst = ref_gmst, Covmat = estvar_Kblock$V2),
refGMST = ref_gmst, Year = .x) })
# compute quantiles of the bootstrapped studentized RLs
tstar_quants_V2 <- bootres$resV2 %>%
dplyr::mutate(tstar = (rlboot - rl)/sqrt(var_hat)) %>%
dplyr::group_by(refGMST, Year) %>%
dplyr::summarise(q0975 = quantile(tstar, p = c(0.975), na.rm = TRUE),
q0025 = quantile(tstar, p = 0.025, na.rm = TRUE),
.groups = "drop")
# join results and compute confidence bounds
resV2 <- varrl_V2 %>%
dplyr::left_join(tstar_quants_V2, by = c("refGMST", "Year")) %>%
dplyr::left_join(rlhat_Kblock, by = c("refGMST", "Year")) %>%
dplyr::mutate(lower = rl - sqrt(var_hat)*q0975, upper = rl - sqrt(var_hat)*q0025)
# compute variance of RL estimation on Kblock sample
varrl_V <- purrr::map_dfr(Tyrl, ~ {
dplyr::tibble(var_hat =
slbm::estimate_var_rl(theta = estim_Kblock$mle, Tyrl = .x, type = type,
ref_gmst = ref_gmst, Covmat = estvar_Kblock$V),
refGMST = ref_gmst, Year = .x) })
# compute quantiles of the bootstrapped studentized RLs
tstar_quants_V <- bootres$resV %>%
dplyr::mutate(tstar = (rlboot - rl)/sqrt(var_hat)) %>%
dplyr::group_by(refGMST, Year) %>%
dplyr::summarise(q0975 = quantile(tstar, p = c(0.975), na.rm = TRUE),
q0025 = quantile(tstar, p = 0.025, na.rm = TRUE),
.groups = "drop")
# join results and compute confidence bounds
resV <- varrl_V %>%
dplyr::left_join(tstar_quants_V, by = c("refGMST", "Year")) %>%
dplyr::left_join(rlhat_Kblock, by = c("refGMST", "Year")) %>%
dplyr::mutate(lower = rl - sqrt(var_hat)*q0975, upper = rl - sqrt(var_hat)*q0025)
res <- resV %>% dplyr::mutate(varmeth = "V") %>%
dplyr::bind_rows(resV2 %>% dplyr::mutate(varmeth = "V2"))
res
# put parameters into df
estim_Kblock$mle <- data.frame(t(estim_Kblock$mle))
parest <- parest %>%
dplyr::bind_rows(res %>% dplyr::mutate(estim_Kblock$mle, Kblock = k) )
parest
# compute variance of RL estimation on Kblock sample
par_vars_V2 <- diag(estvar_Kblock$V2)
parsK <- estim_Kblock$mle
bootpars <-  bootres$resV2 %>%  dplyr::select(mu, sigma, shape, alpha, CovestV) %>% unique()
tstar_pars_V2 <- bootpars %>% dplyr::mutate( star =
purrr::pmap(list(mu, sigma, shape, alpha, CovestV),
function(mu, sigma, shape, alpha, CovestV) {
dplyr::tibble((mu - parsK["mu"])/sqrt(CovestV[1,1]),
(sigma - parsK["sigma"])/sqrt(CovestV[2,2]),
(shape - parsK["shape"])/sqrt(CovestV[3,3]),
(alpha - parsK["alpha"])/sqrt(CovestV[4,4]))
})
)
# compute quantiles of the bootstrapped studentized parameter estimates
tstar_pars_quants_V2 <- tstar_pars_V2 %>% dplyr::select(star) %>% tidyr::unnest(cols = star) %>%
dplyr::summarise_at(1:4,  ~ quantile(.x, p = c(0.975, 0.025), na.rm = TRUE)) %>%
dplyr::mutate(quant = c("q0975", "q0025"))
lower_bounds <- (parsK - sqrt(par_vars_V2) * tstar_pars_quants_V2[1 ,1:4]) %>%
tidyr::pivot_longer(cols = 1:4,
names_to = "parameter", values_to = "lower")
upper_bounds <- (parsK - sqrt(par_vars_V2) * tstar_pars_quants_V2[2 ,1:4]) %>%
tidyr::pivot_longer(cols = 1:4,
names_to = "parameter", values_to = "upper")
parsK <- tidyr::pivot_longer(parsK, cols = 1:4, names_to = "parameter", values_to = "par_est")
res_pars_V2 <- parsK %>% dplyr::left_join(lower_bounds, by = "parameter") %>%
dplyr::left_join(upper_bounds, by = "parameter")
par_vars_V <- diag(estvar_Kblock$V)
parsK <- estim_Kblock$mle
bootpars <-  bootres$resV %>%  dplyr::select(mu, sigma, shape, alpha, CovestV) %>% unique()
tstar_pars_V <- bootpars %>% dplyr::mutate( star =
purrr::pmap(list(mu, sigma, shape, alpha, CovestV),
function(mu, sigma, shape, alpha, CovestV) {
dplyr::tibble((mu - parsK["mu"])/sqrt(CovestV[1,1]),
(sigma - parsK["sigma"])/sqrt(CovestV[2,2]),
(shape - parsK["shape"])/sqrt(CovestV[3,3]),
(alpha - parsK["alpha"])/sqrt(CovestV[4,4]))
})
)
# compute quantiles of the bootstrapped studentized parameter estimates
tstar_pars_quants_V <- tstar_pars_V %>% dplyr::select(star) %>% tidyr::unnest(cols = star) %>%
dplyr::summarise_at(1:4,  ~ quantile(.x, p = c(0.975, 0.025), na.rm = TRUE)) %>%
dplyr::mutate(quant = c("q0975", "q0025"))
lower_bounds <- (parsK - sqrt(par_vars_V) * tstar_pars_quants_V[1 ,1:4]) %>%
tidyr::pivot_longer(cols = 1:4,
names_to = "parameter", values_to = "lower")
upper_bounds <- (parsK - sqrt(par_vars_V) * tstar_pars_quants_V[2 ,1:4]) %>%
tidyr::pivot_longer(cols = 1:4,
names_to = "parameter", values_to = "upper")
parsK <- tidyr::pivot_longer(parsK, cols = 1:4, names_to = "parameter", values_to = "par_est")
res_pars_V <- parsK %>% dplyr::left_join(lower_bounds, by = "parameter") %>%
dplyr::left_join(upper_bounds, by = "parameter")
res_pars <- res_pars_V %>% dplyr::mutate(varmeth = "V") %>%
dplyr::bind_rows(res_pars_V2 %>% dplyr::mutate(varmeth = "V2"))
res_pars
parest
paramest <- tibble()
paramest <- paramest %>% dplyr::mutate( Kblock = k)
paramest
paramest %>%
dplyr::bind_rows(res_pars %>% dplyr::mutate( Kblock = k) )
devtools::load_all()
ci_student_boot_sl(yy, blcksz = 90, temp.cov = rep(1:ny/ny, each = blcksz),
B = 10, type = "shift", ref_gmst = c(0.5, 0.95), estimate_RL = "both", varmeth = "both")
ci_student_boot_sl(yy, Kblock = 4, blcksz = 90, temp.cov = rep(1:ny/ny, each = blcksz),
B = 10, type = "shift", ref_gmst = c(0.5, 0.95), estimate_RL = "both", varmeth = "both")
ci_student_boot_sl(yy, Kblock = 4, blcksz = 90, temp.cov = rep(1:ny/ny, each = blcksz),
B = 10, type = "shift", ref_gmst = c(0.5, 0.95), estimate_RL = "both", varmeth = "V")
ci_student_boot_sl(yy, Kblock = 4, blcksz = 90, temp.cov = rep(1:ny/ny, each = blcksz),
B = 10, type = "shift", ref_gmst = c(0.5, 0.95), estimate_RL = "both", varmeth = "V2")
ci_student_boot_sl(yy, Kblock = 4, blcksz = 90, temp.cov = rep(1:ny/ny, each = blcksz),
B = 500, type = "shift", ref_gmst = c(0.5, 0.95), estimate_RL = "both", varmeth = "V2")
ci_student_boot_sl(yy, Kblock = 4, blcksz = 90, temp.cov = rep(1:ny/ny, each = blcksz),
B = 500, type = "shift", ref_gmst = c(0.5, 0.95), estimate_RL = TRUE, varmeth = "V2")
devtools::load_all()
ci_student_boot_sl(yy, Kblock = 4, blcksz = 90, temp.cov = rep(1:ny/ny, each = blcksz),
B = 500, type = "shift", ref_gmst = c(0.5, 0.95), estimate_RL = TRUE, varmeth = "V2")
ci_student_boot_sl(yy, Kblock = 4, blcksz = 90, temp.cov = rep(1:ny/ny, each = blcksz),
B = 5, type = "shift", ref_gmst = c(0.5, 0.95), estimate_RL = TRUE, varmeth = "V2")
ci_student_boot_sl(yy, Kblock = 4, blcksz = 90, temp.cov = rep(1:ny/ny, each = blcksz),
B = 5, type = "shift", ref_gmst = c(0.5, 0.95), estimate_RL = TRUE, varmeth = "V")
ci_student_boot_sl(yy, Kblock = 4, blcksz = 90, temp.cov = rep(1:ny/ny, each = blcksz),
B = 5, type = "shift", ref_gmst = c(0.5, 0.95), estimate_RL = "both", varmeth = "V")
ci_student_boot_sl(yy, Kblock = 4, blcksz = 90, temp.cov = rep(1:ny/ny, each = blcksz),
B = 5, type = "shift", ref_gmst = c(0.5, 0.95), estimate_RL = TRUE, varmeth = "V")
devtools::load_all()
ci_student_boot_sl(yy, Kblock = 4, blcksz = 90, temp.cov = rep(1:ny/ny, each = blcksz),
B = 5, type = "shift", ref_gmst = c(0.5, 0.95), estimate_RL = TRUE, varmeth = "V")
est_sl_df
# number of blocks of size K*blcksz that are observed
.nKblocks <- ceiling(ndata/(k*blcksz))
# for each observation: which Kblock does it belong to, and is it in the last
# block of site blcksz within that larger Kblock
indexblock <- data.frame(blockind = c(rep(1:(.nKblocks-1), each = k*blcksz),
rep(.nKblocks, ndata - k*blcksz*(.nKblocks-1))),
obsind = 1:ndata)
# compute the unique sliding BM within each of the
# nKblocks of size Kblock, their frequency and their Kblockindex
# (index of the bigger block of size K the sliding BM belongs to)
sluniq_wb <- slbm::get_uniq_bm_boot(df.yy, blcksz = blcksz, indexblock = indexblock,
temp_cvrt = temp.cov, looplastblock = looplastblock,
returnfullsamp = TRUE)
full_slbm_Kblock <- sluniq_wb %>% dplyr::select(-uniq_data)
sluniq_wb <- sluniq_wb %>% dplyr::select(-full_data)
#  compute ML estimator
estim_Kblock <- tryCatch(slbm::fit_gev_univ(tidyr::unnest(sluniq_wb, cols = uniq_data),
type = type, hessian = TRUE), error = errfct(type))
# bootstrap RLs and compute their parametric variance estimation
bootres <- slbm::boot_sl(
sluniq = sluniq_wb,
slorig = full_slbm_Kblock,
blcksz = blcksz,
nKblocks = .nKblocks,
B = B,
type = type,
ref_gmst = ref_gmst,
Tyrl = Tyrl,
start_vals = estim_Kblock$mle,
scale.link = make.link("identity"),
reltol = 1e-09, estimate_RL = estimate_RL, varmeth = varmeth)
estim_Kblock$mle
# bootstrap RLs and compute their parametric variance estimation
bootres <- slbm::boot_sl(
sluniq = sluniq_wb,
slorig = full_slbm_Kblock,
blcksz = blcksz,
nKblocks = .nKblocks,
B = B,
type = type,
ref_gmst = ref_gmst,
Tyrl = Tyrl,
start_vals = data.frame(t(estim_Kblock$mle)),
scale.link = make.link("identity"),
reltol = 1e-09, estimate_RL = estimate_RL, varmeth = varmeth)
# bootstrap RLs and compute their parametric variance estimation
bootres <- slbm::boot_sl(
sluniq = sluniq_wb,
slorig = full_slbm_Kblock,
blcksz = blcksz,
nKblocks = .nKblocks,
B = B,
type = type,
ref_gmst = ref_gmst,
Tyrl = Tyrl,
start_vals = estim_Kblock$mle,
scale.link = make.link("identity"),
reltol = 1e-09, estimate_RL = estimate_RL, varmeth = "both")
# bootstrap RLs and compute their parametric variance estimation
bootres <- slbm::boot_sl(
sluniq = sluniq_wb,
slorig = full_slbm_Kblock,
blcksz = blcksz,
nKblocks = .nKblocks,
B = B,
type = type,
ref_gmst = ref_gmst,
Tyrl = Tyrl,
start_vals = estim_Kblock$mle,
scale.link = make.link("identity"),
reltol = 1e-09, estimate_RL = "both", varmeth = "both")
blcksz <- 90
ny <- 100
yy <-  evd::rgpd(ny*blcksz, shape = -0.2) + 2*rep(1:ny/ny, each = blcksz)
df.yy <- data.frame(Station = "X1", Obs = yy)
k <- 3
ndata <- blcksz * ny
.nKblocks <- ceiling(ndata/(k*blcksz))
indexblock <- data.frame(blockind = c(rep(1:(.nKblocks-1), each = k*blcksz),
rep(.nKblocks, ndata - k*blcksz*(.nKblocks-1))),
obsind = 1:ndata)
sluniq_wb <- get_uniq_bm_boot(df.yy, blcksz = blcksz, indexblock = indexblock,
temp_cvrt = rep(1:ny/ny, each = blcksz), looplastblock = TRUE,
returnfullsamp = TRUE)
full_slbm <- sluniq_wb %>% dplyr::select(-uniq_data)
sluniq_wb <- sluniq_wb %>% dplyr::select(-full_data)
estim_lo <- slbm::fit_gev_univ(tidyr::unnest(sluniq_wb, cols = uniq_data),
type = "shift", hessian = TRUE)
boot_sl(
sluniq = sluniq_wb,
slorig = full_slbm,
blcksz = blcksz,
nKblocks = .nKblocks,
B = 10,
type = "shift",
ref_gmst = (c(0.8, 0.9)),
Tyrl = c(50, 100),
start_vals = estim_lo$mle,
scale.link = make.link("identity"),
reltol = 1e-09, estimate_RL = TRUE)
boot_sl(
sluniq = sluniq_wb,
slorig = full_slbm,
blcksz = blcksz,
nKblocks = .nKblocks,
B = 10,
type = "shift",
ref_gmst = (c(0.8, 0.9)),
Tyrl = c(50, 100),
start_vals = estim_lo$mle,
scale.link = make.link("identity"),
reltol = 1e-09, estimate_RL = "both")
boot_sl(
sluniq = sluniq_wb,
slorig = full_slbm,
blcksz = blcksz,
nKblocks = .nKblocks,
B = 10,
type = "shift",
ref_gmst = (c(0.8, 0.9)),
Tyrl = c(50, 100),
start_vals = estim_lo$mle,
scale.link = make.link("identity"),
reltol = 1e-09, estimate_RL = "TRUE")
boot_sl(
sluniq = sluniq_wb,
slorig = full_slbm,
blcksz = blcksz,
nKblocks = .nKblocks,
B = 10,
type = "shift",
ref_gmst = (c(0.8, 0.9)),
Tyrl = c(50, 100),
start_vals = estim_lo$mle,
scale.link = make.link("identity"),
reltol = 1e-09, estimate_RL = FALSE)
boot_sl(
sluniq = sluniq_wb,
slorig = full_slbm,
blcksz = blcksz,
nKblocks = .nKblocks,
B = 10,
type = "shift",
ref_gmst = (c(0.8, 0.9)),
Tyrl = c(50, 100),
start_vals = estim_lo$mle,
scale.link = make.link("identity"),
reltol = 1e-09, estimate_RL = "both")
boot_sl(
sluniq = sluniq_wb,
slorig = full_slbm,
blcksz = blcksz,
nKblocks = .nKblocks,
B = 10,
type = "shift",
ref_gmst = (c(0.8, 0.9)),
Tyrl = c(50, 100),
start_vals = estim_lo$mle,
scale.link = make.link("identity"),
reltol = 1e-09, estimate_RL = TRUE)
devtools::load_all()
boot_sl(
sluniq = sluniq_wb,
slorig = full_slbm,
blcksz = blcksz,
nKblocks = .nKblocks,
B = 10,
type = "shift",
ref_gmst = (c(0.8, 0.9)),
Tyrl = c(50, 100),
start_vals = estim_lo$mle,
scale.link = make.link("identity"),
reltol = 1e-09, estimate_RL = TRUE)
boot_sl(
sluniq = sluniq_wb,
slorig = full_slbm,
blcksz = blcksz,
nKblocks = .nKblocks,
B = 10,
type = "shift",
ref_gmst = (c(0.8, 0.9)),
Tyrl = c(50, 100),
start_vals = estim_lo$mle,
scale.link = make.link("identity"),
reltol = 1e-09, estimate_RL = TRUE, varmeth = "both")
ci_student_boot_sl(yy, Kblock = 4, blcksz = 90, temp.cov = rep(1:ny/ny, each = blcksz),
B = 5, type = "shift", ref_gmst = c(0.5, 0.95), estimate_RL = TRUE, varmeth = "V")
ci_student_boot_sl(yy, Kblock = 4, blcksz = 90, temp.cov = rep(1:ny/ny, each = blcksz),
B = 5, type = "shift", ref_gmst = c(0.5, 0.95), estimate_RL = TRUE, varmeth = "V2")
