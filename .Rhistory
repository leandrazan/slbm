rlhat <- evd::qgev(1-1/100, loc = loctr, scale = estim$mle[2], shape = estim$mle[3])
rlhat
estimate_var_rl(estim$mle, Tyrl = 100, type = "shift", ref_gmst = reft, Covmat = covest$V)
xx <- evd::rgpd(90*100, shape = 0.2)
bms <- get_uniq_bm(xx, 90, looplastblock = TRUE)
slbm <- blockmax(xx, r = 90, "sliding")
estim <- fit_gev_univ(data = bms, type = "stationary", hessian = TRUE)
covest <- est_var_univ(slbm, est_par = estim, blcksz = 90, varmeth = "V2", type = "stationary")
devtools::load:all()
devtools::load:all()
devtools::load_all()
covest <- est_var_univ(slbm, est_par = estim, blcksz = 90, varmeth = "V2", type = "stationary")
rlhat <- evd::qgev(1-1/100, loc = estim$mle[1], scale = estim$mle[2], shape = estim$mle[3])
rlhat
estimate_var_rl(estim$mle, Tyrl = 100, type = "stationary", Covmat = covest$V)
#' ## full sample of sliding for estimaing the covariance matrix
#' slbm <- blockmax(xx, r = 90, "sliding")
#' estim <- fit_gev_univ(data = bms, type = "stationary", hessian = TRUE)
#' covest <- est_var_univ(slbm, est_par = estim, blcksz = 90, varmeth = "V2", type = "stationary")
#'
#' # estimated 100-year RL
#' rlhat <- evd::qgev(1-1/100, loc = estim$mle[1], scale = estim$mle[2], shape = estim$mle[3])
#' rlhat
#' estimate_var_rl(estim$mle, Tyrl = 100, type = "stationary", Covmat = covest$V)
#'
estimate_var_rl <- function(theta, Tyrl, type, ref_gmst = NULL, Covmat) {
if(type == "stationary") {
ref_gmst <- 1
}
qdelt <- purrr::map(ref_gmst, ~
qdelta_rl(theta = theta, Tyrl = Tyrl, type = type, ref_gmst = .x)
)
res <- purrr::map_dbl( qdelt, ~ .x %*% Covmat %*% .x)
names(res) <- paste("refGMST", ref_gmst)
res
}
rm(estimate_var_rl())
rm(estimate_var_rl)
devtools::Load_all()
devtools::load_all()
estimate_var_rl(estim$mle, Tyrl = 100, type = "stationary", Covmat = covest$V)
qdelta_rl(theta =estim$mle, Tyrl = 100, type = "stationary", ref_gmst = NULL)
aa <- qdelta_rl(theta =estim$mle, Tyrl = 100, type = "stationary", ref_gmst = NULL)
aa %*% covest$V2 %*% aa
aa %*% covest$V %*% aa
covest$V2
covest$V
devtools::load_all()
devtools::load_all()
estimate_var_rl(estim$mle, Tyrl = 100, type = "stationary", Covmat = covest$V)
devtools::load_all()
estimate_var_rl(estim$mle, Tyrl = 100, type = "stationary", Covmat = covest$V)
devtools::load_all()
estimate_var_rl(estim$mle, Tyrl = 100, type = "stationary", Covmat = covest$V)
devtools::document
devtools::document()
devtools::build()
## ----setup--------------------------------------------------------------------
library(slbm)
library(dplyr)
library(tidyr)
devtools::load:all()
devtools::load_all()
## -----------------------------------------------------------------------------
data("ExampleData", package = "slbm")
data("GMST", package = "slbm")
## -----------------------------------------------------------------------------
tempcv <- GMST %>% dplyr::filter(Year %in% c(1980:2019))
tempcvsl <- rep(tempcv$smoothedGMST, each = 90)[1:(39*90 +1)]
tempcvsl <- data.frame(GMST = tempcvsl)
set.seed(3)
spatial_cvrt <- data.frame(lat  = seq(0, 8, length = 8),
lon = runif(8), ele = runif(8))
## -----------------------------------------------------------------------------
yy <- data.frame(ExampleData) %>%
tidyr::pivot_longer( 1:8, names_to = "Station", values_to = "Obs")
bmuniq <- get_uniq_bm(yy, 90, temp_cvrt = tempcvsl$GMST)
yy
yy %>% dplyr::group_by(Station) %>%
tidyr::nest()
devtools::load_all()
bmuniq <- get_uniq_bm(yy, 90, temp_cvrt = tempcvsl$GMST)
yy %>% dplyr::group_by(Station) %>%
tidyr::nest()
aa <- yy %>% dplyr::group_by(Station) %>%
tidyr::nest()
aa[1, ]
aa[1, ]$data
devtools::load_all()
bmuniq <- get_uniq_bm(yy, 90, temp_cvrt = tempcvsl$GMST)
bmuniq
devtools::build()
?slbm::fit_dgev_cv_qs
load_all()
devtools::load_all()
?slbm::fit_dgev_cv_qs
devtools::document
devtools::document()
?slbm::fit_dgev_cv_qs
devtools::document()
devtools::build()
devtools::install()
?slbm::get_bm_data_qs
?slbm::get_start_vals
devtools::document()
devtools::build()
devtools::install()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::install()
devtools::document()
devtools::build()
devtools::install()
warnings()
devtools::load_all()
xx <- evd::rgpd(90*100, shape = 0.2)
bms <- get_uniq_bm(xx, 90, looplastblock = TRUE)
## full sample of sliding for estimaing the covariance matrix
slbm <- blockmax(xx, r = 90, "sliding")
estim <- fit_gev_univ(data = bms, type = "stationary", hessian = TRUE)
covest <- est_var_univ(slbm, est_par = estim, blcksz = 90, varmeth = "V2", type = "stationary")
covest
99Ãœ90
99*90
devtools::document()
devtools::build()
devtools::install()
slbm::es
devtools::load_all()
?fit_gev_univ
?fit_spgev_sl
slbm::sim_spatial
?slbm::sim_spatial
?slbm::MDAdata
Tyrl = c(50, 100), type = "shift", ref_gmst = c(0.5, 0.95))
compute_rl(theta = c(loc0 = 7, scale0 = 2, shape = 0.2, TempLoc1 = 2),
Tyrl = c(50, 100), type = "shift", ref_gmst = c(0.5, 0.95))
#' RL is computed. Ignored when \code{type = "stationary"}.
#'
#' @return A tibble containg the estimated RL for each combination of \code{Tyrl} and
#' \code{ref_gmst}.
#' @export
#'
#' @examples
#' compute_rl(theta = c(loc0 = 7, scale0 = 2, shape = 0.2, TempLoc1 = 2),
#' Tyrl = c(50, 100), type = "shift", ref_gmst = c(0.5, 0.95))
#'
compute_rl <- function(theta, Tyrl, type, ref_gmst = NULL) {
if(type == "stationary") {
rl <- evd::qgev(1-1/Tyrl, loc = theta[1], scale = theta[2], shape = theta[3])
return(tibble(rl = rl, Year = Tyrl ))
}
if(type == "scale") {
mut <- theta[1]*exp(theta[4]/theta[1]*ref_gmst)
sigmat <- theta[2]*exp(theta[4]/theta[1]*ref_gmst)
return(purrr::map_dfr(Tyrl, ~ {
rl <- evd::qgev(1-1/.x, loc = mut, scale = sigmat, shape = theta[3])
tibble(rl = rl, refGMST = ref_gmst, Year = .x)
}))
}
if(type == "shift") {
mut <- theta[1] + theta[4]*ref_gmst
return(purrr::map_dfr(Tyrl, ~ {
rl <- evd::qgev(1-1/.x, loc = mut, scale = theta[2], shape = theta[3])
tibble(rl = rl, refGMST = ref_gmst, Year = .x)
}))
}
}
compute_rl(theta = c(loc0 = 7, scale0 = 2, shape = 0.2, TempLoc1 = 2),
Tyrl = c(50, 100), type = "shift", ref_gmst = c(0.5, 0.95))
#' RL is computed. Ignored when \code{type = "stationary"}.
#'
#' @return A tibble containg the estimated RL for each combination of \code{Tyrl} and
#' \code{ref_gmst}.
#' @export
#'
#' @examples
#' compute_rl(theta = c(loc0 = 7, scale0 = 2, shape = 0.2, TempLoc1 = 2),
#' Tyrl = c(50, 100), type = "shift", ref_gmst = c(0.5, 0.95))
#'
compute_rl <- function(theta, Tyrl, type, ref_gmst = NULL) {
if(type == "stationary") {
rl <- evd::qgev(1-1/Tyrl, loc = theta[1], scale = theta[2], shape = theta[3])
return(dplyr::tibble(rl = rl, Year = Tyrl ))
}
if(type == "scale") {
mut <- theta[1]*exp(theta[4]/theta[1]*ref_gmst)
sigmat <- theta[2]*exp(theta[4]/theta[1]*ref_gmst)
return(purrr::map_dfr(Tyrl, ~ {
rl <- evd::qgev(1-1/.x, loc = mut, scale = sigmat, shape = theta[3])
dplyr::tibble(rl = rl, refGMST = ref_gmst, Year = .x)
}))
}
if(type == "shift") {
mut <- theta[1] + theta[4]*ref_gmst
return(purrr::map_dfr(Tyrl, ~ {
rl <- evd::qgev(1-1/.x, loc = mut, scale = theta[2], shape = theta[3])
dplyr::tibble(rl = rl, refGMST = ref_gmst, Year = .x)
}))
}
}
compute_rl(theta = c(loc0 = 7, scale0 = 2, shape = 0.2, TempLoc1 = 2),
Tyrl = c(50, 100), type = "shift", ref_gmst = c(0.5, 0.95))
rm(lsit = ls())
rm(list = ls())
devtools::load_all()
blcksz <- 90
ny <- 50
yy <- evd::rgpd(ny*blcksz, shape = 0.2)
df.yy <- data.frame(Station = "X1", Obs = yy)
k <- 3
ndata <- blcksz * ny
.nKblocks <- ceiling(ndata/(k*blcksz))
indexblock <- data.frame(blockind = c(rep(1:(.nKblocks-1), each = k*blcksz),
rep(.nKblocks, ndata - k*blcksz*(.nKblocks-1))),
useblock = c(rep(c(rep(1, (k-1)*blcksz),
rep(0, blcksz) ), (.nKblocks -1)),
rep(1, ndata - k*blcksz*(.nKblocks-1))),
obsind = 1:ndata)
sluniq_wb <- get_uniq_bm_boot(df.yy, blcksz = blcksz, indexblock = indexblock,
temp_cvrt = NULL, looplastblock = TRUE,
returnfullsamp = TRUE)
devtools::load_all()
sluniq_wb <- get_uniq_bm_boot(df.yy, blcksz = blcksz, indexblock = indexblock,
temp_cvrt = NULL, looplastblock = TRUE,
returnfullsamp = TRUE)
sluniq_wb
blcksz <- 90
ny <- 50
yy <- evd::rgpd(ny*blcksz, shape = 0.2)
df.yy <- data.frame(Station = "X1", Obs = yy)
k <- 3
ndata <- blcksz * ny
.nKblocks <- ceiling(ndata/(k*blcksz))
indexblock <- data.frame(blockind = c(rep(1:(.nKblocks-1), each = k*blcksz),
rep(.nKblocks, ndata - k*blcksz*(.nKblocks-1))),
obsind = 1:ndata)
sluniq_wb <- get_uniq_bm_boot(df.yy, blcksz = blcksz, indexblock = indexblock,
temp_cvrt = NULL, looplastblock = TRUE,
returnfullsamp = TRUE)
compute_rl(theta = c(loc0 = 7, scale0 = 2, shape = 0.2, TempLoc1 = 2),
Tyrl = c(50, 100), type = "shift", ref_gmst = c(0.5, 0.95))
blcksz <- 90
ny <- 100
yy <-  evd::rgpd(ny*blcksz, shape = 0.2) + 2*rep(1:ny/ny, each = blcksz)
df.yy <- data.frame(Station = "X1", Obs = yy)
k <- 3
ndata <- blcksz * ny
.nKblocks <- ceiling(ndata/(k*blcksz))
indexblock <- data.frame(blockind = c(rep(1:(.nKblocks-1), each = k*blcksz),
rep(.nKblocks, ndata - k*blcksz*(.nKblocks-1))),
obsind = 1:ndata)
sluniq_wb <- get_uniq_bm_boot(df.yy, blcksz = blcksz, indexblock = indexblock,
temp_cvrt = rep(1:100/100, each = 90), looplastblock = TRUE,
returnfullsamp = TRUE)
sluniq_wb <- get_uniq_bm_boot(df.yy, blcksz = blcksz, indexblock = indexblock,
temp_cvrt = rep(1:ny/ny, each = blcksz), looplastblock = TRUE,
returnfullsamp = TRUE)
full_slbm <- sluniq_wb %>% dplyr::select(-uniq_data)
sluniq_wb <- sluniq_wb %>% dplyr::select(-full_data)
estim_lo <- slbm::fit_gev_univ(unnest(sluniq_wb, cols = uniq_data),
type = "shift", hessian = TRUE)
estim_lo <- slbm::fit_gev_univ(tidyr::unnest(sluniq_wb, cols = uniq_data),
type = "shift", hessian = TRUE)
estim_lo
boot_sl(
sluniq = sluniq_wb,
slorig = full_slbm,
blcksz = blcksz,
nKblocks = .nKblocks,
B = 10,
type = "shift",
ref_gmst = (c(0.8, 0.9)),
Tyrl = c(50, 100),
start_vals = estim_lo$mle,
scale.link = make.link("identity"),
reltol = 1e-09, estimate_RL = TRUE)
#' slorig = full_slbm,
#' blcksz = blcksz,
#' nKblocks = .nKblocks,
#' B = 10,
#' type = "shift",
#' ref_gmst = (c(0.8, 0.9)),
#' Tyrl = c(50, 100),
#' start_vals = estim_lo$mle,
#' scale.link = make.link("identity"),
#' reltol = 1e-09, estimate_RL = TRUE)
boot_sl <- function(sluniq, slorig, nKblocks,
blcksz, B = 50,
start_vals = NULL,
type = "stationary",
scale.link = scale.link, reltol = 1e-08,
estimate_RL = TRUE,
Tyrl = c(50, 100), ref_gmst = 0.8, varmeth = "V2") {
# perform bootstrap B times
boot_estimators <- purrr::map(1:B,
~ sample_boot_sl(nKblocks = nKblocks,
sluniq = sluniq,
slorig = slorig,
blcksz = blcksz,
start_vals = start_vals,
type = type,
scale.link = scale.link,
.x,
# reltol = 1e-08,
estimate_RL = estimate_RL,
Tyrl = Tyrl,
ref_gmst = ref_gmst,
varmeth = varmeth))
if(!estimate_RL) {
boot_parest <- purrr::map_dfr(boot_estimators, ~ tibble(
data.frame(t(.x$est_boot$mle), conv = .x$est_boot$conv),
CovestV = list(.x$estvarV), CovestV2 = list(.x$estvarV2)))
}
else {
if(varmeth %in%  c("both", "V2")) {
boot_parest_v2 <- purrr::map_dfr(boot_estimators, ~
dplyr::left_join(.x$rl_boot, .x$rlvarV2, by = c("refGMST", "Year")))
}
if (varmeth %in%  c("both", "V")) {
boot_parest_v <- purrr::map_dfr(boot_estimators, ~
dplyr::left_join(.x$rl_boot, .x$rlvarV, by = c("refGMST", "Year")))
}
if(varmeth == "both") {
boot_parest <- boot_parest_v2 %>% dplyr::mutate(varmeth = "V2") %>%
dplyr::bind_rows(boot_parest_v %>% dplyr::mutate(varmeth = "V"))
} else {
boot_parest <- base::switch(varmeth, "V" = boot_parest_v,
"V2" = boot_parest_v2)
}
}
boot_parest
}
yy <- evd::rgpd(ny*blcksz, shape = 0.2) + 2*rep(1:ny/ny, each = blcksz)
ci_student_boot_sl(yy, blcksz = 90, temp.cov = rep(1:ny/ny, each = blcksz),
B = 100, type = "shift", ref_gmst = c(0.5, 0.95))
rm(list = ls())
devtools::load_all()
blcksz <- 90
ny <- 100
yy <-  evd::rgpd(ny*blcksz, shape = 0.2) + 2*rep(1:ny/ny, each = blcksz)
df.yy <- data.frame(Station = "X1", Obs = yy)
k <- 3
ndata <- blcksz * ny
.nKblocks <- ceiling(ndata/(k*blcksz))
indexblock <- data.frame(blockind = c(rep(1:(.nKblocks-1), each = k*blcksz),
rep(.nKblocks, ndata - k*blcksz*(.nKblocks-1))),
obsind = 1:ndata)
sluniq_wb <- get_uniq_bm_boot(df.yy, blcksz = blcksz, indexblock = indexblock,
temp_cvrt = rep(1:ny/ny, each = blcksz), looplastblock = TRUE,
returnfullsamp = TRUE)
full_slbm <- sluniq_wb %>% dplyr::select(-uniq_data)
sluniq_wb <- sluniq_wb %>% dplyr::select(-full_data)
estim_lo <- slbm::fit_gev_univ(tidyr::unnest(sluniq_wb, cols = uniq_data),
type = "shift", hessian = TRUE)
boot_sl(
sluniq = sluniq_wb,
slorig = full_slbm,
blcksz = blcksz,
nKblocks = .nKblocks,
B = 10,
type = "shift",
ref_gmst = (c(0.8, 0.9)),
Tyrl = c(50, 100),
start_vals = estim_lo$mle,
scale.link = make.link("identity"),
reltol = 1e-09, estimate_RL = TRUE)
blcksz <- 90
ny <- 50
## with a shift in location
yy <- evd::rgpd(ny*blcksz, shape = 0.2) + 2*rep(1:ny/ny, each = blcksz)
ci_student_boot_sl(yy, blcksz = 90, temp.cov = rep(1:ny/ny, each = blcksz),
B = 100, type = "shift", ref_gmst = c(0.5, 0.95))
## observations are scaling w.r.t. GMST
yy <- sample_mda_data(n.years = ny, blcksz = blcksz, shape.res = 0.2,
ts.mod = "AR", ts.par = 0.5,
samp.scheme = "S2", seed = 10)*exp(2/7.3*rep(1:ny/ny, each = blcksz))
yy <- evd::rgpd(ny*blcksz, shape = 0.2) + 2*rep(1:ny/ny, each = blcksz)
ci_student_boot_sl(yy, blcksz = 90, temp.cov = rep(1:ny/ny, each = blcksz),
B = 100, type = "shift", ref_gmst = c(0.5, 0.95))
devtools::load_all()
ci_student_boot_sl(yy, blcksz = 90, temp.cov = rep(1:ny/ny, each = blcksz),
devtools::load_all()
B = 100, type = "shift", ref_gmst = c(0.5, 0.95))
ci_student_boot_sl(yy, blcksz = 90, temp.cov = rep(1:ny/ny, each = blcksz),
B = 100, type = "shift", ref_gmst = c(0.5, 0.95))
yy <- evd::rgpd(ny*blcksz, shape = 0.2)*exp(2/7.3*rep(1:ny/ny, each = blcksz))
ci_student_boot_sl(yy, blcksz = 90, temp.cov = rep(1:ny/ny, each = blcksz),
B = 100, type = "scale", ref_gmst = c(0.5, 0.95))
ny
length(yy)
blcksz <- 90
ny <- 100
yy <-  evd::rgpd(ny*blcksz, shape = 0.2)*exp(2(7*rep(1:ny/ny, each = blcksz))
}
yy <-  evd::rgpd(ny*blcksz, shape = 0.2)*exp(2/7*rep(1:ny/ny, each = blcksz))
df.yy <- data.frame(Station = "X1", Obs = yy)
k <- 3
ndata <- blcksz * ny
.nKblocks <- ceiling(ndata/(k*blcksz))
indexblock <- data.frame(blockind = c(rep(1:(.nKblocks-1), each = k*blcksz),
rep(.nKblocks, ndata - k*blcksz*(.nKblocks-1))),
obsind = 1:ndata)
sluniq_wb <- get_uniq_bm_boot(df.yy, blcksz = blcksz, indexblock = indexblock,
temp_cvrt = rep(1:ny/ny, each = blcksz), looplastblock = TRUE,
returnfullsamp = TRUE)
full_slbm <- sluniq_wb %>% dplyr::select(-uniq_data)
sluniq_wb
full_slbm <- sluniq_wb %>% dplyr::select(-uniq_data)
sluniq_wb <- sluniq_wb %>% dplyr::select(-full_data)
estim_lo <- slbm::fit_gev_univ(tidyr::unnest(sluniq_wb, cols = uniq_data),
type = "scale", hessian = TRUE)
estim_lo
boot_sl(
sluniq = sluniq_wb,
slorig = full_slbm,
blcksz = blcksz,
nKblocks = .nKblocks,
B = 10,
type = "scale",
ref_gmst = (c(0.8, 0.9)),
Tyrl = c(50, 100),
start_vals = estim_lo$mle,
scale.link = make.link("identity"),
reltol = 1e-09, estimate_RL = TRUE)
nKblocks
.nKblocks
ci_student_boot_sl(yy, blcksz = 90, temp.cov = rep(1:ny/ny, each = blcksz),
B = 100, type = "scale", ref_gmst = c(0.5, 0.95), Kblock = 3)
ci_student_boot_sl(yy, blcksz = 90, temp.cov = rep(1:ny/ny, each = blcksz),
B = 100, type = "scale", ref_gmst = c(0.5, 0.95), Kblock = 4)
ci_student_boot_sl(yy, blcksz = 90, temp.cov = rep(1:ny/ny, each = blcksz),
B = 10, type = "scale", ref_gmst = c(0.5, 0.95), Kblock = 8)
ci_student_boot_sl(yy, blcksz = 90, temp.cov = rep(1:ny/ny, each = blcksz),
B = 10, type = "scale", ref_gmst = c(0.5, 0.95), Kblock = 10)
ci_student_boot_sl(yy, blcksz = 90, temp.cov = rep(1:ny/ny, each = blcksz),
B = 100, type = "scale", ref_gmst = c(0.5, 0.95))
devtools::document()
devtools::build()
devtools::document()
?slbm::ci_student_boot_sl
devtools::document()
?slbm::ci_student_boot_sl
devtools::build()
devtools::install()
devtools::load_all()
devtools::build()
devtools::install()
devtools::build()
devtools::install()
devtools::install()
remove.packages("slbm")
devtools::install()
devtools::document()
devtools::document()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::build()
devtools::install()
devtools::install()
# params is a vector of length 4
nll_expsc <- function(params,
data, temp.cov = NULL){
mu0 <- c("mu0" = params[1])
sigma0 <- c("sigma0" = params[2])
gamma <- c("gamma" = params[3])
alpha0 <- c("alpha" = params[4])
if(sigma0 <= 0) {return(1e+10)}
else {
mut <- mu0*exp(alpha0*temp.cov/mu0)
sigmat <-  sigma0*exp(alpha0*temp.cov/mu0)
if(abs(gamma) < 1e-8){
zt <- exp( -(data - mut)/sigmat)
loglik <-  sum( log(sigmat) + log(zt) + zt , na.rm = TRUE)
}
else{
zt <- 1 + gamma*(data - mut)/sigmat
if(any(zt < 0, na.rm = TRUE)){ loglik <- 1e+10}
else{
loglik <- sum(log(sigmat) + (1/gamma +1)*log(zt) + zt^(-1/gamma), na.rm = TRUE)
}
}
loglik
}
}
fit_gevexpsc <- function(data, temp.cov, method = "BFGS", maxiter = 100,
hessian = FALSE) {
start_st <-  evd::fgev(as.vector(data), std.err = FALSE)$estimate
start_vals <- c(start_st[1], start_st[2], start_st[3], 0)
names(start_vals) <- c("mu0", "simga0", "gamma", "alpha")
#print(start_vals)
mlest <- optim(start_vals, fn = nll_expsc,
data = data, temp.cov = temp.cov,
method = method, control = list(maxit = maxiter),
hessian = hessian)
if(!(mlest$convergence == 0) ){print("Optimization didn't succeed.")}
if(!hessian) {
return(list(mle = mlest$par, nll_expsc = mlest$value, conv = mlest$convergence))
}
else {
return(list(mle = mlest$par, nll_expsc = mlest$value, conv = mlest$convergence,
mlest$hessian))
}
}
xx <- evd::rgpd(90*100, shape.res = 0.2)*exp(2/7*rep(1:100/100, each  = 90)
)
xx <- evd::rgpd(90*100, shape.res = 0.2)*exp(2/7*rep(1:100/100, each  = 90))
xx <- evd::rgpd(90*100, shape = 0.2)*exp(2/7*rep(1:100/100, each  = 90))
plot.ts(xx)
