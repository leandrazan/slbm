v2scale <- 2* mean(as.numeric(lapply(AllDiags(cmsc), mean)) )/ k
v2loc <- 2* mean(as.numeric(lapply(AllDiags(cmloc), mean)) )/ k
# covariances. Use AllDiags2
v2shsc <- 2* mean(as.numeric(lapply(AllDiags2(cmshsc), mean)) )/ k
v2shloc <- 2* mean(as.numeric(lapply(AllDiags2(cmshloc), mean)) )/ k
v2scloc <- 2* mean(as.numeric(lapply(AllDiags2(cmscloc), mean)) )/ k
V2 <- matrix( c(v2loc, v2scloc, v2shloc,
v2scloc, v2scale, v2shsc,
v2shloc, v2shsc, v2shape),
nrow = 3)
rownames(V2) <- colnames(V2) <- c("loc", "scale", "shape")
V2
dim(Y)
# variances
vshape <- 2*mean(cm[1,]) / k
vscale <-  2*mean(cmsc[1,]) / k
vloc <-  2*mean(cmloc[1,]) / k
# covariances
vshsc <- 2*mean(cmshsc[1,]) / k
vshloc <- 2*mean(cmshloc[1,]) / k
vscloc <- 2*mean(cmscloc[1,]) / k
vscsh <- 2*mean(cmshsc[,1]) / k
vlocsh <- 2*mean(cmshloc[,1]) / k
vlocsc <- 2*mean(cmscloc[,1]) / k
V <- matrix( c(vloc, vscloc, vshloc,
vlocsc, vscale, vshsc,
vlocsc, vscsh, vshape),
nrow = 3)
V <- (V + t(V))/2
rownames(V) <- colnames(V) <- c("loc", "scale", "shape")
V
V2
AA <- matrix(1:24, ncol = 12)
AA
array(AA, dim = c(2,3,4))
array(Y, dim = c(3, 90, 99))
YY <- array(Y, dim = c(3, 90, 99))
dim(YY)
dim(m)
cm
dim(cm)
m  <- t(matrix(Yshape, nrow = blcksz, ncol = k))
cm <- cov(m)
msc  <- t(matrix(Yscale, nrow = blcksz, ncol = k))
cmsc <- cov(msc)
mloc  <- t(matrix(Yloc, nrow = blcksz, ncol = k))
cmloc <- cov(mloc)
cmshsc <- cov(m, msc)
cmshloc <- cov(m, mloc)
cmscloc <- cov(msc, mloc)
dim(cmshsc)
cmshsc[1, 1]
dim(m)
cov(m[, 1], msc[, 1])
cov(m[, 1], msc[, 2])
cmshsc[1, 2]
?cov
dim(cm)
fishest
fishestinv
eigen(fishest)
boot_sl()
boot_sl
sample_boot_sl
est_var_univ
est_var_univ_nochain
devtools::load_all()
set.seed(1)
blcksz <- 90
xx <- evd::rgpd(100*90, shape = 0.2)
temp_cvrt <- rep(1:100/100, each = blcksz)[1:(99*blcksz + 1)]
bms <- get_uniq_bm(xx, blcksz, temp_cvrt = temp_cvrt, looplastblock = FALSE)
bms
fit_gev_univ(data = bms, hessian = TRUE, type = "stationary", return_cov = TRUE,
varmeth = "V2", chain = TRUE, orig_slbm = blockmax(xx, 90, "sliding"),
orig_cvrt = temp_cvrt, blcksz = 90)
mu <- theta[1]
theta
sigma <- theta[2]
xi <- theta[3]
z <- (x-mu)/sigma
z
plot.ts(z)
in_supp <- which( (1+ xi*z) > 0)
in_supp
!in_supp
z[!in_supp] <- NA
anyNA(z)
u <- (1+xi *z)^(-1/xi)
scoreloc <- (xi + 1 - u)/(sigma*(1+xi*z))
scorescale <- ((1-u)*z -1)/(sigma*(1+xi*z))
scoreshape <- (1-u)*z^2/2- z
scoreshape <- (1-u)*1/xi*(1/xi*log(1+xi*z)-z/(1+xi*z)) - z/(1+xi*z)
scoreshape
scoreloc
length(scoreloc)
matrix(c(scoreloc, scorescale, scoreshape),
nrow = 3, byrow = TRUE)
matrix(c(scoreloc, scorescale, scoreshape),
nrow = 3, byrow = TRUE)[ , 1]
matrix(c(scoreloc, scorescale, scoreshape),
nrow = 3, byrow = TRUE) %>% dim()
matrix(c(scoreloc, scorescale, scoreshape),
nrow = 3, byrow = TRUE)[, 1]
scoreloc
matrix(c(scoreloc, scorescale, scoreshape),
nrow = 3, byrow = TRUE)[, 1]
scoreloc[, 1]
scoreloc[ 1]
scorescale[ 1]
scoreshape[ 1]
devtools::load_all()
library(tidyverse)
#' @examples
blcksz <- 90
ny <- 100
xx <-  evd::rgpd(ny*blcksz, shape = -0.2) + 2*rep(1:ny/ny, each = blcksz)
df.xx <- data.frame(Station = "X1", Obs = xx)
k <- 3
ndata <- blcksz * ny
.nKblocks <- ceiling(ndata/(k*blcksz))
indexblock <- data.frame(blockind = c(rep(1:(.nKblocks-1), each = k*blcksz),
rep(.nKblocks, ndata - k*blcksz*(.nKblocks-1))),
obsind = 1:ndata)
sluniq_wb <- get_uniq_bm_boot(df.xx, blcksz = blcksz, K = k, indexblock = indexblock,
temp_cvrt = rep(1:ny/ny, each = blcksz), looplastblock = TRUE,
returnfullsamp = TRUE)
full_slbm <- sluniq_wb %>% dplyr::select(-uniq_data)
sluniq_wb <- sluniq_wb %>% dplyr::select(-full_data)
estim_lo <- slbm::fit_gev_univ(tidyr::unnest(sluniq_wb, cols = uniq_data),
type = "shift", hessian = TRUE)
boot_sl(sluniq = sluniq_wb, slorig = full_slbm, blcksz = blcksz, nKblocks = .nKblocks,
B = 10, type = "shift", ref_gmst = (c(0.8, 0.9)), Tyrl = c(50, 100), start_vals = estim_lo$mle,
scale.link = make.link("identity"), reltol = 1e-09, estimate_RL = TRUE)
boot_estimators
boot_sl(sluniq = sluniq_wb, slorig = full_slbm, blcksz = blcksz, nKblocks = .nKblocks,
B = 10, type = "shift", ref_gmst = (c(0.8, 0.9)), Tyrl = c(50, 100), start_vals = estim_lo$mle,
scale.link = make.link("identity"), reltol = 1e-09, estimate_RL = "both")
B
boot_estimators
boot_sl(sluniq = sluniq_wb, slorig = full_slbm, blcksz = blcksz, nKblocks = .nKblocks,
B = 10, type = "stationary", ref_gmst = (c(0.8, 0.9)), Tyrl = c(50, 100), start_vals = estim_lo$mle,
scale.link = make.link("identity"), reltol = 1e-09, estimate_RL = "both")
boot_estimators
boot_parest_v2 <- purrr::map_dfr(boot_estimators, ~
{ resrl <- dplyr::left_join(.x$rl_boot, .x$rlvarV2,
by = c("Year"))
respars <- dplyr::tibble(
data.frame(t(.x$mle), conv = .x$conv),
CovestV = list(.x$V2))
respars %>% dplyr::bind_cols(resrl) }
)
boot_parest_v2
boot_estimators
boot_estimators[[1]]
boot_estimators[[1]]$mle
boot_parest_v2
boot_estimators[[1]]$rl_boot
boot_sl(sluniq = sluniq_wb, slorig = full_slbm, blcksz = blcksz, nKblocks = .nKblocks,
B = 10, type = "stationary", ref_gmst = 0, Tyrl = c(50, 100), start_vals = estim_lo$mle,
scale.link = make.link("identity"), reltol = 1e-09, estimate_RL = "both")
boot_estimators[[1]]$rl_boot
boot_parest_v2 <- purrr::map_dfr(boot_estimators, ~
{ resrl <- dplyr::left_join(.x$rl_boot, .x$rlvarV2,
by = c("Year"))
respars <- dplyr::tibble(
data.frame(t(.x$mle), conv = .x$conv),
CovestV = list(.x$V2))
respars %>% dplyr::bind_cols(resrl) }
)
boot_parest_v2
boot_estimators[[1]]$rl_boot
boot_estimators[[2]]$rl_boot
boot_estimators[[2]]$mle
boot_estimators[[2]]$rlvarV2
boot_estimators[[10]]$rlvarV2
boot_estimators[[10]]$mle
boot_parest_v2
devtools::load_all()
devtools::document()
devtools::build(vignettes = FALSE)
devtools::build_manual()
dates <- seq(as.POSIXct("2000-01-01 00:00:00"),
as.POSIXct("2005-12-31 23:00:00"),by = 'hour')
prec <- rgamma(length(dates), shape = 0.1)
devtools::load_all()
prec <- rgamma(length(dates), shape = 0.1)
ExampleData <- data.frame(datetime = dates, prec = prec)
aggdat <-  fun_aggregate2df(ExampleData, ds = c(1,5,8))
aggdat
aggs[1, ]$aggs
aggdat[1, ]$aggs
head(aggdat[1, ]$aggs )
bb <- compute_conc_bm_id(aggdat, nlo = 2, testset = "consec")
#'
bb
aggdat
dates <- seq(as.POSIXct("2000-01-01 00:00:00"),
as.POSIXct("2005-12-31 23:00:00"),by = 'hour')
prec <- rgamma(length(dates), shape = 0.1)
ExampleData <- data.frame(datetime = dates, prec = prec)
aggdat <-  fun_aggregate2df(ExampleData, ds = c(1,5,8))
compute_conc_bm_id(aggdat, nlo = 3, testset = "consec")
dates <- seq(as.POSIXct("2000-01-01 00:00:00"),
as.POSIXct("2008-12-31 23:00:00"),by = 'hour')
prec <- rgamma(length(dates), shape = 0.1)
ExampleData <- data.frame(datetime = dates, prec = prec)
aggdat <-  fun_aggregate2df(ExampleData, ds = c(1,5,8))
compute_conc_bm_id(aggdat, nlo = 2, testset = "consec")
compute_conc_bm_id(aggdat, nlo = 3, testset = "consec")
dates <- seq(as.POSIXct("2000-01-01 00:00:00"),
as.POSIXct("2010-12-31 23:00:00"),by = 'hour')
prec <- rgamma(length(dates), shape = 0.1)
ExampleData <- data.frame(datetime = dates, prec = prec)
aggdat <-  fun_aggregate2df(ExampleData, ds = c(1,5,8))
compute_conc_bm_id(aggdat, nlo = 3, testset = "consec")
devtools::document()
?fgev_gom
?fgev_hom
devtools::document()
?fit_gev_univ
devtools::document()
devtools::document()
blcksz <- 90
ny <- 100
xx <-  evd::rgpd(ny*blcksz, shape = -0.2) + 2*rep(1:ny/ny, each = blcksz)
df.xx <- data.frame(Station = "X1", Obs = xx)
k <- 3
ndata <- blcksz * ny
.nKblocks <- ceiling(ndata/(k*blcksz))
indexblock <- data.frame(blockind = c(rep(1:(.nKblocks-1), each = k*blcksz),
rep(.nKblocks, ndata - k*blcksz*(.nKblocks-1))),
obsind = 1:ndata)
sluniq_wb <- get_uniq_bm_boot(df.xx, blcksz = blcksz, K = k, indexblock = indexblock,
temp_cvrt = rep(1:ny/ny, each = blcksz), looplastblock = TRUE,
returnfullsamp = TRUE)
full_slbm <- sluniq_wb %>% dplyr::select(-uniq_data)
sluniq_wb <- sluniq_wb %>% dplyr::select(-full_data)
estim_lo <- slbm::fit_gev_univ(tidyr::unnest(sluniq_wb, cols = uniq_data),
type = "shift", hessian = TRUE)
boot_sl(sluniq = sluniq_wb, slorig = full_slbm, blcksz = blcksz, nKblocks = .nKblocks,
B = 10, type = "shift", ref_gmst = (c(0.8, 0.9)), Tyrl = c(50, 100), start_vals = estim_lo$mle,
scale.link = make.link("identity"), reltol = 1e-09, estimate_RL = TRUE)
devtools::load_all()
blcksz <- 90
ny <- 100
xx <-  evd::rgpd(ny*blcksz, shape = -0.2) + 2*rep(1:ny/ny, each = blcksz)
df.xx <- data.frame(Station = "X1", Obs = xx)
k <- 3
ndata <- blcksz * ny
.nKblocks <- ceiling(ndata/(k*blcksz))
indexblock <- data.frame(blockind = c(rep(1:(.nKblocks-1), each = k*blcksz),
rep(.nKblocks, ndata - k*blcksz*(.nKblocks-1))),
obsind = 1:ndata)
sluniq_wb <- get_uniq_bm_boot(df.xx, blcksz = blcksz, K = k, indexblock = indexblock,
temp_cvrt = rep(1:ny/ny, each = blcksz), looplastblock = TRUE,
returnfullsamp = TRUE)
full_slbm <- sluniq_wb %>% dplyr::select(-uniq_data)
sluniq_wb <- sluniq_wb %>% dplyr::select(-full_data)
estim_lo <- slbm::fit_gev_univ(tidyr::unnest(sluniq_wb, cols = uniq_data),
type = "shift", hessian = TRUE)
boot_sl(sluniq = sluniq_wb, slorig = full_slbm, blcksz = blcksz, nKblocks = .nKblocks,
B = 10, type = "shift", ref_gmst = (c(0.8, 0.9)), Tyrl = c(50, 100), start_vals = estim_lo$mle,
scale.link = make.link("identity"), reltol = 1e-09, estimate_RL = TRUE)
devtools::load_all()
devtools::document()
devtools::build_manual()
devtools::build_manual()
blcksz <- 90
ny <- 50
## with a shift in location
yy <- evd::rgpd(ny*blcksz, shape = 0.2) + 2*rep(1:ny/ny, each = blcksz)
yy <- evd::rgpd(ny*blcksz, shape = 0.2) + 2*rep(1:ny/ny, each = blcksz)
ci_student_boot_sl(yy, blcksz = 90, temp.cov = rep(1:ny/ny, each = blcksz),
B = 100, type = "shift", ref_gmst = c(0.5, 0.95), Kblock = 4)
cires <- ci_student_boot_sl(yy, blcksz = 90, temp.cov = rep(1:ny/ny, each = blcksz),
B = 100, type = "shift", ref_gmst = c(0.5, 0.95), Kblock = 4)
cires
cires <- ci_student_boot_sl(yy, blcksz = 90, temp.cov = rep(1:ny/ny, each = blcksz),
B = 100, type = "shift", ref_gmst = c(0.5, 0.95), Kblock = 4, estimate_RL = "both")
cires
cires <- ci_student_boot_sl(yy, blcksz = 90, temp.cov = rep(1:ny/ny, each = blcksz),
B = 100, type = "shift", ref_gmst = c(0.5, 0.95), Kblock = 4, estimate_RL = F)
cires
length(cires)
unlist(cires)
cires
unnest(cires)
cires$res_params
devtools
devtools::document()
vignettes(slbm)
vignette("slbm")
blcksz <- 90
ny <- 50
## with a shift in location
yy <- evd::rgpd(ny*blcksz, shape = 0.2) + 2*rep(1:ny/ny, each = blcksz)
ci_student_boot_sl(yy, blcksz = 90, temp.cov = rep(1:ny/ny, each = blcksz),
B = 100, type = "shift", ref_gmst = c(0.5, 0.95), Kblock = 4)
get_agg_bm
#' @examples dates <- seq(as.POSIXct("2000-01-01 00:00:00"),
as.POSIXct("2001-12-31 23:00:00"),by = 'hour')
prec <- rgamma(length(dates), shape = 0.1)
dates <- seq(as.POSIXct("2000-01-01 00:00:00"),
as.POSIXct("2001-12-31 23:00:00"),by = 'hour')
prec <- rgamma(length(dates), shape = 0.1)
ExampleData <- data.frame(datetime = dates, prec = prec)
fun_aggregate2df(ExampleData, ds = c(1,2,4,8,16, 24, 48))
est_var_chain
xx <- evd::rgpd(90*100, shape = 0.2) + 2*rep(1:100/100, each = 90)
## temporal covariate for sliding BM
temp_cvrt <- rep(1:100/100, each = 90)[1:(90*100 - 90 +1)]
bms <- get_uniq_bm(xx, 90, temp_cvrt = temp_cvrt, looplastblock = FALSE)
## full sample of sliding for estimaing the covariance matrix
slbm <- blockmax(xx, r = 90, "sliding")
estim <- fit_gev_univ(data = bms, type = "shift", hessian = TRUE)
estim
est_var_chain(slbm, est_par = estim, blcksz = 90, temp.cov = temp.cvrt,
type = "shift")
temp_cvrt <- rep(1:100/100, each = 90)[1:(90*100 - 90 +1)]
## compute sample of uniuqe sliding BM
bms <- get_uniq_bm(xx, 90, temp_cvrt = temp_cvrt, looplastblock = FALSE)
## full sample of sliding for estimaing the covariance matrix
slbm <- blockmax(xx, r = 90, "sliding")
estim <- fit_gev_univ(data = bms, type = "shift", hessian = TRUE)
est_var_chain(slbm, est_par = estim, blcksz = 90, temp.cov = temp.cvrt,
type = "shift")
est_var_chain(slbm, est_par = estim, blcksz = 90, temp.cov = temp_cvrt,
type = "shift")
type = "shift", varmeth = "V2")
est_var_chain(slbm, est_par = estim, blcksz = 90, temp.cov = temp_cvrt,
type = "shift", varmeth = "V2")
score.fun
View(estim_lo)
#' ## compute sample of uniuqe sliding BM
#' bms <- get_uniq_bm(xx, 90, temp_cvrt = temp_cvrt, looplastblock = FALSE)
#'
#' ## full sample of sliding for estimaing the covariance matrix
#' slbm <- blockmax(xx, r = 90, "sliding")
#' estim <- fit_gev_univ(data = bms, type = "shift", hessian = TRUE)
#'
#' est_var_chain(slbm, est_par = estim, blcksz = 90, temp.cov = temp_cvrt,
#' type = "shift", varmeth = "V2")
#'
est_var_chain <- function(orig_slbm, est_par, blcksz,  temp.cov =  NULL,
type = "shift",
varmeth = "both", ...) {
add.args <- list(...)
nsl <- length(orig_slbm)
k <-  nsl /blcksz
k <- ifelse(k == floor(k), k, floor(k))
useobs <- k*blcksz
if(!(type %in% c("scale", "shift"))) {
stop("Type must be one of 'scale', 'shift'.")
}
if(is.null(est_par$hessian)) { stop("Hessian of log likelihood is missing.")}
temp_cvrt_sl <- temp.cov[1:length(orig_slbm)]
Y <- score.fun(orig_slbm, theta =  est_par$mle, temp.cov = temp_cvrt_sl,
chain = TRUE,
type = type, rel_trend = add.args$rel_trend)
if(type == "scale") {
temp_cvrt_score <- temp.cov[1:ncol(Y)]
sigma0 <- est_par$mle[2]
alpha0 <- est_par$mle[4]
mu0 <- est_par$mle[1]
if(add.args$rel_trend) {
sigmat <- sigma0*exp(alpha0/mu0*temp_cvrt_score)
}
else {
sigmat <- sigma0*exp(alpha0*temp_cvrt_score)
}
## Because of scaling with T_\sigma(ct)^{-1}
Y[1, ] <- Y[1,]*sigmat
Y[2, ] <- Y[2, ]*sigmat
}
fishest <- est_par$hessian
fishestinv <- tryCatch(solve(fishest), error = function(a) array(dim = c(4,4)))
# list with covariance matrices
Gammahat <- compute_cov_stat_4chain(Y = Y, varmeth = varmeth, k = k, useobs = useobs, blcksz = blcksz)
purrr::map(Gammahat, ~ compute_cov_nonstat_chain(.x, type = type, temp_cvrt = temp_cvrt_sl,
Jinv = fishestinv,
rel_trend = add.args$rel_trend,
param = est_par$mle))
}
sluniq_wb
bms
get_uniq_bm()
get_uniq_bm
dates <- seq(as.POSIXct("2000-01-01 00:00:00"),
as.POSIXct("2020-12-31 23:00:00"),by = 'hour')
prec <- rgamma(length(dates), shape = 0.1)
example_data <- data.frame(datetime = dates, prec = prec)
agbm <- get_agg_bm(example_data, ds = c(1,2,4,8,16, 24, 48))
agdf <- fun_aggregate2df(example_data, ds = c(1,2,4,8,16, 24, 48))
concbm <- compute_conc_bm_id(agdf, testset = "consec")
cvres <- fit_dgev_cv_qs(agbm, concbm,  ds = c(1,4,8, 24))
# compute mean quantile scores based on cross-validation:
cvres
cvres %>% dplyr::select( - c(mut, sigma0, shape, eta, conv, Testdata)) %>%
dplyr::group_by(ds, ps, estimator) %>%
dplyr::summarise(MQS = mean(quant_score), .groups = "drop")
cvres
browseVignettes()
browseVignettes("slbm")
library(slbm)
library(dplyr)
library(tidyr)
library(ggplot2)
dailyAach$Aachen
rm(list = ls())
devtools::load_all()
data("GMST")
data("DailyTempNRW")
# extract observations from Aachen along with the Date of observation.
dailyAach <- DailyTempNRW$TimeSeries %>% select(Datetime, Aachen)
# plot the data
ggplot(dailyAach, aes( x = Datetime, y = Aachen)) + geom_line()
#  in the plot we see that from 2011 onwards there is no data,
# so we choose only years up to 2010:
dailyAach <-  dailyAach %>% filter(lubridate::year(Datetime) <= 2010)
anyNA(dailyAach) # no NA's left
# first and last year with observations:
fl_year <- c(min(lubridate::year(dailyAach$Datetime)), max(lubridate::year(dailyAach$Datetime)))
gmst <- GMST %>% filter(Year >= fl_year[1], Year <= fl_year[2])
blcksz <- 92
refgmst <- gmst %>% filter(Year %in% c(1970, 2010))
set.seed(1)
res_shift <- ci_student_boot_sl(yy = dailyAach$Aachen, blcksz = blcksz,
temp.cov = rep(gmst$smoothedGMST, each = blcksz),
B = 200, type = "shift", Tyrl = 100, Kblock = 4,
ref_gmst = refgmst$smoothedGMST, estimate_RL = "both"
)
res_shift$res_rl  # results for RL estimation
ci_student_boot_sl(yy = dailyAach$Aachen, blcksz = blcksz,
temp.cov = rep(gmst$smoothedGMST, each = blcksz),
B = 200, type = "shift", Tyrl = 100, Kblock = 4,
ref_gmst = refgmst$smoothedGMST, estimate_RL = "both"
)
gmst$smoothedGMST
rep(gmst$smoothedGMST, each = blcksz)
refgmst$smoothedGMST
ci_student_boot_sl(yy = dailyAach$Aachen, blcksz = blcksz,
temp.cov = rep(gmst$smoothedGMST, each = blcksz),
B = 200, type = "shift", Tyrl = 100, Kblock = 4,
ref_gmst = refgmst$smoothedGMST, estimate_RL = "both"
)
dailyAach$Aachen
res_shift <- ci_student_boot_sl(x = dailyAach$Aachen, blcksz = blcksz,
temp.cov = rep(gmst$smoothedGMST, each = blcksz),
B = 200, type = "shift", Tyrl = 100, Kblock = 4,
ref_gmst = refgmst$smoothedGMST, estimate_RL = "both"
)
res_shift <- ci_student_boot_sl(x = dailyAach$Aachen, blcksz = blcksz,
temp.cov = rep(gmst$smoothedGMST, each = blcksz),
B = 200, type = "shift", Tyrl = 100, Kblock = 4,
ref_gmst = refgmst$smoothedGMST, estimate_RL = "both"
)
res_shift$res_par  # results for parameter estimation
res_shift
res_shift$res_par  # results for parameter estimation
res_shift$res_rl  # results for RL estimation
set.seed(1)
res_stationary <- ci_student_boot_sl(x = dailyAach$Aachen, blcksz = blcksz,
B = 200, type = "stationary", Tyrl = 100, Kblock = 4,
estimate_RL = "both"
)
res_stationary$res_par  # results for parameter estimation
res_stationary$res_rl  # results for RL estimation
res_stationary$res_par  # results for parameter estimation
data("dailyPrec")
ggplot(dailyPrec, aes( x = Date, y = cumPrec)) + geom_line()
summerobs <- (dailyPrec %>% filter(lubridate::month(Date) %in% c(6,7,8)))
years_avail <- unique(lubridate::year(summerobs$Date))
gmst <- GMST %>% filter(Year %in% years_avail)
blcksz <- 92
refgmst <- gmst %>% filter(Year %in% c(1970, 2010))
refgmst <- gmst %>% filter(Year %in% c(1970, 2010))
res_scale <- ci_student_boot_sl(x = summerobs$cumPrec, blcksz = blcksz,
temp.cov = rep(gmst$smoothedGMST, each = blcksz),
B = 200, type = "scale", Tyrl = 100, Kblock = 4,
ref_gmst = refgmst$smoothedGMST, estimate_RL = "both",
rel_trend = FALSE
)
res_scale$res_par  # results for parameter estimation
res_scale$res_rl  # results for RL estimation
slbm::ci_student_boot_sl
slbm::ci_student_boot_sl(x = dailyAach$Aachen, blcksz = blcksz,
temp.cov = rep(gmst$smoothedGMST, each = blcksz),
B = 200, type = "shift", Tyrl = 100, Kblock = 4,
ref_gmst = refgmst$smoothedGMST, estimate_RL = "both"
)
slbm::ci_student_boot_sl(x = dailyAach$Aachen, blcksz = blcksz,
temp.cov = rep(gmst$smoothedGMST, each = blcksz),
B = 200, type = "shift", Tyrl = 100, Kblock = 4,
ref_gmst = refgmst$smoothedGMST, estimate_RL = "both"
)
blcksz <- 92
refgmst <- gmst %>% filter(Year %in% c(1970, 2010))
set.seed(1)
slbm::ci_student_boot_sl(x = dailyAach$Aachen, blcksz = blcksz,
temp.cov = rep(gmst$smoothedGMST, each = blcksz),
B = 200, type = "shift", Tyrl = 100, Kblock = 4,
ref_gmst = refgmst$smoothedGMST, estimate_RL = "both"
)
devtools::build(vignettes = )
devtools::build(vignettes = F)
devtools::install(build_vignettes = FALSE)
tools::buildVignettes(dir = ".", tangle=TRUE)
file.copy(dir("vignettes", full.names=TRUE), "inst/doc", overwrite=TRUE)
tools::buildVignettes(dir = ".", tangle=TRUE)
tools::buildVignettes(dir = ".", tangle=TRUE)
tools::buildVignettes(dir = ".", tangle=TRUE)
