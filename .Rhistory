dplyr::select(-Datetime)
bmx
bmx %>% group_by(Station, GMST, slbm) %>% summarise( n = n())
bmx %>% group_by(Station, GMST, slbm) %>% summarise( n = n(), .groups = "drop") %>%
group_by(Statio) %>% nest()
group_by(Station) %>% nest()
bmx %>% group_by(Station, GMST, slbm) %>% summarise( n = n(), .groups = "drop") %>%
group_by(Station) %>% nest()
bmx %>% group_by(Station, GMST, slbm) %>% summarise( n = n(), .groups = "drop") %>%
dqA
aa <- bmx %>% group_by(Station, GMST, slbm) %>% summarise( n = n(), .groups = "drop") %>%
group_by(Station) %>% nest()
aa
aa$data
bmx <- apply(data[ , 2:ndata],2,  blockmax, r = blcksz, "sliding")
bmx <- bmx %>% dplyr::bind_cols(data[1:nrow(bmx), 1])
bmx <- bmx %>% dplyr::right_join(temp_cvrt, by = c("Datetime"))
bmx <- bmx %>% tidyr::pivot_longer( 1:(ndata-1),
names_to = "Station", values_to = "slbm") %>%
dplyr::select(-Datetime)
bmx
#'
#' yy <- data.frame(xx) %>% tidyr::pivot_longer( 1:2, names_to = "Station", values_to = "Obs")
#' ##############################
#'
#' # define a temporal covariate that is constant over a block of length blcksz
#' temp_cvrt <- rep(1:10/10, each = blcksz)[1:(9*blcksz + 1)]
#'
#' ##### apply function #####
#' bms <- get_uniq_bm(yy, blcksz, temp_cvrt = temp_cvrt )
#'
get_uniq_bm <- function(data, blcksz, temp_cvrt = NULL, ...){
aa <- bmx %>% group_by(Station, GMST, slbm) %>% summarise( n = n(), .groups = "drop") %>%  \0
#'
#' yy <- data.frame(xx) %>% tidyr::pivot_longer( 1:2, names_to = "Station", values_to = "Obs")
#' ##############################
#'
#' # define a temporal covariate that is constant over a block of length blcksz
#' temp_cvrt <- rep(1:10/10, each = blcksz)[1:(9*blcksz + 1)]
#'
#' ##### apply function #####
#' bms <- get_uniq_bm(yy, blcksz, temp_cvrt = temp_cvrt )
#'
get_uniq_bm <- function(data, blcksz, temp_cvrt = NULL, ...){
\9
#'
#' yy <- data.frame(xx) %>% tidyr::pivot_longer( 1:2, names_to = "Station", values_to = "Obs")
#' ##############################
#'
#' # define a temporal covariate that is constant over a block of length blcksz
#' temp_cvrt <- rep(1:10/10, each = blcksz)[1:(9*blcksz + 1)]
#'
#' ##### apply function #####
#' bms <- get_uniq_bm(yy, blcksz, temp_cvrt = temp_cvrt )
#'
get_uniq_bm <- function(data, blcksz, temp_cvrt = NULL, ...){
\}
#'
#' yy <- data.frame(xx) %>% tidyr::pivot_longer( 1:2, names_to = "Station", values_to = "Obs")
#' ##############################
#'
#' # define a temporal covariate that is constant over a block of length blcksz
#' temp_cvrt <- rep(1:10/10, each = blcksz)[1:(9*blcksz + 1)]
#'
#' ##### apply function #####
#' bms <- get_uniq_bm(yy, blcksz, temp_cvrt = temp_cvrt )
#'
get_uniq_bm <- function(data, blcksz, temp_cvrt = NULL, ...){
\}
get_uniq_bm <- function(data, blcksz, temp_cvrt = NULL, ...){
if(!is.null(temp_cvrt)) {
ndata <- ncol(data)
bmx <- apply(data[ , 2:ndata],2,  blockmax, r = blcksz, "sliding")
bmx <- bmx %>% dplyr::bind_cols(data[1:nrow(bmx), 1])
bmx <- bmx %>% dplyr::right_join(temp_cvrt, by = c("Datetime"))
bmx <- bmx %>% tidyr::pivot_longer( 1:(ndata-1),
names_to = "Station", values_to = "slbm") %>%
dplyr::select(-Datetime)
bmx %>% dplyr::group_by(Station, slbm, {{ ... }} ) %>%
dplyr::summarise( n = n(), .groups = "drop") %>%
dplyr::group_by(Station) %>%
tidyr::nest()
} else {
data %>% dplyr::group_by(Station) %>%
tidyr::nest() %>%
dplyr::mutate( uniq_data  = purrr::map( .x =data, .f = function(.x){
bmx <- blockmax(.x$Obs, r =blcksz, "sliding")
bmx <- data.frame(slbm = bmx)
bmx %>%  dplyr::group_by(slbm) %>%
dplyr::summarise(n  = n()) } )) %>%
dplyr::ungroup() %>%
dplyr::select(-data)
}
}
data
tempcvsl
names(tempcvls)
names(tempcvsl)
tempcvsl <- rename(tempcvsl, "Datetime" = "Index")
get_uniq_bm(data, 92, tempcvsl, GMST)
load_all()
rm(list = c("get_uniq_bm"))
load_all()
get_uniq_bm(data, 92, tempcvsl, GMST)
bmx
...
bmx %>% dplyr::group_by(Station, slbm, {{ ... }} ) %>%
dplyr::summarise( n = n(), .groups = "drop") %>%
dplyr::group_by(Station) %>%
tidyr::nest()
load_all()
get_uniq_bm(data, 92, temp_cvrt = tempcvsl, tempvar = GMST)
bmx %>% dplyr::group_by(Station, slbm, {{ tempvar }} ) %>%
dplyr::summarise( n = n(), .groups = "drop") %>%
dplyr::group_by(Station) %>%
tidyr::nest()
#'
#' yy <- data.frame(xx) %>% tidyr::pivot_longer( 1:2, names_to = "Station", values_to = "Obs")
#' ##############################
#'
#' # define a temporal covariate that is constant over a block of length blcksz
#' temp_cvrt <- rep(1:10/10, each = blcksz)[1:(9*blcksz + 1)]
#'
#' ##### apply function #####
#' bms <- get_uniq_bm(yy, blcksz, temp_cvrt = temp_cvrt )
#'
get_uniq_bm <- function(data, blcksz, temp_cvrt = NULL, tempvar = NULL){
\}
load_all()
#'
#' yy <- data.frame(xx) %>% tidyr::pivot_longer( 1:2, names_to = "Station", values_to = "Obs")
#' ##############################
#'
#' # define a temporal covariate that is constant over a block of length blcksz
#' temp_cvrt <- rep(1:10/10, each = blcksz)[1:(9*blcksz + 1)]
#'
#' ##### apply function #####
#' bms <- get_uniq_bm(yy, blcksz, temp_cvrt = temp_cvrt )
#'
get_uniq_bm <- function(data, blcksz, temp_cvrt = NULL, tempvar = NULL){
\}
load_all()
get_uniq_bm(data, 92, temp_cvrt = tempcvsl, tempvar = GMST)
load_all()
get_uniq_bm(data, 92)
matdata
yy
matdata
bmuniq <- get_uniq_bm(matdata, 92, temp_cvrt = tempcvsl, tempvar = GMST)
tempcvsl
bmuniq <- get_uniq_bm(matdata, 92, temp_cvrt = tempcvsl, tempvar = GMST)
matdata
matdata <- rename(matdata, "Datetime" = "MESS_DATUM")
bmuniq <- get_uniq_bm(matdata, 92, temp_cvrt = tempcvsl, tempvar = GMST)
bmuniq
#' ##### disjoint block maxima are used for computing starting values:
djbm <- apply(as.matrix(matdata[, 2:10]), 2, blockmax, r = 92, "disjoint")
plot.ts(djbm)
fit_spgev_sl(data = bmuniq, loc.sp.form = ~ lon + lat,
scale.sp.form = ~ lon ,
loc.temp.form = ~ GMST, spat.cov = spatcov,
datastart = djbm, st_val_meth = "LeastSq",
temp.cov = tempcv$smoothedGMST,
scale.link = make.link("identity"))
bmuniq
bmuniq$data
load_all()
bmuniq <- get_uniq_bm(matdata, 92, temp_cvrt = tempcvsl, tempvar = GMST)
bmuniq
bmuniq$uniq_data
fit_spgev_sl(data = bmuniq, loc.sp.form = ~ lon + lat,
scale.sp.form = ~ lon ,
loc.temp.form = ~ GMST, spat.cov = spatcov,
datastart = djbm, st_val_meth = "LeastSq",
temp.cov = tempcv$smoothedGMST,
scale.link = make.link("identity"))
load_all()
bmuniq <- get_uniq_bm(matdata, 92, temp_cvrt = tempcvsl, tempvar = GMST)
load_all()
bmuniq <- get_uniq_bm(matdata, 92, temp_cvrt = tempcvsl, tempvar = GMST)
bmuniq <- get_uniq_bm(matdata, 92, temp.cov= tempcvsl, tempvar = GMST)
load_all()
bmuniq <- get_uniq_bm(matdata, 92, temp.cov= tempcvsl, tempvar = GMST)
bmx
tempvar
GMST
{{ tempvar }}
bmx <- rename(bmx, "temp_cvrt" = {{ tempvar }} )
bmx
rename(bmx, "temp_cvrt" = {{ tempvar }} )
rename(bmx, "temp_cvrt" = {{ tempvar }} )
rename(bmx, "temp_cvrt" = {{ tempvar }} )
rename(bmx, "temp_cvrt" = {{ tempvar }} )
Q
load_all()
bmuniq <- get_uniq_bm(matdata, 92, temp.cov= tempcvsl, tempvar = GMST)
bmx
nametempcvrt <- names(bmx %>% select( {{ tempvar }}))
nametempcvrt
bmx <- rename(bmx, "temp_cvrt" = nametempcvrt )
bmx
bmx %>% dplyr::group_by(Station, slbm, temp_cvrt ) %>%
dplyr::summarise( n = n(), .groups = "drop") %>%
dplyr::group_by(Station) %>%
tidyr::nest(uniq_data = c(slbm, temp_cvrt, n)) %>%
dplyr::ungroup()
bmx$uniq_data
load_all()
bmuniq <- get_uniq_bm(matdata, 92, temp.cov= tempcvsl, tempvar = GMST)
bmuniq
bmuniq$uniq_data
fit_spgev_sl(data = bmuniq, loc.sp.form = ~ lon + lat,
scale.sp.form = ~ lon ,
loc.temp.form = ~ GMST, spat.cov = spatcov,
datastart = djbm, st_val_meth = "LeastSq",
temp.cov = tempcv$smoothedGMST,
scale.link = make.link("identity"))
fit_spgev_sl(data = bmuniq, loc.sp.form = ~ lon + lat,
scale.sp.form = ~ lon ,
loc.temp.form = ~ GMST, spat.cov = spatcov,
datastart = djbm, st_val_meth = "LeastSqTemp",
temp.cov = tempcv$smoothedGMST,
scale.link = make.link("identity"))
bmuniq
plot.ts(bmuniq[1, ]$uniq_data)
plot.ts(bmuniq[1, ]$uniq_data[[1]])
plot.ts(bmuniq[2, ]$uniq_data[[1]])
plot.ts(bmuniq[3, ]$uniq_data[[1]])
bmuniq[1, ]$uniq_data
a <- "c"
load_all()
load(paste0(getwd(), "/DWDdata/ExampleTemperature.RData"))
spatcov
tempcvsl
tempcvsl %>% head()
matdata
matdata <- matdata %>% rename("Datetime" = "MESS_DATUM")
matdata
bmuniq <- get_uniq_bm(matdata, blcksz = 92, temp.cov = tempcvsl, tempvar = "GMST")
bmuniq
bmuniq %>% mutate( Plot = purrr::map(uniq_data,
~ ggplot( .x)))
bmuniq$uniq_data
bmuniq %>% mutate( Plot = purrr::map(uniq_data,
~ ggplot( .x, aes( x = seq_along(.x)))))
bmuniq %>% mutate( Plot = purrr::map(uniq_data,
~ ggplot( .x, aes( x = seq_along(.x), y = slbm)) +
geom_line()))
pls <- bmuniq %>% mutate( Plot = purrr::map(uniq_data,
~ ggplot( .x, aes( x = seq_along(.x), y = slbm)) +
geom_line()))
pls[1, ]$Plot
pls <- bmuniq %>% mutate( Plot = purrr::map(uniq_data,
~ ggplot( .x, aes( x = 1:nrow(.x), y = slbm)) +
geom_line()))
pls[1, ]$Plot
pls <- bmuniq %>% mutate( Plot = purrr::map(uniq_data,
~ ggplot( .x, aes( x = 1:nrow(.x), y = temp_cvrt)) +
geom_line()))
pls[1, ]$Plot
ggpubr::ggarrange(plotlist = pls$Plot)
pls <- bmuniq %>% mutate( Plot = purrr::map(uniq_data,
~ ggplot( .x, aes( x = temp_cvrt, y = slbm)) +
geom_line()))
ggpubr::ggarrange(plotlist = pls$Plot)
bmuniq
bmuniq[1, ]$uniq_data
matdata
matdata[, 1:2]
matdata[, 2]
slaac <- blockmax(matdata$Aachen , r = 92, "sliding")
slaac
bmuniq
bmuniq[1, ]$uu
slaac2 <- bmuniq[1, ]$uniq_data
slaac2
slaac
slaac1 <- slaac %>% unique()
slaac1
slaax
slaac
which(diff(slaac) > 0 )
diff(slaac)
which(diff(slaac) > 0 )
indices <- which(diff(slaac) > 0 )
tempcvsl[indices, ]
tempcvsl[indices, ] %>% nrow()
nrow(slaac1)
length(slaac1)
length(indices)
load_all()
matdata
get_uniq_bm(matdata[, 1:2], 92, tempcvsl, GMST)
ndata <- ncol(data)
ndata
bmx <- apply(data[ , 2:ndata],2,  blockmax, r = blcksz, "sliding")
bmx <- bmx %>% dplyr::bind_cols(data[1:nrow(bmx), 1])
bmx <- bmx %>% dplyr::right_join(temp.cov, by = c("Datetime"))
bmx <- bmx %>% tidyr::pivot_longer( 1:(ndata-1),
names_to = "Station", values_to = "slbm") %>%
dplyr::select(-Datetime)
bmx
data
data %>% anyNA
data[is.na(data), ]
data[!complete.cases(data)]
data[!complete.cases(data), ]
tail(data)
bmx
tail(bmx)
bmx <- apply(data[ , 2:ndata],2,  blockmax, r = blcksz, "sliding")
bmx <- bmx %>% dplyr::bind_cols(data[1:nrow(bmx), 1])
bmx <- bmx %>% dplyr::right_join(temp.cov, by = c("Datetime"))
bmx
bmx <- bmx %>% tidyr::pivot_longer( 1:(ndata-1),
names_to = "Station", values_to = "slbm") %>%
dplyr::select(-Datetime)
bmx
nametempcvrt <- names(bmx %>% select( {{ tempvar }}))
bmx
bmx %>% select( {{ tempvar }})
tempvar
load_all()
get_uniq_bm(matdata[, 1:2], 92, tempcvsl, GMST)
aa <- get_uniq_bm(matdata[, 1:2], 92, tempcvsl, GMST)
aa
aa$uniq_data
aa$uniq_data[[1]]
aa$uniq_data[[1]] %>% tail()
aa$uniq_data[[1]] %>% filter(slbm >= 34)
aa$uniq_data[[1]] %>% filter(slbm >= 34.9)
bmuniq <- get_uniq_bm(matdata, blcksz = 92, temp.cov = tempcvsl, tempvar = "GMST")
bmuniq
pls <- bmuniq %>% mutate( Plot = purrr::map(uniq_data,
~ ggplot( .x, aes( y = slbm)) +
geom_boxplot()))
ggpubr::ggarrange(plotlist = pls$Plot)
bmuniq %>% unnest(cols = uniq_data)
bmuniq %>% unnest(cols = uniq_data) %>% summarise( slbm )
bmuniq %>% unnest(cols = uniq_data) %>% select( slbm ) %>% summary
bmuniq
djbm <- apply(as.matrix(matdata[, 2:10]), 2, blockmax, r = 92, "disjoint")
plot.ts(djbm)
fit_spgev_sl(data = bmuniq, loc.sp.form = ~ lon + lat,
scale.sp.form = ~ lon ,
loc.temp.form = ~ GMST, spat.cov = spatcov,
datastart = djbm, st_val_meth = "LeastSq",
temp.cov = tempcv$smoothedGMST,
scale.link = make.link("identity"))
fit_spgev_sl(data = bmuniq, loc.sp.form = ~ lon + lat,
scale.sp.form = ~ lon ,
loc.temp.form = ~ GMST, spat.cov = spatcov,
datastart = djbm, st_val_meth = "LeastSqTemp",
temp.cov = tempcv$smoothedGMST,
scale.link = make.link("identity"))
load_all()
fit_spgev_sl(data = bmuniq, loc.sp.form = ~ lon + lat,
scale.sp.form = ~ lon ,
loc.temp.form = ~ GMST, spat.cov = spatcov,
datastart = djbm, st_val_meth = "LeastSqTemp",
temp.cov = tempcv$smoothedGMST,
scale.link = make.link("identity"))
load_all()
fit_spgev_sl(data = bmuniq, loc.sp.form = ~ lon + lat,
scale.sp.form = ~ lon ,
loc.temp.form = ~ GMST, spat.cov = spatcov,
datastart = djbm, st_val_meth = "LeastSqTemp",
temp.cov = tempcv$smoothedGMST,
scale.link = make.link("identity"))
data <- data %>%
dplyr::mutate(MatLocTemp =  purrr::map(uniq_data, function(.x){
datatemp <-  data.frame(.x$temp_cvrt)
colnames(datatemp) <- all.vars("loc.temp.form")
model.matrix(loc.temp.form,
model.frame(loc.temp.form,
data = datatemp,
na.action = na.pass))
}
))
data
data$uniq_data
all.vars("loc.temp.form")
data <- data %>%
dplyr::mutate(MatLocTemp =  purrr::map(uniq_data, function(.x){
datatemp <-  data.frame(.x$temp_cvrt)
colnames(datatemp) <- all.vars(loc.temp.form)
model.matrix(loc.temp.form,
model.frame(loc.temp.form,
data = datatemp,
na.action = na.pass))
}
))
data
data$MatLocTemp
load_all()
scale.link = make.link("identity"))
fit_spgev_sl(data = bmuniq, loc.sp.form = ~ lon + lat,
scale.sp.form = ~ lon ,
loc.temp.form = ~ GMST, spat.cov = spatcov,
datastart = djbm, st_val_meth = "LeastSqTemp",
temp.cov = tempcv$smoothedGMST,
scale.link = make.link("identity"))
data("ExampleData")
data("GMST")
tempcv <- GMST %>% dplyr::filter(Year %in% c(1980:2019))
tempcvsl <- rep(tempcv$smoothedGMST, each = 90)[1:(39*90 +1)]
tempcvsl <- data.frame(GMST = tempcvsl)
set.seed(3)
spatial_cvrt <- data.frame(lat  = seq(0, 8, length = 8),
lon = runif(8), ele = runif(8))
ExampleData
?as.POSIXct()
dates <- seq(as.POSIXct("2001-01-01"),as.POSIXct("2010-12-31"),by = 'day')
dates
data("ExampleData")
data("GMST")
tempcv <- GMST %>% dplyr::filter(Year %in% c(1980:2019))
tempcvsl <- rep(tempcv$smoothedGMST, each = 90)[1:(39*90 +1)]
tempcvsl <- data.frame(GMST = tempcvsl)
set.seed(3)
spatial_cvrt <- data.frame(lat  = seq(0, 8, length = 8),
lon = runif(8), ele = runif(8))
dates <- seq(as.POSIXct("2001-01-01"),as.POSIXct("2010-12-31"),by = 'day')ncol()
ncol(ExampleData)
dates <- seq(as.POSIXct("1980-01-01"),as.POSIXct("2019-12-31"),by = 'day')
dates
dates <- seq(as.POSIXct.Date("1980-01-01"),as.POSIXct.Date("2019-12-31"),by = 'day')
?as.POSIXct.date
lubridate::month(dates)
dates <- data.frame(dates)
dates
dates <- rep(1:(90*40), each = 90)
dates
yy <- data.frame(Date = dates) %>% bind_cols(data.frame(ExampleData))
dim(ExampleData)
dim(dates)
length(dats)
length(dates)
dates <- rep(1:(40), each = 90)
yy <- data.frame(Date = dates) %>% bind_cols(data.frame(ExampleData))
yy
tempcvsl
tempcvsl <- data.frame(GMST = tempcvsl, Datetime = rep(1:(90*40), each = 40)[1:length(tempcvsl)]
\}
each = 40)[1:length(tempcvsl)])
rep(1:(90*40),
#'  each = 40)
rep(1:(90*40),
#'  each = 40)
rep(1:(90*40),
#'  each = 40)\}
\}
rep(1:(90*40),
each = 40)
length(tempcvsl)
tempcv <- GMST %>% dplyr::filter(Year %in% c(1980:2019))
tempcvsl <- rep(tempcv$smoothedGMST, each = 90)[1:(39*90 +1)]
tempcvsl
tempcvsl <- data.frame(GMST = tempcvsl, Datetime = rep(1:(90*40),
each = 40)[1:length(tempcvsl)])
tempcvsl
bmuniq <- get_uniq_bm(yy, 90, temp.cov = tempcvsl, tempvar = GMST)
head(tempcvsl)
head(yy)
yy <- data.frame(Datetime = dates) %>% bind_cols(data.frame(ExampleData))
bmuniq <- get_uniq_bm(yy, 90, temp.cov = tempcvsl, tempvar = GMST)
yy
head(yy)
head(tempcvsl)
bmuniq <- get_uniq_bm(yy, 90, temp.cov = tempcvsl, tempvar = GMST)
load_all()
bmuniq <- get_uniq_bm(yy, 90, temp.cov = tempcvsl, tempvar = GMST)
bmx <- apply(data[ , 2:ndata],2,  blockmax, r = blcksz, "sliding")
bmx <- bmx %>% dplyr::bind_cols(data[1:nrow(bmx), 1])
bmx
bmuniq <- get_uniq_bm(yy, 90, temp.cov = tempcvsl, tempvar = GMST)
bmx <- apply(data[ , 2:ndata],2,  blockmax, r = blcksz, "sliding")
bmx
head(data)
data[1:nrow(bmx), 1]
bmx <- bmx %>% dplyr::bind_cols(Datetime = data[1:nrow(bmx), 1])
bmx
bmx <- bmx %>% dplyr::right_join(temp.cov, by = c("Datetime"))
bmx
bmx <- bmx %>% tidyr::pivot_longer( 1:(ndata-1),
names_to = "Station", values_to = "slbm") %>%
dplyr::select(-Datetime)
nametempcvrt <- names(bmx %>% select( {{ tempvar }}))
bmx
nametempcvrt <- names(bmx %>% select( GMST ))
bmx <- rename(bmx, "temp_cvrt" = nametempcvrt )
bmx
bmx %>% dplyr::group_by(Station, slbm, temp_cvrt ) %>%
dplyr::summarise( n = n(), .groups = "drop") %>%
dplyr::group_by(Station) %>%
tidyr::nest(uniq_data = c(slbm, temp_cvrt, n)) %>%
dplyr::ungroup()
load_all()
bmuniq <- get_uniq_bm(yy, 90, temp.cov = tempcvsl, tempvar = GMST)
bmuniq
bmuniq$uniq_data[1, ]
bmuniq$uniq_data
bmuniq <- get_uniq_bm(matdata, 92, temp_cvrt = tempcvsl, tempvar = GMST)
yy <- data.frame(Datetime = dates) %>% bind_cols(data.frame(ExampleData))
bmuniq <- get_uniq_bm(yy, 90, temp.cov = tempcvsl, tempvar = GMST)
##### disjoint block maxima are used for computing starting values:
djbm <- apply(ExampleData, 2, blockmax, r = 90, "disjoint")
fit_spgev_sl(data = bmuniq, loc.sp.form = ~ lon + lat,
scale.sp.form = ~ lon +lat,
loc.temp.form = ~ GMST, spat.cov = spatial_cvrt,
datastart = djbm, st_val_meth = "LeastSqTemp",
temp.cov = tempcv$smoothedGMST)
