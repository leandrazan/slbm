if(abs(xi) < 1e-08){
scoreshape <- (1-u)*z^2/2- z
}
else{
scoreshape <- (1-u)*1/xi*(1/xi*log(1+xi*z)-z/(1+xi*z)) - z/(1+xi*z)
}
return(matrix(c(scoreloc0, scorescale, scoreshape, scoretemploc),
nrow = 4, byrow = TRUE))
}
if(type == "scale") {
mu0 <- theta["mu0"]
alpha0 <- theta["alpha"]
sigma0 <- theta["sigma0"]
xi <- theta["gamma"]
mut <- mu0*exp(alpha0*temp.cov/mu0)
sigmat <-  sigma0*exp(alpha0*temp.cov/mu0)
zt <- (x - mut)/sigmat
in_supp <- which(1+ xi*zt > 0)
zt <- zt[in_supp]
if(abs(xi) < 1e-08) {
ut <- exp(-zt)
}
else {
ut <- (1+xi *zt)^(-1/xi)
}
expo <- exp(alpha0*temp.cov/mu0)
dmu0ut <- ut^(xi +1)/sigmat*expo*(1 - alpha0*temp.cov/mu0^2)
dsigma0ut <- ut^(xi+1)/sigmat^2*x*expo
dalpha0ut <- ut^(xi+1)*(x - mut)*sigma0*expo*temp.cov/mu0/(sigmat^2)
scoreloc0 <- dmu0ut*( (xi +1)/ut -1)
scorescale <- dsigma0ut*(-1/sigmat -1 + (xi +1)/ut)
scorealpha <- dalpha0ut*(-1/sigmat - 1 + (xi+1)/ut)
if(abs(xi) < 1e-08){
scoreshape <- (1-ut)*zt^2/2- zt
}
else{
scoreshape <- (1-ut)*1/xi*(1/xi*log(1+xi*zt)-zt/(1+xi*zt)) - zt/(1+xi*zt)
}
return(matrix(c(scoreloc0, scorescale, scoreshape, scorealpha),
nrow = 4, byrow = TRUE))
}
}
aa <- score.function_wtrend(x = 4.51, theta = estsl$mle,
temp.cov = 0.73, type = "scale")
aa
numDeriv::grad( function(x){ - nll_expsc(params = c("loc0" =x,  #est_sl$mle[1],
"sigma0" = est_sl$mle[2],
"gamma" = est_sl$mle[3],
"alpha" = est_sl$mle[4]),
data = bms[11, ] )} ,
x =  est_sl$mle[1])
numDeriv::grad( function(x){ - nll_expsc(params = c("loc0" = est_sl$mle[1],
"sigma0" = x, # est_sl$mle[2],
"gamma" = est_sl$mle[3],
"alpha" = est_sl$mle[4]),
data = bms[11, ] )} ,
x =  est_sl$mle[2])
numDeriv::grad( function(x){ - nll_expsc(params = c("loc0" = est_sl$mle[1],
"sigma0" = est_sl$mle[2],
"gamma" = x, #est_sl$mle[3],
"alpha" = est_sl$mle[4]),
data = bms[11, ] )} ,
x =  est_sl$mle[3])
numDeriv::grad( function(x){ - nll_expsc(params = c("loc0" =x,  #est_sl$mle[1],
"sigma0" = est_sl$mle[2],
"gamma" = est_sl$mle[3],
"alpha" = x ) ,# est_sl$mle[4]),
data = bms[11, ] )} ,
x =  est_sl$mle[4])
numDeriv::grad( function(x){ - nll_expsc(params = c("loc0" = est_sl$mle[1],
"sigma0" = est_sl$mle[2],
"gamma" = est_sl$mle[3],
"alpha" = x ) ,# est_sl$mle[4]),
data = bms[11, ] )} ,
x =  est_sl$mle[4])
bms[11, ]
aa <- score.function_wtrend(x = 4.51, theta = est_sl$mle,
temp.cov = 0.73, type = "scale")
aa
est_sl <- fit_gev_expsc(data = bms)
estsl
aa <- score.function_wtrend(x = 4.51, theta = est_sl$mle,
temp.cov = 0.73, type = "scale")
aa
bms[1, ]
numDeriv::grad( function(x){ - nll_expsc(params = c("loc0" =x,  #est_sl$mle[1],
"sigma0" = est_sl$mle[2],
"gamma" = est_sl$mle[3],
"alpha" = est_sl$mle[4]),
data = bms[11, ] )} ,
x =  est_sl$mle[1])
numDeriv::grad( function(x){ - nll_expsc(params = c("loc0" = est_sl$mle[1],
"sigma0" = x, # est_sl$mle[2],
"gamma" = est_sl$mle[3],
"alpha" = est_sl$mle[4]),
data = bms[11, ] )} ,
x =  est_sl$mle[2])
nll_expsc(params = c("loc0" = est_sl$mle[1],
"sigma0" = est_sl$mle[2],
"gamma" = est_sl$mle[3],
"alpha" = est_sl$mle[4]),
data = bms[11, ] )
est_sl
score.function_wtrend <- function(x, theta, temp.cov, type = "shift") {
if(!(type %in% c("shift", "scale"))){ stop("Type must be either 'shift' or 'scale'.")}
if(type == "shift") {
mu0 <- theta["loc0"]
mu1 <- theta["tempLoc1"]
sigma <- theta["scale0"]
xi <- theta["shape"]
mu <- mu0 + mu1*temp.cov
z <- (x-mu)/sigma
in_supp <- which( (1+ xi*z) > 0)
z <- z[in_supp]
if(abs(xi) < 1e-08) {
u <- exp(-z)
}
else {
u <- (1+xi *z)^(-1/xi)
}
scoreloc0 <- (xi + 1 - u)/(sigma*(1+xi*z))
scoretemploc  <- (xi + 1 - u)/(sigma*(1+xi*z))*temp.cov
scorescale <- ((1-u)*z -1)/(sigma*(1+xi*z))
if(abs(xi) < 1e-08){
scoreshape <- (1-u)*z^2/2- z
}
else{
scoreshape <- (1-u)*1/xi*(1/xi*log(1+xi*z)-z/(1+xi*z)) - z/(1+xi*z)
}
return(matrix(c(scoreloc0, scorescale, scoreshape, scoretemploc),
nrow = 4, byrow = TRUE))
}
if(type == "scale") {
mu0 <- theta["mu0"]
alpha0 <- theta["alpha"]
sigma0 <- theta["sigma0"]
xi <- theta["gamma"]
mut <- mu0*exp(alpha0*temp.cov/mu0)
sigmat <-  sigma0*exp(alpha0*temp.cov/mu0)
zt <- (x - mut)/sigmat
in_supp <- which(1+ xi*zt > 0)
zt <- zt[in_supp]
if(abs(xi) < 1e-08) {
ut <- exp(-zt)
}
else {
ut <- (1+xi *zt)^(-1/xi)
}
expo <- exp(alpha0*temp.cov/mu0)
dmu0ut <- ut^(xi +1)/sigmat* (expo*(1 - alpha0*temp.cov/mu0) - (x - mut)*alpha0*temp.cov/mu0)
dsigma0ut <- ut^(xi+1)/sigmat^2*x*expo
dalpha0ut <- ut^(xi+1)*(x - mut)*sigma0*expo*temp.cov/mu0/(sigmat^2)
scoreloc0 <- dmu0ut*( (xi +1)/ut -1)
scorescale <- dsigma0ut*(-1/sigmat -1 + (xi +1)/ut)
scorealpha <- dalpha0ut*(-1/sigmat - 1 + (xi+1)/ut)
if(abs(xi) < 1e-08){
scoreshape <- (1-ut)*zt^2/2- zt
}
else{
scoreshape <- (1-ut)*1/xi*(1/xi*log(1+xi*zt)-zt/(1+xi*zt)) - zt/(1+xi*zt)
}
return(matrix(c(scoreloc0, scorescale, scoreshape, scorealpha),
nrow = 4, byrow = TRUE))
}
}
aa <- score.function_wtrend(x = 3.64, theta = est_sl$mle,
temp.cov = 0.15)
aa <- score.function_wtrend(x = 3.64, theta = est_sl$mle,
temp.cov = 0.15)
aa <- score.function_wtrend(x = 4.51, theta = est_sl$mle,
temp.cov = 0.73, type = "scale")
aa
numDeriv::grad( function(x){ - nll_expsc(params = c("loc0" =x,  #est_sl$mle[1],
"sigma0" = est_sl$mle[2],
"gamma" = est_sl$mle[3],
"alpha" = est_sl$mle[4]),
data = bms[11, ] )} ,
x =  est_sl$mle[1])
score.function_wtrend <- function(x, theta, temp.cov, type = "shift") {
if(!(type %in% c("shift", "scale"))){ stop("Type must be either 'shift' or 'scale'.")}
if(type == "shift") {
mu0 <- theta["loc0"]
mu1 <- theta["tempLoc1"]
sigma <- theta["scale0"]
xi <- theta["shape"]
mu <- mu0 + mu1*temp.cov
z <- (x-mu)/sigma
in_supp <- which( (1+ xi*z) > 0)
z <- z[in_supp]
if(abs(xi) < 1e-08) {
u <- exp(-z)
}
else {
u <- (1+xi *z)^(-1/xi)
}
scoreloc0 <- (xi + 1 - u)/(sigma*(1+xi*z))
scoretemploc  <- (xi + 1 - u)/(sigma*(1+xi*z))*temp.cov
scorescale <- ((1-u)*z -1)/(sigma*(1+xi*z))
if(abs(xi) < 1e-08){
scoreshape <- (1-u)*z^2/2- z
}
else{
scoreshape <- (1-u)*1/xi*(1/xi*log(1+xi*z)-z/(1+xi*z)) - z/(1+xi*z)
}
return(matrix(c(scoreloc0, scorescale, scoreshape, scoretemploc),
nrow = 4, byrow = TRUE))
}
if(type == "scale") {
mu0 <- theta["mu0"]
alpha0 <- theta["alpha"]
sigma0 <- theta["sigma0"]
xi <- theta["gamma"]
mut <- mu0*exp(alpha0*temp.cov/mu0)
sigmat <-  sigma0*exp(alpha0*temp.cov/mu0)
zt <- (x - mut)/sigmat
in_supp <- which(1+ xi*zt > 0)
zt <- zt[in_supp]
if(abs(xi) < 1e-08) {
ut <- exp(-zt)
}
else {
ut <- (1+xi *zt)^(-1/xi)
}
expo <- exp(alpha0*temp.cov/mu0)
dmu0ut <- ut^(xi +1)/sigmat* (expo*(1 - alpha0*temp.cov/mu0) - (x - mut)*alpha0*temp.cov/mu0)
dsigma0ut <- ut^(xi+1)/sigmat^2*x*expo
dalpha0ut <- ut^(xi+1)*(x - mut)*sigma0*expo*temp.cov/mu0/(sigmat^2)
scoreloc0 <- dmu0ut*( (xi +1)/ut -1) + alpha0*temp.cov*sigma0/(mu0*sigmat)*expo
scorescale <- dsigma0ut*(-1/sigmat -1 + (xi +1)/ut)
scorealpha <- dalpha0ut*(-1/sigmat - 1 + (xi+1)/ut)
if(abs(xi) < 1e-08){
scoreshape <- (1-ut)*zt^2/2- zt
}
else{
scoreshape <- (1-ut)*1/xi*(1/xi*log(1+xi*zt)-zt/(1+xi*zt)) - zt/(1+xi*zt)
}
return(matrix(c(scoreloc0, scorescale, scoreshape, scorealpha),
nrow = 4, byrow = TRUE))
}
}
aa <- score.function_wtrend(x = 4.51, theta = est_sl$mle,
temp.cov = 0.73, type = "scale")
aa
numDeriv::grad( function(x){ - nll_expsc(params = c("loc0" =x,  #est_sl$mle[1],
"sigma0" = est_sl$mle[2],
"gamma" = est_sl$mle[3],
"alpha" = est_sl$mle[4]),
data = bms[11, ] )} ,
x =  est_sl$mle[1])
score.function_wtrend <- function(x, theta, temp.cov, type = "shift") {
if(!(type %in% c("shift", "scale"))){ stop("Type must be either 'shift' or 'scale'.")}
if(type == "shift") {
mu0 <- theta["loc0"]
mu1 <- theta["tempLoc1"]
sigma <- theta["scale0"]
xi <- theta["shape"]
mu <- mu0 + mu1*temp.cov
z <- (x-mu)/sigma
in_supp <- which( (1+ xi*z) > 0)
z <- z[in_supp]
if(abs(xi) < 1e-08) {
u <- exp(-z)
}
else {
u <- (1+xi *z)^(-1/xi)
}
scoreloc0 <- (xi + 1 - u)/(sigma*(1+xi*z))
scoretemploc  <- (xi + 1 - u)/(sigma*(1+xi*z))*temp.cov
scorescale <- ((1-u)*z -1)/(sigma*(1+xi*z))
if(abs(xi) < 1e-08){
scoreshape <- (1-u)*z^2/2- z
}
else{
scoreshape <- (1-u)*1/xi*(1/xi*log(1+xi*z)-z/(1+xi*z)) - z/(1+xi*z)
}
return(matrix(c(scoreloc0, scorescale, scoreshape, scoretemploc),
nrow = 4, byrow = TRUE))
}
if(type == "scale") {
mu0 <- theta["mu0"]
alpha0 <- theta["alpha"]
sigma0 <- theta["sigma0"]
xi <- theta["gamma"]
mut <- mu0*exp(alpha0*temp.cov/mu0)
sigmat <-  sigma0*exp(alpha0*temp.cov/mu0)
zt <- (x - mut)/sigmat
in_supp <- which(1+ xi*zt > 0)
zt <- zt[in_supp]
if(abs(xi) < 1e-08) {
ut <- exp(-zt)
}
else {
ut <- (1+xi *zt)^(-1/xi)
}
expo <- exp(alpha0*temp.cov/mu0)
dmu0ut <- -ut^(xi +1)*(alpha0 *temp.cov *x/(mu0^2*sigmat) - 1/sigma0)
# ut^(xi +1)/sigmat* (expo*(1 - alpha0*temp.cov/mu0) - (x - mut)*alpha0*temp.cov/mu0)
dsigma0ut <- ut^(xi+1)/sigmat^2*x*expo
dalpha0ut <- ut^(xi+1)*(x - mut)*sigma0*expo*temp.cov/mu0/(sigmat^2)
scoreloc0 <- alpha0*temp.cov/mu^2 + dmu0ut*( (xi +1)/ut -1)
scorescale <- dsigma0ut*(-1/sigmat -1 + (xi +1)/ut)
scorealpha <- dalpha0ut*(-1/sigmat - 1 + (xi+1)/ut)
if(abs(xi) < 1e-08){
scoreshape <- (1-ut)*zt^2/2- zt
}
else{
scoreshape <- (1-ut)*1/xi*(1/xi*log(1+xi*zt)-zt/(1+xi*zt)) - zt/(1+xi*zt)
}
return(matrix(c(scoreloc0, scorescale, scoreshape, scorealpha),
nrow = 4, byrow = TRUE))
}
}
load_all()
devtools::load_all()
library(tidyverse)
blcksz <- 90
xx <- evd::rgpd(100*90, shape = 0.2)
yy <- data.frame(Station = "X1", Obs = xx)
# define a temporal covariate that is constant over a block of length blcksz
temp_cvrt <- rep(1:100/100, each = blcksz)[1:(99*blcksz + 1)]
bms <- get_uniq_bm(yy, blcksz, temp_cvrt = temp_cvrt, looplastblock = FALSE)
bms <- bms$uniq_data[[1]]
bms
devtools::load_all()
rm(score.function_wtrend())
rm(score.function_wtrend)
devtools::load_all()
blcksz <- 90
xx <- evd::rgpd(100*90, shape = 0.2)
yy <- data.frame(Station = "X1", Obs = xx)
# define a temporal covariate that is constant over a block of length blcksz
temp_cvrt <- rep(1:100/100, each = blcksz)[1:(99*blcksz + 1)]
bms <- get_uniq_bm(yy, blcksz, temp_cvrt = temp_cvrt, looplastblock = FALSE)
bms <- bms$uniq_data[[1]]
bms
###############################
fit_gev_expsc(data = bms)
est_sl <- fit_gev_expsc(data = bms)
estsl
est_sl
aa <- score.function_wtrend(x = 4.51, theta = est_sl$mle,
temp.cov = 0.73, type = "scale")
score.function_wtrend <- function(x, theta, temp.cov, type = "shift") {
if(!(type %in% c("shift", "scale"))){ stop("Type must be either 'shift' or 'scale'.")}
if(type == "shift") {
mu0 <- theta["loc0"]
mu1 <- theta["tempLoc1"]
sigma <- theta["scale0"]
xi <- theta["shape"]
mu <- mu0 + mu1*temp.cov
z <- (x-mu)/sigma
in_supp <- which( (1+ xi*z) > 0)
z <- z[in_supp]
if(abs(xi) < 1e-08) {
u <- exp(-z)
}
else {
u <- (1+xi *z)^(-1/xi)
}
scoreloc0 <- (xi + 1 - u)/(sigma*(1+xi*z))
scoretemploc  <- (xi + 1 - u)/(sigma*(1+xi*z))*temp.cov
scorescale <- ((1-u)*z -1)/(sigma*(1+xi*z))
if(abs(xi) < 1e-08){
scoreshape <- (1-u)*z^2/2- z
}
else{
scoreshape <- (1-u)*1/xi*(1/xi*log(1+xi*z)-z/(1+xi*z)) - z/(1+xi*z)
}
return(matrix(c(scoreloc0, scorescale, scoreshape, scoretemploc),
nrow = 4, byrow = TRUE))
}
if(type == "scale") {
mu0 <- theta["mu0"]
alpha0 <- theta["alpha"]
sigma0 <- theta["sigma0"]
xi <- theta["gamma"]
mut <- mu0*exp(alpha0*temp.cov/mu0)
sigmat <-  sigma0*exp(alpha0*temp.cov/mu0)
zt <- (x - mut)/sigmat
in_supp <- which(1+ xi*zt > 0)
zt <- zt[in_supp]
if(abs(xi) < 1e-08) {
ut <- exp(-zt)
}
else {
ut <- (1+xi *zt)^(-1/xi)
}
expo <- exp(alpha0*temp.cov/mu0)
dmu0ut <- -ut^(xi +1)*(alpha0 *temp.cov *x/(mu0^2*sigmat) - 1/sigma0)
# ut^(xi +1)/sigmat* (expo*(1 - alpha0*temp.cov/mu0) - (x - mut)*alpha0*temp.cov/mu0)
dsigma0ut <- ut^(xi+1)/sigmat^2*x*expo
dalpha0ut <- ut^(xi+1)*(x - mut)*sigma0*expo*temp.cov/mu0/(sigmat^2)
scoreloc0 <- alpha0*temp.cov/mu0^2 + dmu0ut*( (xi +1)/ut -1)
scorescale <- dsigma0ut*(-1/sigmat -1 + (xi +1)/ut)
scorealpha <- dalpha0ut*(-1/sigmat - 1 + (xi+1)/ut)
if(abs(xi) < 1e-08){
scoreshape <- (1-ut)*zt^2/2- zt
}
else{
scoreshape <- (1-ut)*1/xi*(1/xi*log(1+xi*zt)-zt/(1+xi*zt)) - zt/(1+xi*zt)
}
return(matrix(c(scoreloc0, scorescale, scoreshape, scorealpha),
nrow = 4, byrow = TRUE))
}
}
aa <- score.function_wtrend(x = 4.51, theta = est_sl$mle,
temp.cov = 0.73, type = "scale")
aa
numDeriv::grad( function(x){ - nll_spat_temp_sl_prep(params = c("loc0" = x,
"scale0" = est_sl$mle[2],
"shape" = est_sl$mle[3],
"tempLoc1" = est_sl$mle[4]),
loc.sp.form = ~ 1,
scale.sp.form = ~1,
loc.temp.form = ~ GMST,
dataprep = prepdata,
spat.cov = data.frame(lon = 1),
scale.link = make.link("identity"))} ,
x =  est_sl$mle[1])
unbm1 <- unbm %>% mutate(uniq_data = map(uniq_data, ~ .x[1, ]))
xx <- evd::rgpd(100*90, shape = 0.2) + rep(1:100/100, each = 90)
df.xx <- data.frame(Obs = xx, Station = "X1")
unbm <- get_uniq_bm(data = df.xx, blcksz = 90, temp_cvrt =rep(1:100/100, each = 90)[1:8911])
est_sl <- fit_spgev_sl(unbm, loc.sp.form = ~1, scale.sp.form = ~1, loc.temp.form = ~ GMST,
spat.cov = data.frame(lon = 1),
st_val_meth = "LeastSqTemp",
datastart = blockmax(xx, r = 90, "disjoint"),
temp.cov = 1:100/100, return_hess = TRUE,
scale.link = make.link("identity")
)
unbm1 <- unbm %>% mutate(uniq_data = map(uniq_data, ~ .x[1, ]))
prepdata <- prep4spatml(loc.sp.form = ~ 1,
scale.sp.form = ~ 1,
loc.temp.form = ~ GMST, data = unbm1, spat.cov = data.frame(lon= 1))
bms[1, ]
prepdata
numDeriv::grad( function(x){ - nll_spat_temp_sl_prep(params = c("loc0" = x,
"scale0" = est_sl$mle[2],
"shape" = est_sl$mle[3],
"tempLoc1" = est_sl$mle[4]),
loc.sp.form = ~ 1,
scale.sp.form = ~1,
loc.temp.form = ~ GMST,
dataprep = prepdata,
spat.cov = data.frame(lon = 1),
scale.link = make.link("identity"))} ,
x =  est_sl$mle[1])
unbm1
unbm1$uniq_data
aa <- score.function_wtrend(x = 3.68, theta = est_sl$mle,
temp.cov = 0.17, type = "scale")
aa <- score.function_wtrend(x = 3.68, theta = est_sl$mle,
temp.cov = 0.17, type = "scale")
numDeriv::grad( function(x){ - nll_spat_temp_sl_prep(params = c("loc0" = x,
"scale0" = est_sl$mle[2],
"shape" = est_sl$mle[3],
"tempLoc1" = est_sl$mle[4]),
loc.sp.form = ~ 1,
scale.sp.form = ~1,
loc.temp.form = ~ GMST,
dataprep = prepdata,
spat.cov = data.frame(lon = 1),
scale.link = make.link("identity"))} ,
x =  est_sl$mle[1])
unbm1 <- unbm %>% mutate(uniq_data = map(uniq_data, ~ .x[11, ]))
unbm1
unbm1$uniq_data
unbm1
unbm
unbm$uniq_data
unbm1 <- unbm %>% mutate(uniq_data = map(uniq_data, ~ .x[7, ]))
unbm1
prepdata <- prep4spatml(loc.sp.form = ~ 1,
scale.sp.form = ~ 1,
loc.temp.form = ~ GMST, data = unbm1, spat.cov = data.frame(lon= 1))
numDeriv::grad( function(x){ - nll_spat_temp_sl_prep(params = c("loc0" = x,
"scale0" = est_sl$mle[2],
"shape" = est_sl$mle[3],
"tempLoc1" = est_sl$mle[4]),
loc.sp.form = ~ 1,
scale.sp.form = ~1,
loc.temp.form = ~ GMST,
dataprep = prepdata,
spat.cov = data.frame(lon = 1),
scale.link = make.link("identity"))} ,
x =  est_sl$mle[1])
unbm1$uniq_data
aa <- score.function_wtrend(x = 4.65, theta = est_sl$mle,
temp.cov = 0.17, type = "scale")
est_sl$mle
est_sl <- fit_gev_expsc(data = bms)
est_sl <- fit_gev_expsc(data = bms)est_sl
est_sl
unbm1$uniq_data
aa <- score.function_wtrend(x = 4.65, theta = est_sl$mle,
temp.cov = 0.17, type = "scale")
aa
bms[1, ]
bms[7, ]
prepdata
numDeriv::grad( function(x){ - nll_expsc(params = c("loc0" =x,  #est_sl$mle[1],
"sigma0" = est_sl$mle[2],
"gamma" = est_sl$mle[3],
"alpha" = est_sl$mle[4]),
data = bms[11, ] )} ,
x =  est_sl$mle[1])
numDeriv::grad( function(x){ - nll_expsc(params = c("loc0" =x,  #est_sl$mle[1],
"sigma0" = est_sl$mle[2],
"gamma" = est_sl$mle[3],
"alpha" = est_sl$mle[4]),
data = bms[7, ] )} ,
x =  est_sl$mle[1])
