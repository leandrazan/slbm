ds = ds)
table_quants <- table_quants %>%
dplyr::mutate( est.quants = purrr::pmap_dbl( list(mut, sigma0, shape, theta,  eta, eta2, tau, ps, ds) ,
.f = function( .mut, .sigma0, .shape, .theta,
.eta, .eta2, .tau, .ps, .d){
IDF::qgev.d(.ps, mut = .mut, sigma0 = .sigma0, xi = .shape ,
eta = .eta , eta2 = (.eta2 + .eta), tau = .tau ,
theta = .theta, d = .d)
}
))
table_quants <- table_quants[ , !(colnames(table_quants) %in% rmcol)]
zns  <- agg_bm_test %>%
dplyr::select(-Year)
zns <- dplyr::rename(zns, "ds"= "duration")
zns <- zns %>% dplyr::group_by(ds) %>% tidyr::nest(djdat = djdata)
table_quants <- dplyr::left_join(table_quants, zns, by = "ds")
table_quants <- table_quants %>%
dplyr::mutate( quant_score = purrr::pmap_dbl( .l = list( .ps = ps , .q = est.quants, .obs = djdat),
.f = function(.ps, .q, .obs){
if(is.null(.obs)){ NA} else{
compute_qs(obs = unlist(.obs) , quant.est = .q,
p = .ps) }
})) %>%
dplyr::arrange(ps, ds)
return(table_quants)
}
dgev_cv_fit(agg_bm = agg_bm, conc_bm = conc_bm, leave_out = sbst[[1]], ds = c(1,2, 3), quants = c(.99, .995))
fit_dgev_cv_qs(agbm, concbm,  ds = c(1,5,8))
a <- fit_dgev_cv_qs(agbm, concbm,  ds = c(1,5,8))
a %>% unnest(cols  = Results)
a %>% unnest(cols  = Result)
a %>% tidyr::unnest(cols  = Result)
a[1, ]$left_out
#' as.POSIXct("2020-12-31 23:00:00"),by = 'hour')
#' prec <- rgamma(length(dates), shape = 0.1)
#' example_data <- data.frame(datetime = dates, prec = prec)
#'
#' agbm <- get_agg_bm(example_data, ds = c(1,2,4,8,16, 24, 48))
#' agdf <- fun_aggregate2df( example_data, ds = c(1,2,4,8,16, 24, 48) )
#' concbm <- compute_conc_bm_id(agdf)
#' dgev_cv_fit(agbm, concbm, ds = c(1,2) , leave_out = c(2004, 2008, 2017),
#'  quants = c(.5, .9, .99) )
#'
dgev_cv_fit <- function(agg_bm, conc_bm, leave_out , ds, quants, mult_sc = FALSE,  dur_offset = FALSE,
int_offset = FALSE, optimMethod = "Nelder-Mead", Maxit = 1500, ...){
agg_bm_test <- agg_bm %>% dplyr::select(djbm) %>%
tidyr::unnest(cols = djbm) %>% dplyr::filter(Year %in% leave_out)
dj_train <- agg_bm %>% dplyr::select(-slbm) %>%
dplyr::mutate(djbm = purrr::map(djbm, ~ .x %>% dplyr::filter(!(Year %in% leave_out))))
minmaxn <- do.call( function(.x){data.frame(Min = min(.x), Max = max(.x),
Nobs = length(.x))} , list(agg_bm[1,]$djbm[[1]]$Year))
sl_lo <- data.frame(year1 = leave_out, year2 = leave_out -1)
sl_lo <- sl_lo %>% dplyr::mutate(year2 = ifelse(year2 >= minmaxn$Min, year2, year2 + minmaxn$Nobs))
sl_train1 <- agg_bm %>% dplyr::select( - djbm) %>%
dplyr::mutate(slbm = purrr::map(slbm, ~ .x %>% dplyr::filter(!(Year %in% unlist(sl_lo)))))
conc_bm <- conc_bm %>% dplyr::filter(ind1 %in% sl_lo$year2)  ## filter for possible new starting years
# neither the new starting year nor the following year can be in the new sliding block
conc_bm <- conc_bm %>%
dplyr::filter(!(ind1 %in% leave_out) ) %>%
dplyr::filter(!(ind2 %in% leave_out))
conc_bm <- conc_bm %>% dplyr::mutate(Diff = ind2 - ind1) %>%
dplyr::mutate(Diff = ifelse(Diff >= 0, Diff, Diff + minmaxn$Nobs)) %>%
dplyr::group_by(ind1) %>%
dplyr::filter(Diff == min(Diff)) %>%
dplyr::ungroup() %>%
dplyr::select(-Diff)
conc_bm <- conc_bm %>% tidyr::unnest(cols = newslbm) %>%
dplyr::select(-c( ind2)) %>%
tidyr::unnest(cols = conc_slbm) %>%
dplyr::group_by(duration) %>%
tidyr::nest(cols = c( ind1 , conc_slbm))  %>% dplyr::ungroup()
newsample <- conc_bm %>% dplyr::left_join(sl_train1, by = "duration") %>%
dplyr::mutate(slbm = purrr::map2(.x = cols, .y = slbm , function(.x, .y){
.x <- dplyr::rename(.x, "Year" = ind1, "sldata" = conc_slbm)
dplyr::bind_rows(.x, .y)
})) %>% dplyr::select(-cols)
agg_bm <- dplyr::right_join(dj_train, newsample, by = "duration")
fitb <- gev.d.fit.sl(agg_bm = agg_bm, mult_sc = mult_sc,
dur_offset = dur_offset, int_offset = int_offset, method = optimMethod,
Maxit = Maxit, ...)
mlest <- dplyr::bind_cols(fitb$mle, conv =  fitb$conv)
rmcol <- character()
if(!mult_sc) {
mlest <- mlest %>% dplyr::bind_cols( eta2 = 0)
rmcol <- c( rmcol, "eta2")
}
if(!int_offset) {
mlest <- mlest %>% dplyr::bind_cols( tau = 0)
rmcol <- c(rmcol, "tau")
}
if(!dur_offset) {
mlest <- mlest %>% dplyr::bind_cols( theta = 0)
rmcol <- c(rmcol, "theta")
}
table_quants <- mlest %>% tidyr::expand_grid(ps = quants,
ds = ds)
table_quants <- table_quants %>%
dplyr::mutate( est.quants = purrr::pmap_dbl( list(mut, sigma0, shape, theta,  eta, eta2, tau, ps, ds) ,
.f = function( .mut, .sigma0, .shape, .theta,
.eta, .eta2, .tau, .ps, .d){
IDF::qgev.d(.ps, mut = .mut, sigma0 = .sigma0, xi = .shape ,
eta = .eta , eta2 = (.eta2 + .eta), tau = .tau ,
theta = .theta, d = .d)
}
))
table_quants <- table_quants[ , !(colnames(table_quants) %in% rmcol)]
zns  <- agg_bm_test %>%
dplyr::select(-Year)
zns <- dplyr::rename(zns, "ds"= "duration")
zns <- zns %>% dplyr::group_by(ds) %>% tidyr::nest(Testdata = djdata)
table_quants <- dplyr::left_join(table_quants, zns, by = "ds")
table_quants <- table_quants %>%
dplyr::mutate( quant_score = purrr::pmap_dbl( .l = list( .ps = ps , .q = est.quants, .obs = Testdata),
.f = function(.ps, .q, .obs){
if(is.null(.obs)){ NA} else{
compute_qs(obs = unlist(.obs) , quant.est = .q,
p = .ps) }
})) %>%
dplyr::arrange(ps, ds)
return(table_quants)
}
a <- fit_dgev_cv_qs(agbm, concbm,  ds = c(1,5,8))
a
a %>% tidyr::unnest(cols  = Result)
fit_dgev_cv_qs <- function(agg_bm, conc_bm, ds,
quants =  1-1/c(50, 100 ), mult_sc = FALSE,
dur_offset = FALSE, int_offset = FALSE, testset = "consec",
n.lo = 3, n.cv = NULL, method = "both", returnTestdata = FALSE,
optimMethod = "Nelder-Mead", Maxit = 1500, ... ){
years_obs <- agg_bm[1, ]$djbm[[1]]$Year
n.years <- length(years_obs)
if(testset == "consec") {
cvstart <- seq(years_obs[1], years_obs[n.years], n.lo)
sbst <- purrr::map(cvstart, ~ .x + (0:(n.lo -1)))
sbst[[length(sbst)]] <-  sbst[[length(sbst)]][ sbst[[length(sbst)]] <= years_obs[n.years]]
n.cv <- length(sbst)
} else if( testset == "random") {
assertthat::assert_that(is.numeric(n.cv))
all.subsets <- combn(years_obs, n.lo, simplify = F)
sbst <- sample(all.subsets, min(n.cv, nrow(all.subsets)) )
n.cv <- length(sbst)
} else {
stop("This is not a valid method to construct the test set. Choose either 'consec' or 'random'")
}
tibres <- tibble::tibble(left_out = sbst)  %>%
dplyr::mutate( Result = purrr::map( left_out, .f = function(.x){
tryCatch(
dgev_cv_fit(agg_bm = agg_bm, conc_bm = conc_bm, leave_out = .x, ds =  ds,
quants = quants, mult_sc = mult_sc, dur_offset = dur_offset,
int_offset = int_offset, optimMethod = optimMethod, Maxit = Maxit, ... ) ,
error = function(egal){
tibble::tibble( mut = NA, sigma0 = NA, shape = NA,
eta = NA,
estimator = NA,  ps = NA, ds  = NA,
est.quants = NA, djdat = NA, quant_score = NA)
} )
}))
if(!returnTestdata){
tibres <-   tibres %>% dplyr::select(-Testdata)
}
if(!(method == "both")){
tibres <- tibres %>% dplyr::filter( estimator == method)
}
tibres
}
a <- fit_dgev_cv_qs(agbm, concbm,  ds = c(1,5,8))
a
fit_dgev_cv_qs <- function(agg_bm, conc_bm, ds,
quants =  1-1/c(50, 100 ), mult_sc = FALSE,
dur_offset = FALSE, int_offset = FALSE, testset = "consec",
n.lo = 3, n.cv = NULL, method = "both", returnLO = FALSE,
optimMethod = "Nelder-Mead", Maxit = 1500, ... ){
years_obs <- agg_bm[1, ]$djbm[[1]]$Year
n.years <- length(years_obs)
if(testset == "consec") {
cvstart <- seq(years_obs[1], years_obs[n.years], n.lo)
sbst <- purrr::map(cvstart, ~ .x + (0:(n.lo -1)))
sbst[[length(sbst)]] <-  sbst[[length(sbst)]][ sbst[[length(sbst)]] <= years_obs[n.years]]
n.cv <- length(sbst)
} else if( testset == "random") {
assertthat::assert_that(is.numeric(n.cv))
all.subsets <- combn(years_obs, n.lo, simplify = F)
sbst <- sample(all.subsets, min(n.cv, nrow(all.subsets)) )
n.cv <- length(sbst)
} else {
stop("This is not a valid method to construct the test set. Choose either 'consec' or 'random'")
}
tibres <- tibble::tibble(left_out = sbst)  %>%
dplyr::mutate( Result = purrr::map( left_out, .f = function(.x){
tryCatch(
dgev_cv_fit(agg_bm = agg_bm, conc_bm = conc_bm, leave_out = .x, ds =  ds,
quants = quants, mult_sc = mult_sc, dur_offset = dur_offset,
int_offset = int_offset, optimMethod = optimMethod, Maxit = Maxit, ... ) ,
error = function(egal){
tibble::tibble( mut = NA, sigma0 = NA, shape = NA,
eta = NA,
estimator = NA,  ps = NA, ds  = NA,
est.quants = NA, djdat = NA, quant_score = NA)
} )
}))
if(!returnLO){
tibres <-   tibres %>% dplyr::select(-left_out)
}
if(!(method == "both")){
tibres <- tibres %>% dplyr::filter( estimator == method)
}
tibres
}
a <- fit_dgev_cv_qs(agbm, concbm,  ds = c(1,5,8))
a %>% tidyr::unnest(cols  = Result)
a <- fit_dgev_cv_qs(agbm, concbm,  ds = c(1))
a %>% tidyr::unnest(cols  = Result)
a <- fit_dgev_cv_qs(agbm, concbm,  ds = c(1), method = "disjoint")
a
purrr::map(a$Result, ~ .x %>% dplyr::filter( estimator == "sliding") )
fit_dgev_cv_qs <- function(agg_bm, conc_bm, ds,
quants =  1-1/c(50, 100 ), mult_sc = FALSE,
dur_offset = FALSE, int_offset = FALSE, testset = "consec",
n.lo = 3, n.cv = NULL, method = "both", returnLO = FALSE,
optimMethod = "Nelder-Mead", Maxit = 1500, ... ){
years_obs <- agg_bm[1, ]$djbm[[1]]$Year
n.years <- length(years_obs)
if(testset == "consec") {
cvstart <- seq(years_obs[1], years_obs[n.years], n.lo)
sbst <- purrr::map(cvstart, ~ .x + (0:(n.lo -1)))
sbst[[length(sbst)]] <-  sbst[[length(sbst)]][ sbst[[length(sbst)]] <= years_obs[n.years]]
n.cv <- length(sbst)
} else if( testset == "random") {
assertthat::assert_that(is.numeric(n.cv))
all.subsets <- combn(years_obs, n.lo, simplify = F)
sbst <- sample(all.subsets, min(n.cv, nrow(all.subsets)) )
n.cv <- length(sbst)
} else {
stop("This is not a valid method to construct the test set. Choose either 'consec' or 'random'")
}
tibres <- tibble::tibble(left_out = sbst)  %>%
dplyr::mutate( Result = purrr::map( left_out, .f = function(.x){
tryCatch(
dgev_cv_fit(agg_bm = agg_bm, conc_bm = conc_bm, leave_out = .x, ds =  ds,
quants = quants, mult_sc = mult_sc, dur_offset = dur_offset,
int_offset = int_offset, optimMethod = optimMethod, Maxit = Maxit, ... ) ,
error = function(egal){
tibble::tibble( mut = NA, sigma0 = NA, shape = NA,
eta = NA,
estimator = NA,  ps = NA, ds  = NA,
est.quants = NA, djdat = NA, quant_score = NA)
} )
}))
if(!returnLO){
tibres <-   tibres %>% dplyr::select(-left_out)
}
if(!(method == "both")){
tibres <- purrr::map_dfr(tibres, ~ .x %>% dplyr::filter( estimator == method))
}
tibres
}
purrr::map(a$Result, ~ .x %>% dplyr::filter( estimator == "sliding") )
a <- fit_dgev_cv_qs(agbm, concbm,  ds = c(1), method = "disjoint")
fit_dgev_cv_qs <- function(agg_bm, conc_bm, ds,
quants =  1-1/c(50, 100 ), mult_sc = FALSE,
dur_offset = FALSE, int_offset = FALSE, testset = "consec",
n.lo = 3, n.cv = NULL, method = "both", returnLO = FALSE,
optimMethod = "Nelder-Mead", Maxit = 1500, ... ){
years_obs <- agg_bm[1, ]$djbm[[1]]$Year
n.years <- length(years_obs)
if(testset == "consec") {
cvstart <- seq(years_obs[1], years_obs[n.years], n.lo)
sbst <- purrr::map(cvstart, ~ .x + (0:(n.lo -1)))
sbst[[length(sbst)]] <-  sbst[[length(sbst)]][ sbst[[length(sbst)]] <= years_obs[n.years]]
n.cv <- length(sbst)
} else if( testset == "random") {
assertthat::assert_that(is.numeric(n.cv))
all.subsets <- combn(years_obs, n.lo, simplify = F)
sbst <- sample(all.subsets, min(n.cv, nrow(all.subsets)) )
n.cv <- length(sbst)
} else {
stop("This is not a valid method to construct the test set. Choose either 'consec' or 'random'")
}
tibres <- tibble::tibble(left_out = sbst)  %>%
dplyr::mutate( Result = purrr::map( left_out, .f = function(.x){
tryCatch(
dgev_cv_fit(agg_bm = agg_bm, conc_bm = conc_bm, leave_out = .x, ds =  ds,
quants = quants, mult_sc = mult_sc, dur_offset = dur_offset,
int_offset = int_offset, optimMethod = optimMethod, Maxit = Maxit, ... ) ,
error = function(egal){
tibble::tibble( mut = NA, sigma0 = NA, shape = NA,
eta = NA,
estimator = NA,  ps = NA, ds  = NA,
est.quants = NA, djdat = NA, quant_score = NA)
} )
}))
if(!returnLO){
tibres <-   tibres %>% dplyr::select(-left_out)
}
if(!(method == "both")){
tibres <- purrr::map_dfr(tibres$Result, ~ .x %>% dplyr::filter( estimator == method))
}
tibres
}
a <- fit_dgev_cv_qs(agbm, concbm,  ds = c(1), method = "disjoint")
purrr::map(a$Result, ~ .x %>% dplyr::filter( estimator == "sliding") )
a %>% tidyr::unnest(cols  = Result)
a
fit_dgev_cv_qs <- function(agg_bm, conc_bm, ds,
quants =  1-1/c(50, 100 ), mult_sc = FALSE,
dur_offset = FALSE, int_offset = FALSE, testset = "consec",
n.lo = 3, n.cv = NULL, method = "both", returnLO = FALSE,
optimMethod = "Nelder-Mead", Maxit = 1500, ... ){
years_obs <- agg_bm[1, ]$djbm[[1]]$Year
n.years <- length(years_obs)
if(testset == "consec") {
cvstart <- seq(years_obs[1], years_obs[n.years], n.lo)
sbst <- purrr::map(cvstart, ~ .x + (0:(n.lo -1)))
sbst[[length(sbst)]] <-  sbst[[length(sbst)]][ sbst[[length(sbst)]] <= years_obs[n.years]]
n.cv <- length(sbst)
} else if( testset == "random") {
assertthat::assert_that(is.numeric(n.cv))
all.subsets <- combn(years_obs, n.lo, simplify = F)
sbst <- sample(all.subsets, min(n.cv, nrow(all.subsets)) )
n.cv <- length(sbst)
} else {
stop("This is not a valid method to construct the test set. Choose either 'consec' or 'random'")
}
tibres <- tibble::tibble(left_out = sbst)  %>%
dplyr::mutate( Result = purrr::map( left_out, .f = function(.x){
tryCatch(
dgev_cv_fit(agg_bm = agg_bm, conc_bm = conc_bm, leave_out = .x, ds =  ds,
quants = quants, mult_sc = mult_sc, dur_offset = dur_offset,
int_offset = int_offset, optimMethod = optimMethod, Maxit = Maxit, ... ) ,
error = function(egal){
tibble::tibble( mut = NA, sigma0 = NA, shape = NA,
eta = NA,
estimator = NA,  ps = NA, ds  = NA,
est.quants = NA, djdat = NA, quant_score = NA)
} )
}))
if(!returnLO){
tibres <-   tibres %>% dplyr::select(-left_out)
}
if(!(method == "both")){
tibres <- purrr::map(tibres$Result, ~ .x %>% dplyr::filter( estimator == method))
}
tibres
}
purrr::map(a$Result, ~ .x %>% dplyr::filter( estimator == "sliding") )
a <- fit_dgev_cv_qs(agbm, concbm,  ds = c(1), method = "disjoint")
a
fit_dgev_cv_qs <- function(agg_bm, conc_bm, ds,
quants =  1-1/c(50, 100 ), mult_sc = FALSE,
dur_offset = FALSE, int_offset = FALSE, testset = "consec",
n.lo = 3, n.cv = NULL, method = "both", returnLO = FALSE,
optimMethod = "Nelder-Mead", Maxit = 1500, ... ){
years_obs <- agg_bm[1, ]$djbm[[1]]$Year
n.years <- length(years_obs)
if(testset == "consec") {
cvstart <- seq(years_obs[1], years_obs[n.years], n.lo)
sbst <- purrr::map(cvstart, ~ .x + (0:(n.lo -1)))
sbst[[length(sbst)]] <-  sbst[[length(sbst)]][ sbst[[length(sbst)]] <= years_obs[n.years]]
n.cv <- length(sbst)
} else if( testset == "random") {
assertthat::assert_that(is.numeric(n.cv))
all.subsets <- combn(years_obs, n.lo, simplify = F)
sbst <- sample(all.subsets, min(n.cv, nrow(all.subsets)) )
n.cv <- length(sbst)
} else {
stop("This is not a valid method to construct the test set. Choose either 'consec' or 'random'")
}
tibres <- tibble::tibble(left_out = sbst)  %>%
dplyr::mutate( Result = purrr::map( left_out, .f = function(.x){
tryCatch(
dgev_cv_fit(agg_bm = agg_bm, conc_bm = conc_bm, leave_out = .x, ds =  ds,
quants = quants, mult_sc = mult_sc, dur_offset = dur_offset,
int_offset = int_offset, optimMethod = optimMethod, Maxit = Maxit, ... ) ,
error = function(egal){
tibble::tibble( mut = NA, sigma0 = NA, shape = NA,
eta = NA,
estimator = NA,  ps = NA, ds  = NA,
est.quants = NA, djdat = NA, quant_score = NA)
} )
}))
if(!returnLO){
tibres <-   tibres %>% dplyr::select(-left_out)
}
if(!(method == "both")){
tibres <- tibres %>% mutate( Result = purrr::map(Result, ~ .x %>% dplyr::filter( estimator == method)))
}
tibres
}
a <- fit_dgev_cv_qs(agbm, concbm,  ds = c(1), method = "disjoint")
fit_dgev_cv_qs <- function(agg_bm, conc_bm, ds,
quants =  1-1/c(50, 100 ), mult_sc = FALSE,
dur_offset = FALSE, int_offset = FALSE, testset = "consec",
n.lo = 3, n.cv = NULL, method = "both", returnLO = FALSE,
optimMethod = "Nelder-Mead", Maxit = 1500, ... ){
years_obs <- agg_bm[1, ]$djbm[[1]]$Year
n.years <- length(years_obs)
if(testset == "consec") {
cvstart <- seq(years_obs[1], years_obs[n.years], n.lo)
sbst <- purrr::map(cvstart, ~ .x + (0:(n.lo -1)))
sbst[[length(sbst)]] <-  sbst[[length(sbst)]][ sbst[[length(sbst)]] <= years_obs[n.years]]
n.cv <- length(sbst)
} else if( testset == "random") {
assertthat::assert_that(is.numeric(n.cv))
all.subsets <- combn(years_obs, n.lo, simplify = F)
sbst <- sample(all.subsets, min(n.cv, nrow(all.subsets)) )
n.cv <- length(sbst)
} else {
stop("This is not a valid method to construct the test set. Choose either 'consec' or 'random'")
}
tibres <- tibble::tibble(left_out = sbst)  %>%
dplyr::mutate( Result = purrr::map( left_out, .f = function(.x){
tryCatch(
dgev_cv_fit(agg_bm = agg_bm, conc_bm = conc_bm, leave_out = .x, ds =  ds,
quants = quants, mult_sc = mult_sc, dur_offset = dur_offset,
int_offset = int_offset, optimMethod = optimMethod, Maxit = Maxit, ... ) ,
error = function(egal){
tibble::tibble( mut = NA, sigma0 = NA, shape = NA,
eta = NA,
estimator = NA,  ps = NA, ds  = NA,
est.quants = NA, djdat = NA, quant_score = NA)
} )
}))
if(!returnLO){
tibres <-   tibres %>% dplyr::select(-left_out)
}
if(!(method == "both")){
tibres <- tibres %>%
dplyr::mutate( Result = purrr::map(Result, ~ .x %>% dplyr::filter( estimator == method)))
}
tibres
}
a <- fit_dgev_cv_qs(agbm, concbm,  ds = c(1), method = "disjoint")
a
a %>% unnest(cols = Result)
a %>% tidyr::unnest(cols = Result)
a <- fit_dgev_cv_qs(agbm, concbm,  ds = c(1), method = "sliding")
a %>% tidyr::unnest(cols = Result)
a
#' #' dates <- seq(as.POSIXct("2000-01-01 00:00:00"),
#' as.POSIXct("2020-12-31 23:00:00"),by = 'hour')
#' prec <- rgamma(length(dates), shape = 0.1)
#' example_data <- data.frame(datetime = dates, prec = prec)
#'
#' agbm <- get_agg_bm(example_data, ds = c(1,2,4,8,16, 24, 48))
#' agdf <- fun_aggregate2df( example_data, ds = c(1,2,4,8,16, 24, 48) )
#' concbm <- compute_conc_bm_id(agdf)
#' fit_dgev_cv_qs(agbm, concbm,  ds = c(1,5,8))
#'
fit_dgev_cv_qs <- function(agg_bm, conc_bm, ds,
quants =  1-1/c(50, 100 ), mult_sc = FALSE,
dur_offset = FALSE, int_offset = FALSE, testset = "consec",
n.lo = 3, n.cv = NULL, method = "both", returnLO = FALSE,
optimMethod = "Nelder-Mead", Maxit = 1500, ... ){
years_obs <- agg_bm[1, ]$djbm[[1]]$Year
n.years <- length(years_obs)
if(testset == "consec") {
cvstart <- seq(years_obs[1], years_obs[n.years], n.lo)
sbst <- purrr::map(cvstart, ~ .x + (0:(n.lo -1)))
sbst[[length(sbst)]] <-  sbst[[length(sbst)]][ sbst[[length(sbst)]] <= years_obs[n.years]]
n.cv <- length(sbst)
} else if( testset == "random") {
assertthat::assert_that(is.numeric(n.cv))
all.subsets <- combn(years_obs, n.lo, simplify = F)
sbst <- sample(all.subsets, min(n.cv, nrow(all.subsets)) )
n.cv <- length(sbst)
} else {
stop("This is not a valid method to construct the test set. Choose either 'consec' or 'random'")
}
tibres <- tibble::tibble(left_out = sbst)  %>%
dplyr::mutate( Result = purrr::map( left_out, .f = function(.x){
tryCatch(
dgev_cv_fit(agg_bm = agg_bm, conc_bm = conc_bm, leave_out = .x, ds =  ds,
quants = quants, mult_sc = mult_sc, dur_offset = dur_offset,
int_offset = int_offset, optimMethod = optimMethod, Maxit = Maxit, ... ) ,
error = function(egal){
tibble::tibble( mut = NA, sigma0 = NA, shape = NA,
eta = NA,
estimator = NA,  ps = NA, ds  = NA,
est.quants = NA, djdat = NA, quant_score = NA)
} )
}))
if(!returnLO){
tibres <-   tibres %>% dplyr::select(-left_out)
}
if(!(method == "both")){
tibres <- tibres %>%
dplyr::mutate( Result = purrr::map(Result, ~ .x %>% dplyr::filter( estimator == method)))
}
tibres %>% tidyr::unnest(cols = Result)
}
a <- fit_dgev_cv_qs(agbm, concbm,  ds = c(1), method = "sliding")
a
a <- fit_dgev_cv_qs(agbm, concbm,  ds = c(1), method = "sliding", returnLO = TRUE)
a
cvres <- fit_dgev_cv_qs(agbm, concbm,  ds = c(1,5,8))
cvres <- fit_dgev_cv_qs(agbm, concbm,  ds = c(1,5,8))
cvres %>% dplyr::select( - c( mut, sigma0, shape, eta, conv, Testdata )) %>%
dplyr::group_by(ds, ps) %>%
dplyr::summarise(MQS = mean(quant_score))
cvres %>% dplyr::select( - c( mut, sigma0, shape, eta, conv, Testdata )) %>%
dplyr::group_by(ds, ps, estimator) %>%
dplyr::summarise(MQS = mean(quant_score))
cvres <- fit_dgev_cv_qs(agbm, concbm,  ds = c(1,4,8, 24))
# compute mean quantile scores based on cross-validation:
cvres %>% dplyr::select( - c( mut, sigma0, shape, eta, conv, Testdata )) %>%
dplyr::group_by(ds, ps, estimator) %>%
dplyr::summarise(MQS = mean(quant_score))
cvres %>% dplyr::select( - c( mut, sigma0, shape, eta, conv, Testdata )) %>%
dplyr::group_by(ds, ps, estimator) %>%
dplyr::summarise(MQS = mean(quant_score), .groups = "drop")
devtools::check()
devtools::check()
