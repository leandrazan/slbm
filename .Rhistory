bmx}
))
uu1 <- uu %>%
dplyr::mutate(uniq_data = purrr::map(full_data,  .f = function(.x) {
bmx <- .x %>% dplyr::group_by(slbm, temp_cvrt) %>%
dplyr::summarise(n = dplyr::n(), .groups = "drop")
bmx
})) %>% dplyr::ungroup() %>% dplyr::select(-data)
return(uu1)
}
else {
# return only the weighted sliding BM sample
data %>% dplyr::group_by(Station, Kblockind) %>% tidyr::nest() %>%
dplyr::mutate(uniq_data = purrr::map(.x = data, .f = function(.x) {
bmx <- slbm::blockmax(.x$Obs, r = blcksz, method = "sliding",
looplastblock = looplastblock)
bmx <- data.frame(slbm = bmx, temp_cvrt = .x$tempcvrt[1:length(bmx)])
bmx <- bmx %>% dplyr::group_by(slbm, temp_cvrt) %>%
dplyr::summarise(n = dplyr::n(), .groups = "drop")
# bmx$n[which.max(bmx$slbm)] <- blcksz
bmx
})) %>% dplyr::ungroup() %>% dplyr::select(-data)
}
}
else {
if(returnfullsamp) {
browser()
uu <- data %>% dplyr::group_by(Station, Kblockind) %>% tidyr::nest() %>%
dplyr::mutate(full_data = purrr::map(.x = data, .f = function(.x) {
bmx <- slbm::blockmax(.x$Obs, r = blcksz, "sliding", looplastblock = looplastblock)
bmx <- data.frame(slbm = bmx)
bmx}))
uu1 <- uu %>%
dplyr::mutate(uniq_data = purrr::map(full_data,  .f = function(.x) {
bmx <- .x %>% dplyr::group_by(slbm) %>%
dplyr::summarise(n = dplyr::n(), .groups = "drop")
bmx
})) %>% dplyr::ungroup() %>% dplyr::select(-data)
return(uu1)
} else {
data %>% dplyr::group_by(Station, Kblockind) %>% tidyr::nest() %>%
dplyr::mutate(uniq_data = purrr::map(.x = data, .f = function(.x) {
bmx <- slbm::blockmax(.x$Obs, r = blcksz, "sliding", looplastblock = looplastblock)
bmx <- data.frame(slbm = bmx)
bmx <- bmx %>% dplyr::group_by(slbm) %>%
dplyr::summarise(n = dplyr::n(), .groups = "drop")
bmx
})) %>% dplyr::ungroup() %>% dplyr::select(-data)
}
}
}
sluniq_wb <- get_uniq_bm_boot(df.xx, blcksz = blcksz, K = k, indexblock = indexblock,
temp_cvrt = NULL, looplastblock = TRUE,
returnfullsamp = TRUE)
data
head(data)
data %>% dplyr::group_by(Station, Kblockind) %>% tidyr::nest()
uu <- data %>% dplyr::group_by(Station, Kblockind) %>% tidyr::nest() %>%
dplyr::mutate(full_data = purrr::map(.x = data, .f = function(.x) {
bmx <- slbm::blockmax(.x$Obs, r = blcksz, "sliding", looplastblock = looplastblock)
bmx <- data.frame(slbm = bmx)
bmx}))
uu
uu %>%
dplyr::mutate(uniq_data = purrr::map(full_data,  .f = function(.x) {
bmx <- .x %>% dplyr::group_by(slbm) %>%
dplyr::summarise(n = dplyr::n(), .groups = "drop")
bmx
}))
uu
uu$full_data
uu$full_data[[1]]
uu$full_data[[1]] %>% head()
sluniq_wb <- get_uniq_bm_boot(df.xx, blcksz = blcksz, K = k, indexblock = indexblock,
temp_cvrt = NULL, looplastblock = TRUE,
returnfullsamp = TRUE)
sluniq_wb <- get_uniq_bm_boot(df.xx, blcksz = blcksz, K = k, indexblock = indexblock,
temp_cvrt = NULL, looplastblock = TRUE,
returnfullsamp = FALSE)
sluniq_wb
sluniq_wb$uniq_data
sluniq_wb %>% unnest(cols = uniq_data)
blockmax
#' ndata <- blcksz * ny
#' nKblocks <- ceiling(ndata/(k*blcksz))
#' indexblock <- data.frame(blockind = c(rep(1:(nKblocks-1), each = k*blcksz),
#'                                       rep(nKblocks, ndata - k*blcksz*(nKblocks-1))),
#'                          obsind = 1:ndata)
#'
#' sluniq_wb <- get_uniq_bm_boot(df.xx, blcksz = blcksz, K = k, indexblock = indexblock,
#'                               temp_cvrt = NULL, looplastblock = TRUE,
#'                               returnfullsamp = TRUE)
#'
get_uniq_bm_boot <- function (data, blcksz, K,  indexblock, temp_cvrt = NULL,
looplastblock = TRUE, returnfullsamp = FALSE) {
ndat <- nrow(data)
# fill up last Kblock if it contains less observations than the other blocks
if(!(ndat/(K*blcksz)  == floor(ndat/(K*blcksz)))) {
browser()
m <- ceiling(ndat/blcksz)
mk <- floor(m/K)
diffmk <- K - m + mk*K
data <- data %>% dplyr::bind_rows(data[(ndat - diffmk*blcksz +1):ndat,  ])
indexblock <- indexblock %>% dplyr::bind_rows(data.frame(blockind = rep(mk +1, diffmk*blcksz ), obsind = ndat + (1:(diffmk*blcksz))))
}
data$Kblockind <- indexblock$blockind
if (!is.null(temp_cvrt)) {
n.cvrt <- length(temp_cvrt)
# add column containing the temporal covariate. If temporal covariate is given for
# sliding bm only, repeat the last value to obtain temporal covariate for each day
data$tempcvrt <- c(temp_cvrt, rep(temp_cvrt[n.cvrt], (nrow(data) - n.cvrt)))
if(returnfullsamp) {
# return the sliding BM sample itself and the weighted sliding BM sample
uu <- data %>% dplyr::group_by(Station, Kblockind) %>% tidyr::nest() %>%
dplyr::mutate(full_data = purrr::map(.x = data, .f = function(.x) {
bmx <- slbm::blockmax(.x$Obs, r = blcksz, method = "sliding",
looplastblock = looplastblock)
bmx <- data.frame(slbm = bmx, temp_cvrt = .x$tempcvrt[1:length(bmx)])
bmx}
))
uu1 <- uu %>%
dplyr::mutate(uniq_data = purrr::map(full_data,  .f = function(.x) {
bmx <- .x %>% dplyr::group_by(slbm, temp_cvrt) %>%
dplyr::summarise(n = dplyr::n(), .groups = "drop")
bmx
})) %>% dplyr::ungroup() %>% dplyr::select(-data)
return(uu1)
}
else {
# return only the weighted sliding BM sample
data %>% dplyr::group_by(Station, Kblockind) %>% tidyr::nest() %>%
dplyr::mutate(uniq_data = purrr::map(.x = data, .f = function(.x) {
bmx <- slbm::blockmax(.x$Obs, r = blcksz, method = "sliding",
looplastblock = looplastblock)
bmx <- data.frame(slbm = bmx, temp_cvrt = .x$tempcvrt[1:length(bmx)])
bmx <- bmx %>% dplyr::group_by(slbm, temp_cvrt) %>%
dplyr::summarise(n = dplyr::n(), .groups = "drop")
# bmx$n[which.max(bmx$slbm)] <- blcksz
bmx
})) %>% dplyr::ungroup() %>% dplyr::select(-data)
}
}
else {
if(returnfullsamp) {
uu <- data %>% dplyr::group_by(Station, Kblockind) %>% tidyr::nest() %>%
dplyr::mutate(full_data = purrr::map(.x = data, .f = function(.x) {
bmx <- slbm::blockmax(.x$Obs, r = blcksz, "sliding", looplastblock = looplastblock)
bmx <- data.frame(slbm = bmx)
bmx}))
uu1 <- uu %>%
dplyr::mutate(uniq_data = purrr::map(full_data,  .f = function(.x) {
bmx <- .x %>% dplyr::group_by(slbm) %>%
dplyr::summarise(n = dplyr::n(), .groups = "drop")
bmx
})) %>% dplyr::ungroup() %>% dplyr::select(-data)
return(uu1)
} else {
data %>% dplyr::group_by(Station, Kblockind) %>% tidyr::nest() %>%
dplyr::mutate(uniq_data = purrr::map(.x = data, .f = function(.x) {
bmx <- slbm::blockmax(.x$Obs, r = blcksz, "sliding", looplastblock = looplastblock)
bmx <- data.frame(slbm = bmx)
bmx <- bmx %>% dplyr::group_by(slbm) %>%
dplyr::summarise(n = dplyr::n(), .groups = "drop")
bmx
})) %>% dplyr::ungroup() %>% dplyr::select(-data)
}
}
}
sluniq_wb <- get_uniq_bm_boot(df.xx, blcksz = blcksz, K = k, indexblock = indexblock,
temp_cvrt = NULL, looplastblock = TRUE,
returnfullsamp = TRUE)
m <- ceiling(ndat/blcksz)
m
ndat/blcksz
mk <- floor(m/K)
mk
K - m + mk*K
diffmk <- K - m + mk*K
K
mk
K - 12
mk
mk*K
data
dim(data)
data[(ndat - diffmk*blcksz +1):ndat,  ]
dim(data[(ndat - diffmk*blcksz +1):ndat,  ])
indexblock
head(indexblock)
rm(list = ls())
#' ndata <- blcksz * ny
#' nKblocks <- ceiling(ndata/(k*blcksz))
#' indexblock <- data.frame(blockind = c(rep(1:(nKblocks-1), each = k*blcksz),
#'                                       rep(nKblocks, ndata - k*blcksz*(nKblocks-1))),
#'                          obsind = 1:ndata)
#'
#' sluniq_wb <- get_uniq_bm_boot(df.xx, blcksz = blcksz, K = k, indexblock = indexblock,
#'                               temp_cvrt = NULL, looplastblock = TRUE,
#'                               returnfullsamp = TRUE)
#'
get_uniq_bm_boot <- function (data, blcksz, K,  indexblock, temp_cvrt = NULL,
looplastblock = TRUE, returnfullsamp = FALSE) {
ndat <- nrow(data)
# fill up last Kblock if it contains less observations than the other blocks,
# observations of last block are repeated, not sure if that's the best method
if(!(ndat/(K*blcksz)  == floor(ndat/(K*blcksz)))) {
browser()
m <- ceiling(ndat/blcksz)
mk <- floor(m/K)
diffmk <- K - m + mk*K
data <- data %>% dplyr::bind_rows(data[(ndat - diffmk*blcksz +1):ndat,  ])
indexblock <- indexblock %>% dplyr::bind_rows(data.frame(blockind = rep(mk +1, diffmk*blcksz ), obsind = ndat + (1:(diffmk*blcksz))))
}
data$Kblockind <- indexblock$blockind
# when using temporal covariate
if (!is.null(temp_cvrt)) {
n.cvrt <- length(temp_cvrt)
# add column containing the temporal covariate. If temporal covariate is given for
# sliding bm only, repeat the last value to obtain temporal covariate for each day
data$tempcvrt <- c(temp_cvrt, rep(temp_cvrt[n.cvrt], (nrow(data) - n.cvrt)))
if(returnfullsamp) {
# return the sliding BM sample itself and the weighted sliding BM sample
uu <- data %>% dplyr::group_by(Station, Kblockind) %>% tidyr::nest() %>%
dplyr::mutate(full_data = purrr::map(.x = data, .f = function(.x) {
bmx <- slbm::blockmax(.x$Obs, r = blcksz, method = "sliding",
looplastblock = looplastblock)
bmx <- data.frame(slbm = bmx, temp_cvrt = .x$tempcvrt[1:length(bmx)])
bmx}
))
uu1 <- uu %>%
dplyr::mutate(uniq_data = purrr::map(full_data,  .f = function(.x) {
bmx <- .x %>% dplyr::group_by(slbm, temp_cvrt) %>%
dplyr::summarise(n = dplyr::n(), .groups = "drop")
bmx
})) %>% dplyr::ungroup() %>% dplyr::select(-data)
return(uu1)
}
else {
# return only the weighted sliding BM sample
data %>% dplyr::group_by(Station, Kblockind) %>% tidyr::nest() %>%
dplyr::mutate(uniq_data = purrr::map(.x = data, .f = function(.x) {
bmx <- slbm::blockmax(.x$Obs, r = blcksz, method = "sliding",
looplastblock = looplastblock)
bmx <- data.frame(slbm = bmx, temp_cvrt = .x$tempcvrt[1:length(bmx)])
bmx <- bmx %>% dplyr::group_by(slbm, temp_cvrt) %>%
dplyr::summarise(n = dplyr::n(), .groups = "drop")
# bmx$n[which.max(bmx$slbm)] <- blcksz
bmx
})) %>% dplyr::ungroup() %>% dplyr::select(-data)
}
}
else {
if(returnfullsamp) {
uu <- data %>% dplyr::group_by(Station, Kblockind) %>% tidyr::nest() %>%
dplyr::mutate(full_data = purrr::map(.x = data, .f = function(.x) {
bmx <- slbm::blockmax(.x$Obs, r = blcksz, "sliding", looplastblock = looplastblock)
bmx <- data.frame(slbm = bmx)
bmx}))
uu1 <- uu %>%
dplyr::mutate(uniq_data = purrr::map(full_data,  .f = function(.x) {
bmx <- .x %>% dplyr::group_by(slbm) %>%
dplyr::summarise(n = dplyr::n(), .groups = "drop")
bmx
})) %>% dplyr::ungroup() %>% dplyr::select(-data)
return(uu1)
} else {
data %>% dplyr::group_by(Station, Kblockind) %>% tidyr::nest() %>%
dplyr::mutate(uniq_data = purrr::map(.x = data, .f = function(.x) {
bmx <- slbm::blockmax(.x$Obs, r = blcksz, "sliding", looplastblock = looplastblock)
bmx <- data.frame(slbm = bmx)
bmx <- bmx %>% dplyr::group_by(slbm) %>%
dplyr::summarise(n = dplyr::n(), .groups = "drop")
bmx
})) %>% dplyr::ungroup() %>% dplyr::select(-data)
}
}
}
#' @return The time series of disjoint block maxima
#' (a vector of length \eqn{n/r} or \eqn{\lfloor n/r \rfloor} +1, see details)
#' or sliding block maxima
#' (a vector of length \eqn{n-r+1})
#' @export
#'
#' @examples
#' x <- runif(200)
#' blockmax(x, 20, "disjoint")
#' blockmax(x, 20, "sliding")
blockmax <- function(data, r, method=c("disjoint", "sliding"), looplastblock = FALSE) {
method <- match.arg(method)
if (!is.vector(data, mode = "numeric"))
stop("data must be a numeric vector")
n <- length(data)
if ( !(assertthat::is.count(r)) || r > n )
stop("r must be a whole number between 1 and length(data)")
if(method == "disjoint") {
result <- apply(X = matrix(c(data,
rep(NA, ifelse(((floor(n/r) +1)*r -n) == r , 0,
(floor(n/r) +1)*r -n))), nrow = r),
MARGIN = 2,
FUN = max, na.rm = TRUE)
} else {
if(looplastblock) {
result <- RcppRoll::roll_max(c(data, data[1:(r-1)]), r, na.rm = TRUE)
}
else {
result <- RcppRoll::roll_max(data, r, na.rm = TRUE)
}
}
result[result == -Inf] <- NA
return(result)
}
blcksz <- 90
ny <- 50
xx <- evd::rgpd(ny*blcksz, shape = 0.2)
df.xx <- data.frame(Station = "X1", Obs = xx)
k <- 4
ndata <- blcksz * ny
nKblocks <- ceiling(ndata/(k*blcksz))
indexblock <- data.frame(blockind = c(rep(1:(nKblocks-1), each = k*blcksz),
rep(nKblocks, ndata - k*blcksz*(nKblocks-1))),
obsind = 1:ndata)
sluniq_wb <- get_uniq_bm_boot(df.xx, blcksz = blcksz, K = k, indexblock = indexblock,
temp_cvrt = NULL, looplastblock = TRUE,
returnfullsamp = TRUE)
#' ndata <- blcksz * ny
#' nKblocks <- ceiling(ndata/(k*blcksz))
#' indexblock <- data.frame(blockind = c(rep(1:(nKblocks-1), each = k*blcksz),
#'                                       rep(nKblocks, ndata - k*blcksz*(nKblocks-1))),
#'                          obsind = 1:ndata)
#'
#' sluniq_wb <- get_uniq_bm_boot(df.xx, blcksz = blcksz, K = k, indexblock = indexblock,
#'                               temp_cvrt = NULL, looplastblock = TRUE,
#'                               returnfullsamp = TRUE)
#'
get_uniq_bm_boot <- function (data, blcksz, K,  indexblock, temp_cvrt = NULL,
looplastblock = TRUE, returnfullsamp = FALSE) {
ndat <- nrow(data)
# fill up last Kblock if it contains less observations than the other blocks,
# observations of last block are repeated, not sure if that's the best method
if(!(ndat/(K*blcksz)  == floor(ndat/(K*blcksz)))) {
m <- ceiling(ndat/blcksz)
mk <- floor(m/K)
diffmk <- K - m + mk*K
data <- data %>% dplyr::bind_rows(data[(ndat - diffmk*blcksz +1):ndat,  ])
indexblock <- indexblock %>% dplyr::bind_rows(data.frame(blockind = rep(mk +1, diffmk*blcksz ), obsind = ndat + (1:(diffmk*blcksz))))
}
data$Kblockind <- indexblock$blockind
# when using temporal covariate
if (!is.null(temp_cvrt)) {
n.cvrt <- length(temp_cvrt)
# add column containing the temporal covariate. If temporal covariate is given for
# sliding bm only, repeat the last value to obtain temporal covariate for each day
data$tempcvrt <- c(temp_cvrt, rep(temp_cvrt[n.cvrt], (nrow(data) - n.cvrt)))
if(returnfullsamp) {
# return the sliding BM sample itself and the weighted sliding BM sample
uu <- data %>% dplyr::group_by(Station, Kblockind) %>% tidyr::nest() %>%
dplyr::mutate(full_data = purrr::map(.x = data, .f = function(.x) {
bmx <- slbm::blockmax(.x$Obs, r = blcksz, method = "sliding",
looplastblock = looplastblock)
bmx <- data.frame(slbm = bmx, temp_cvrt = .x$tempcvrt[1:length(bmx)])
bmx}
))
uu1 <- uu %>%
dplyr::mutate(uniq_data = purrr::map(full_data,  .f = function(.x) {
bmx <- .x %>% dplyr::group_by(slbm, temp_cvrt) %>%
dplyr::summarise(n = dplyr::n(), .groups = "drop")
bmx
})) %>% dplyr::ungroup() %>% dplyr::select(-data)
return(uu1)
}
else {
# return only the weighted sliding BM sample
data %>% dplyr::group_by(Station, Kblockind) %>% tidyr::nest() %>%
dplyr::mutate(uniq_data = purrr::map(.x = data, .f = function(.x) {
bmx <- slbm::blockmax(.x$Obs, r = blcksz, method = "sliding",
looplastblock = looplastblock)
bmx <- data.frame(slbm = bmx, temp_cvrt = .x$tempcvrt[1:length(bmx)])
bmx <- bmx %>% dplyr::group_by(slbm, temp_cvrt) %>%
dplyr::summarise(n = dplyr::n(), .groups = "drop")
# bmx$n[which.max(bmx$slbm)] <- blcksz
bmx
})) %>% dplyr::ungroup() %>% dplyr::select(-data)
}
}
else {
if(returnfullsamp) {
uu <- data %>% dplyr::group_by(Station, Kblockind) %>% tidyr::nest() %>%
dplyr::mutate(full_data = purrr::map(.x = data, .f = function(.x) {
bmx <- slbm::blockmax(.x$Obs, r = blcksz, "sliding", looplastblock = looplastblock)
bmx <- data.frame(slbm = bmx)
bmx}))
uu1 <- uu %>%
dplyr::mutate(uniq_data = purrr::map(full_data,  .f = function(.x) {
bmx <- .x %>% dplyr::group_by(slbm) %>%
dplyr::summarise(n = dplyr::n(), .groups = "drop")
bmx
})) %>% dplyr::ungroup() %>% dplyr::select(-data)
return(uu1)
} else {
data %>% dplyr::group_by(Station, Kblockind) %>% tidyr::nest() %>%
dplyr::mutate(uniq_data = purrr::map(.x = data, .f = function(.x) {
bmx <- slbm::blockmax(.x$Obs, r = blcksz, "sliding", looplastblock = looplastblock)
bmx <- data.frame(slbm = bmx)
bmx <- bmx %>% dplyr::group_by(slbm) %>%
dplyr::summarise(n = dplyr::n(), .groups = "drop")
bmx
})) %>% dplyr::ungroup() %>% dplyr::select(-data)
}
}
}
sluniq_wb <- get_uniq_bm_boot(df.xx, blcksz = blcksz, K = k, indexblock = indexblock,
temp_cvrt = NULL, looplastblock = TRUE,
returnfullsamp = TRUE)
library(tidyverse)
sluniq_wb <- get_uniq_bm_boot(df.xx, blcksz = blcksz, K = k, indexblock = indexblock,
temp_cvrt = NULL, looplastblock = TRUE,
returnfullsamp = TRUE)
#' ndata <- blcksz * ny
#' nKblocks <- ceiling(ndata/(k*blcksz))
#' indexblock <- data.frame(blockind = c(rep(1:(nKblocks-1), each = k*blcksz),
#'                                       rep(nKblocks, ndata - k*blcksz*(nKblocks-1))),
#'                          obsind = 1:ndata)
#'
#' sluniq_wb <- get_uniq_bm_boot(df.xx, blcksz = blcksz, K = k, indexblock = indexblock,
#'                               temp_cvrt = NULL, looplastblock = TRUE,
#'                               returnfullsamp = TRUE)
#'
get_uniq_bm_boot <- function (data, blcksz, K,  indexblock, temp_cvrt = NULL,
looplastblock = TRUE, returnfullsamp = FALSE) {
ndat <- nrow(data)
# fill up last Kblock if it contains less observations than the other blocks,
# observations of last block are repeated, not sure if that's the best method
if(!(ndat/(K*blcksz)  == floor(ndat/(K*blcksz)))) {
m <- ceiling(ndat/blcksz)
mk <- floor(m/K)
diffmk <- K - m + mk*K
data <- data %>% dplyr::bind_rows(data[(ndat - diffmk*blcksz +1):ndat,  ])
indexblock <- indexblock %>% dplyr::bind_rows(data.frame(blockind = rep(mk +1, diffmk*blcksz ), obsind = ndat + (1:(diffmk*blcksz))))
}
data$Kblockind <- indexblock$blockind
# when using temporal covariate
if (!is.null(temp_cvrt)) {
n.cvrt <- length(temp_cvrt)
# add column containing the temporal covariate. If temporal covariate is given for
# sliding bm only, repeat the last value to obtain temporal covariate for each day
data$tempcvrt <- c(temp_cvrt, rep(temp_cvrt[n.cvrt], (nrow(data) - n.cvrt)))
if(returnfullsamp) {
# return the sliding BM sample itself and the weighted sliding BM sample
uu <- data %>% dplyr::group_by(Station, Kblockind) %>% tidyr::nest() %>%
dplyr::mutate(full_data = purrr::map(.x = data, .f = function(.x) {
bmx <- blockmax(.x$Obs, r = blcksz, method = "sliding",
looplastblock = looplastblock)
bmx <- data.frame(slbm = bmx, temp_cvrt = .x$tempcvrt[1:length(bmx)])
bmx}
))
uu1 <- uu %>%
dplyr::mutate(uniq_data = purrr::map(full_data,  .f = function(.x) {
bmx <- .x %>% dplyr::group_by(slbm, temp_cvrt) %>%
dplyr::summarise(n = dplyr::n(), .groups = "drop")
bmx
})) %>% dplyr::ungroup() %>% dplyr::select(-data)
return(uu1)
}
else {
# return only the weighted sliding BM sample
data %>% dplyr::group_by(Station, Kblockind) %>% tidyr::nest() %>%
dplyr::mutate(uniq_data = purrr::map(.x = data, .f = function(.x) {
bmx <- blockmax(.x$Obs, r = blcksz, method = "sliding",
looplastblock = looplastblock)
bmx <- data.frame(slbm = bmx, temp_cvrt = .x$tempcvrt[1:length(bmx)])
bmx <- bmx %>% dplyr::group_by(slbm, temp_cvrt) %>%
dplyr::summarise(n = dplyr::n(), .groups = "drop")
# bmx$n[which.max(bmx$slbm)] <- blcksz
bmx
})) %>% dplyr::ungroup() %>% dplyr::select(-data)
}
}
else {
if(returnfullsamp) {
uu <- data %>% dplyr::group_by(Station, Kblockind) %>% tidyr::nest() %>%
dplyr::mutate(full_data = purrr::map(.x = data, .f = function(.x) {
bmx <- blockmax(.x$Obs, r = blcksz, "sliding", looplastblock = looplastblock)
bmx <- data.frame(slbm = bmx)
bmx}))
uu1 <- uu %>%
dplyr::mutate(uniq_data = purrr::map(full_data,  .f = function(.x) {
bmx <- .x %>% dplyr::group_by(slbm) %>%
dplyr::summarise(n = dplyr::n(), .groups = "drop")
bmx
})) %>% dplyr::ungroup() %>% dplyr::select(-data)
return(uu1)
} else {
data %>% dplyr::group_by(Station, Kblockind) %>% tidyr::nest() %>%
dplyr::mutate(uniq_data = purrr::map(.x = data, .f = function(.x) {
bmx <- blockmax(.x$Obs, r = blcksz, "sliding", looplastblock = looplastblock)
bmx <- data.frame(slbm = bmx)
bmx <- bmx %>% dplyr::group_by(slbm) %>%
dplyr::summarise(n = dplyr::n(), .groups = "drop")
bmx
})) %>% dplyr::ungroup() %>% dplyr::select(-data)
}
}
}
sluniq_wb <- get_uniq_bm_boot(df.xx, blcksz = blcksz, K = k, indexblock = indexblock,
temp_cvrt = NULL, looplastblock = TRUE,
returnfullsamp = TRUE)
sluniq_wb
sluniq_wb <- get_uniq_bm_boot(df.xx, blcksz = blcksz, K = k, indexblock = indexblock,
temp_cvrt = NULL, looplastblock = TRUE,
returnfullsamp = FALSE)
sluniq_wb %>% unnest(cols = uniq_data)
df.xx
