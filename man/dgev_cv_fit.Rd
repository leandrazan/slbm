% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dgev_cv_fit.R
\name{dgev_cv_fit}
\alias{dgev_cv_fit}
\title{d-GEV parameter estimation and quantile score evaluation on a test set}
\usage{
dgev_cv_fit(
  agg_bm,
  conc_bm,
  leave_out,
  ds,
  quants,
  mult_sc = FALSE,
  dur_offset = FALSE,
  int_offset = FALSE,
  method = "Nelder-Mead",
  Maxit = 1500,
  ...
)
}
\arguments{
\item{agg_bm}{Tibble as obtained from the output of \code{\link[=get_agg_bm()]{get_agg_bm()()}}.}

\item{conc_bm}{Tibble of sliding block maxima for all possible combinations of
years/seasons that are consecutive after removing observations from a year/season
for the test set}

\item{leave_out}{The index (i.e. years/seasons ...) that make up the test set.
These years are left out in the fitting procedure.}

\item{ds}{Vector of durations.}

\item{quants}{Vector of quantiles to estimate based on the d-GEV fit.}

\item{mult_sc}{logical. Whether to fit a multi-scale parameter eta2}

\item{dur_offset}{logical. Whether to fit a duration offset parameter theta}

\item{int_offset}{logical. Whether to fit an intensity offset parameter tau}

\item{method}{Optimisation method used in \code{\link[=optim]{optim()}}.}

\item{Maxit}{Passed to the control argument of \code{\link[=optim]{optim()}}:
maximum number of iterations performed during the optimisation.}

\item{...}{Further arguments that can be passed to the control argument of \code{\link[=optim]{optim()}}.}
}
\value{
Returns a tibble containing the estimated parameters, the estimation method,
a code for the convergence (zero indicates successful convergence), the values of \eqn{p} for
which quantiles are estimated, the values of the durations \eqn{d} for which
quantiles are estimated, the test set (data that is used for computing the quantile score)
and the quantile score.
}
\description{
d-GEV parameter estimation and quantile score evaluation on a test set
}
\examples{
dates <- seq(as.POSIXct("2000-01-01 00:00:00"),
as.POSIXct("2020-12-31 23:00:00"),by = 'hour')
prec <- rgamma(length(dates))
example_data <- data.frame(MESS_DATUM = dates, RR = prec)

agbm <- get_agg_bm(example_data, ds = c(1,2,4,8,16, 24, 48))
agdf <- fun_aggregate2df( example_data, ds = c(1,2,4,8,16, 24, 48) )
concbm <- compute_conc_bm_id(agdf)
cv_fit_eff(agbm, concbm, ds = c(1,2) , leave_out = c(2004, 2008, 2017),
 quants = c(.5, .9, .99) )

}
